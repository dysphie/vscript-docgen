
// Generated by peggy v. 2.0.1 (ts-pegjs plugin v. 2.1.0 )
//
// https://peggyjs.org/   https://github.com/metadevpro/ts-pegjs

"use strict";

export interface IFilePosition {
  offset: number;
  line: number;
  column: number;
}

export interface IFileRange {
  start: IFilePosition;
  end: IFilePosition;
  source: string;
}

export interface ILiteralExpectation {
  type: "literal";
  text: string;
  ignoreCase: boolean;
}

export interface IClassParts extends Array<string | IClassParts> {}

export interface IClassExpectation {
  type: "class";
  parts: IClassParts;
  inverted: boolean;
  ignoreCase: boolean;
}

export interface IAnyExpectation {
  type: "any";
}

export interface IEndExpectation {
  type: "end";
}

export interface IOtherExpectation {
  type: "other";
  description: string;
}

export type Expectation = ILiteralExpectation | IClassExpectation | IAnyExpectation | IEndExpectation | IOtherExpectation;

function peg$padEnd(str: string, targetLength: number, padString: string) {
  padString = padString || ' ';
  if (str.length > targetLength) {
    return str;
  }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

export class SyntaxError extends Error {
  public static buildMessage(expected: Expectation[], found: string | null) {
    function hex(ch: string): string {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s: string): string {
      return s
        .replace(/\\/g, "\\\\")
        .replace(/"/g,  "\\\"")
        .replace(/\0/g, "\\0")
        .replace(/\t/g, "\\t")
        .replace(/\n/g, "\\n")
        .replace(/\r/g, "\\r")
        .replace(/[\x00-\x0F]/g,            (ch) => "\\x0" + hex(ch) )
        .replace(/[\x10-\x1F\x7F-\x9F]/g, (ch) => "\\x"  + hex(ch) );
    }

    function classEscape(s: string): string {
      return s
        .replace(/\\/g, "\\\\")
        .replace(/\]/g, "\\]")
        .replace(/\^/g, "\\^")
        .replace(/-/g,  "\\-")
        .replace(/\0/g, "\\0")
        .replace(/\t/g, "\\t")
        .replace(/\n/g, "\\n")
        .replace(/\r/g, "\\r")
        .replace(/[\x00-\x0F]/g,            (ch) => "\\x0" + hex(ch) )
        .replace(/[\x10-\x1F\x7F-\x9F]/g, (ch) => "\\x"  + hex(ch) );
    }

    function describeExpectation(expectation: Expectation) {
      switch (expectation.type) {
        case "literal":
          return "\"" + literalEscape(expectation.text) + "\"";
        case "class":
          const escapedParts = expectation.parts.map((part) => {
            return Array.isArray(part)
              ? classEscape(part[0] as string) + "-" + classEscape(part[1] as string)
              : classEscape(part);
          });

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        case "any":
          return "any character";
        case "end":
          return "end of input";
        case "other":
          return expectation.description;
      }
    }

    function describeExpected(expected1: Expectation[]) {
      const descriptions = expected1.map(describeExpectation);
      let i: number;
      let j: number;

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ")
            + ", or "
            + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found1: string | null) {
      return found1 ? "\"" + literalEscape(found1) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  }

  public message: string;
  public expected: Expectation[];
  public found: string | null;
  public location: IFileRange;
  public name: string;

  constructor(message: string, expected: Expectation[], found: string | null, location: IFileRange) {
    super();
    this.message = message;
    this.expected = expected;
    this.found = found;
    this.location = location;
    this.name = "SyntaxError";

    if (typeof (Object as any).setPrototypeOf === "function") {
      (Object as any).setPrototypeOf(this, SyntaxError.prototype);
    } else {
      (this as any).__proto__ = SyntaxError.prototype;
    }
    if (typeof (Error as any).captureStackTrace === "function") {
      (Error as any).captureStackTrace(this, SyntaxError);
    }
  }

  format(sources: { source: string; text: string }[]): string {
    let str = 'Error: ' + this.message;
    if (this.location) {
      let src: string[] | null = null;
      let k;
      for (k = 0; k < sources.length; k++) {
        if (sources[k].source === this.location.source) {
          src = sources[k].text.split(/\r\n|\n|\r/g);
          break;
        }
      }
      let s = this.location.start;
      let loc = this.location.source + ':' + s.line + ':' + s.column;
      if (src) {
        let e = this.location.end;
        let filler = peg$padEnd('', s.line.toString().length, ' ');
        let line = src[s.line - 1];
        let last = s.line === e.line ? e.column : line.length + 1;
        str += '\n --> ' + loc + '\n' + filler + ' |\n' + s.line + ' | ' + line + '\n' + filler + ' | ' +
          peg$padEnd('', s.column - 1, ' ') +
          peg$padEnd('', last - s.column, '^');
      } else {
        str += '\n at ' + loc;
      }
    }
    return str;
  }
}

function peg$parse(input: string, options?: IParseOptions) {
  options = options !== undefined ? options : {};

  const peg$FAILED: Readonly<any> = {};
  const peg$source = options.grammarSource;

  const peg$startRuleFunctions: {[id: string]: any} = { start: peg$parsestart };
  let peg$startRuleFunction: () => any = peg$parsestart;

  const peg$c0 = "Description:";
  const peg$c1 = peg$literalExpectation("Description:", false);
  const peg$c2 = function(desc: any): any { return desc.join(""); };
  const peg$c3 = "->";
  const peg$c4 = peg$literalExpectation("->", false);
  const peg$c5 = function(cls: any): any { return cls };
  const peg$c6 = ".";
  const peg$c7 = peg$literalExpectation(".", false);
  const peg$c8 = function(cls: any, separator: any): any { return cls };
  const peg$c9 = "::";
  const peg$c10 = peg$literalExpectation("::", false);
  const peg$c11 = "Function:";
  const peg$c12 = peg$literalExpectation("Function:", false);
  const peg$c13 = "Signature:";
  const peg$c14 = peg$literalExpectation("Signature:", false);
  const peg$c15 = "(";
  const peg$c16 = peg$literalExpectation("(", false);
  const peg$c17 = ")";
  const peg$c18 = peg$literalExpectation(")", false);
  const peg$c19 = function(ret: any, cls: any, method: any, args: any, desc: any): any {
          return {
          "kind": "function",
          "id": method,
          "ret": ret,
          "class": cls,
          "args": args,
          "desc": desc
        };
      };
  const peg$c20 = peg$otherExpectation("float");
  const peg$c21 = "-";
  const peg$c22 = peg$literalExpectation("-", false);
  const peg$c23 = /^[0-9]/;
  const peg$c24 = peg$classExpectation([["0", "9"]], false, false);
  const peg$c25 = function(left: any, right: any): any { return parseFloat(left.join("") + "." +   right.join("")); };
  const peg$c26 = peg$otherExpectation("integer");
  const peg$c27 = function(digits: any): any { return parseInt(digits.join(""), 10); };
  const peg$c28 = peg$otherExpectation("vector");
  const peg$c29 = "Vector(";
  const peg$c30 = peg$literalExpectation("Vector(", false);
  const peg$c31 = ",";
  const peg$c32 = peg$literalExpectation(",", false);
  const peg$c33 = function(x: any, y: any, z: any): any { return text(); };
  const peg$c34 = "Constant:";
  const peg$c35 = peg$literalExpectation("Constant:", false);
  const peg$c36 = "Value:";
  const peg$c37 = peg$literalExpectation("Value:", false);
  const peg$c38 = function(from: any, id: any, value: any, type: any, desc: any): any {
          return {
          "kind": "constant",
          "id": id,
          "type": type,
          "value": value,
          "desc": desc,
          "enum": from
        };
      };
  const peg$c39 = "Member:";
  const peg$c40 = peg$literalExpectation("Member:", false);
  const peg$c41 = function(ret: any, cls: any, id: any, desc: any): any {
          return {
              "kind": "class_member",
              "id": id,
              "class": cls,
              "desc" : desc
          }
      };
  const peg$c42 = "Hook:";
  const peg$c43 = peg$literalExpectation("Hook:", false);
  const peg$c44 = function(ret: any, cls: any, id: any, args: any, desc: any): any {
          return {
              "kind": "hook",
              "id": id,
              "class": cls,
              "description": desc,
              "args": args
          }
      };
  const peg$c45 = "\n";
  const peg$c46 = peg$literalExpectation("\n", false);
  const peg$c47 = "\r";
  const peg$c48 = peg$literalExpectation("\r", false);
  const peg$c49 = /^[^\n\r]/;
  const peg$c50 = peg$classExpectation(["\n", "\r"], true, false);
  const peg$c51 = /^[a-zA-Z_<>]/;
  const peg$c52 = peg$classExpectation([["a", "z"], ["A", "Z"], "_", "<", ">"], false, false);
  const peg$c53 = function(name: any): any { return name.join("") };
  const peg$c54 = "[";
  const peg$c55 = peg$literalExpectation("[", false);
  const peg$c56 = "]";
  const peg$c57 = peg$literalExpectation("]", false);
  const peg$c58 = function(type: any): any { return {
		// eslint-disable-next-line no-restricted-globals
          "id": name,
          "type": type
          }
      };
  const peg$c59 = /^[a-zA-Z0-9_<>]/;
  const peg$c60 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "_", "<", ">"], false, false);
  const peg$c61 = function(name: any): any { return name };
  const peg$c62 = function(type: any, name: any): any { 
      return { "type": type, "id": name } };
  const peg$c63 = peg$otherExpectation("Whitespace");
  const peg$c64 = /^[ \t]/;
  const peg$c65 = peg$classExpectation([" ", "\t"], false, false);
  const peg$c66 = peg$otherExpectation("MandatoryWhitespace");
  const peg$c67 = peg$otherExpectation("NewLine");
  const peg$c68 = /^[ \n\r]/;
  const peg$c69 = peg$classExpectation([" ", "\n", "\r"], false, false);
  const peg$c70 = function(head: any, tail: any): any {
        return buildList(head, tail, 3);
      };
  const peg$c71 = "=====================================";
  const peg$c72 = peg$literalExpectation("=====================================", false);
  const peg$c73 = "Enum:";
  const peg$c74 = peg$literalExpectation("Enum:", false);
  const peg$c75 = "Elements:";
  const peg$c76 = peg$literalExpectation("Elements:", false);
  const peg$c77 = function(id: any, count: any, desc: any): any {
          return {
              "kind": "enum",
              "id": id,
              "size": count,
              "desc": desc
          }
      };
  const peg$c78 = "Class:";
  const peg$c79 = peg$literalExpectation("Class:", false);
  const peg$c80 = "Base:";
  const peg$c81 = peg$literalExpectation("Base:", false);
  const peg$c82 = function(id: any, base: any, desc: any): any {
          return {
              "kind": "class",
              "id": id,
              "parent": base,
              "desc": desc
          }
      };
  const peg$c83 = function(type: any): any { return type };

  let peg$currPos = 0;
  let peg$savedPos = 0;
  const peg$posDetailsCache = [{ line: 1, column: 1 }];
  let peg$maxFailPos = 0;
  let peg$maxFailExpected: Expectation[] = [];
  let peg$silentFails = 0;

  let peg$result;

  if (options.startRule !== undefined) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text(): string {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location(): IFileRange {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description: string, location1?: IFileRange) {
    location1 = location1 !== undefined
      ? location1
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location1
    );
  }

  function error(message: string, location1?: IFileRange) {
    location1 = location1 !== undefined
      ? location1
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location1);
  }

  function peg$literalExpectation(text1: string, ignoreCase: boolean): ILiteralExpectation {
    return { type: "literal", text: text1, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts: IClassParts, inverted: boolean, ignoreCase: boolean): IClassExpectation {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation(): IAnyExpectation {
    return { type: "any" };
  }

  function peg$endExpectation(): IEndExpectation {
    return { type: "end" };
  }

  function peg$otherExpectation(description: string): IOtherExpectation {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos: number) {
    let details = peg$posDetailsCache[pos];
    let p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos: number, endPos: number): IFileRange {
    const startPosDetails = peg$computePosDetails(startPos);
    const endPosDetails = peg$computePosDetails(endPos);

    return {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected1: Expectation) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected1);
  }

  function peg$buildSimpleError(message: string, location1: IFileRange) {
    return new SyntaxError(message, [], "", location1);
  }

  function peg$buildStructuredError(expected1: Expectation[], found: string | null, location1: IFileRange) {
    return new SyntaxError(
      SyntaxError.buildMessage(expected1, found),
      expected1,
      found,
      location1
    );
  }

  function peg$parsestart(): any {
    let s0, s1;

    s0 = [];
    s1 = peg$parseFnBlock();
    if (s1 as any === peg$FAILED) {
      s1 = peg$parseClassMember();
      if (s1 as any === peg$FAILED) {
        s1 = peg$parseHook();
        if (s1 as any === peg$FAILED) {
          s1 = peg$parseConstant();
          if (s1 as any === peg$FAILED) {
            s1 = peg$parseEnum();
            if (s1 as any === peg$FAILED) {
              s1 = peg$parseClass();
            }
          }
        }
      }
    }
    while (s1 as any !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$parseFnBlock();
      if (s1 as any === peg$FAILED) {
        s1 = peg$parseClassMember();
        if (s1 as any === peg$FAILED) {
          s1 = peg$parseHook();
          if (s1 as any === peg$FAILED) {
            s1 = peg$parseConstant();
            if (s1 as any === peg$FAILED) {
              s1 = peg$parseEnum();
              if (s1 as any === peg$FAILED) {
                s1 = peg$parseClass();
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseDescriptionShared(): any {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 12) === peg$c0) {
      s1 = peg$c0;
      peg$currPos += 12;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c1); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 as any !== peg$FAILED) {
        s3 = [];
        s4 = peg$parsechar();
        if (s4 as any !== peg$FAILED) {
          while (s4 as any !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parsechar();
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c2(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseHookClass(): any {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseIdentifier();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 as any !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c3) {
          s3 = peg$c3;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c4); }
        }
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parse_();
          if (s4 as any !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c5(s1);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMemberClass(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseIdentifier();
    if (s1 as any !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 46) {
        s2 = peg$c6;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c7); }
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c8(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFnClass(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseIdentifier();
    if (s1 as any !== peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c9) {
        s2 = peg$c9;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c10); }
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c8(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFnBlock(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9) === peg$c11) {
      s1 = peg$c11;
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c12); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseFnClass();
        if (s3 as any === peg$FAILED) {
          s3 = null;
        }
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parseIdentifier();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parse___();
            if (s5 as any !== peg$FAILED) {
              if (input.substr(peg$currPos, 10) === peg$c13) {
                s6 = peg$c13;
                peg$currPos += 10;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c14); }
              }
              if (s6 as any !== peg$FAILED) {
                s7 = peg$parse_();
                if (s7 as any !== peg$FAILED) {
                  s8 = peg$parseRetVal();
                  if (s8 as any === peg$FAILED) {
                    s8 = null;
                  }
                  if (s8 as any !== peg$FAILED) {
                    s9 = peg$parse_();
                    if (s9 as any !== peg$FAILED) {
                      s10 = peg$parseFnClass();
                      if (s10 as any === peg$FAILED) {
                        s10 = null;
                      }
                      if (s10 as any !== peg$FAILED) {
                        s11 = peg$parseIdentifier();
                        if (s11 as any !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 40) {
                            s12 = peg$c15;
                            peg$currPos++;
                          } else {
                            s12 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c16); }
                          }
                          if (s12 as any !== peg$FAILED) {
                            s13 = peg$parseParamList();
                            if (s13 as any === peg$FAILED) {
                              s13 = null;
                            }
                            if (s13 as any !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 41) {
                                s14 = peg$c17;
                                peg$currPos++;
                              } else {
                                s14 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c18); }
                              }
                              if (s14 as any !== peg$FAILED) {
                                s15 = peg$parse___();
                                if (s15 as any !== peg$FAILED) {
                                  s16 = peg$parseDescriptionShared();
                                  if (s16 as any === peg$FAILED) {
                                    s16 = null;
                                  }
                                  if (s16 as any !== peg$FAILED) {
                                    s17 = peg$parse___();
                                    if (s17 as any !== peg$FAILED) {
                                      peg$savedPos = s0;
                                      s1 = peg$c19(s8, s10, s11, s13, s16);
                                      s0 = s1;
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseConstantValue(): any {
    let s0;

    s0 = peg$parseFloatValue();
    if (s0 as any === peg$FAILED) {
      s0 = peg$parseIntegerValue();
      if (s0 as any === peg$FAILED) {
        s0 = peg$parseVectorValue();
      }
    }

    return s0;
  }

  function peg$parseFloatValue(): any {
    let s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 45) {
      s1 = peg$c21;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c22); }
    }
    if (s1 as any === peg$FAILED) {
      s1 = null;
    }
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      if (peg$c23.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c24); }
      }
      if (s3 as any !== peg$FAILED) {
        while (s3 as any !== peg$FAILED) {
          s2.push(s3);
          if (peg$c23.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c24); }
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 as any !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 46) {
          s3 = peg$c6;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c7); }
        }
        if (s3 as any !== peg$FAILED) {
          s4 = [];
          if (peg$c23.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c24); }
          }
          if (s5 as any !== peg$FAILED) {
            while (s5 as any !== peg$FAILED) {
              s4.push(s5);
              if (peg$c23.test(input.charAt(peg$currPos))) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c24); }
              }
            }
          } else {
            s4 = peg$FAILED;
          }
          if (s4 as any !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c25(s2, s4);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c20); }
    }

    return s0;
  }

  function peg$parseIntegerValue(): any {
    let s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 45) {
      s1 = peg$c21;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c22); }
    }
    if (s1 as any === peg$FAILED) {
      s1 = null;
    }
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      if (peg$c23.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c24); }
      }
      if (s3 as any !== peg$FAILED) {
        while (s3 as any !== peg$FAILED) {
          s2.push(s3);
          if (peg$c23.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c24); }
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c27(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c26); }
    }

    return s0;
  }

  function peg$parseVectorValue(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c29) {
      s1 = peg$c29;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c30); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseFloatValue();
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parse_();
          if (s4 as any !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c31;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c32); }
            }
            if (s5 as any !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 as any !== peg$FAILED) {
                s7 = peg$parseFloatValue();
                if (s7 as any !== peg$FAILED) {
                  s8 = peg$parse_();
                  if (s8 as any !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 44) {
                      s9 = peg$c31;
                      peg$currPos++;
                    } else {
                      s9 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c32); }
                    }
                    if (s9 as any !== peg$FAILED) {
                      s10 = peg$parse_();
                      if (s10 as any !== peg$FAILED) {
                        s11 = peg$parseFloatValue();
                        if (s11 as any !== peg$FAILED) {
                          s12 = peg$parse_();
                          if (s12 as any !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 41) {
                              s13 = peg$c17;
                              peg$currPos++;
                            } else {
                              s13 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c18); }
                            }
                            if (s13 as any !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$c33(s3, s7, s11);
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c28); }
    }

    return s0;
  }

  function peg$parseConstant(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9) === peg$c34) {
      s1 = peg$c34;
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c35); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 40) {
          s4 = peg$c15;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c16); }
        }
        if (s4 as any !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 as any !== peg$FAILED) {
            s6 = peg$parseVarType();
            if (s6 as any !== peg$FAILED) {
              s7 = peg$parse_();
              if (s7 as any !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s8 = peg$c17;
                  peg$currPos++;
                } else {
                  s8 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c18); }
                }
                if (s8 as any !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7, s8];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 as any === peg$FAILED) {
          s3 = null;
        }
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parse_();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$currPos;
            s6 = peg$parseIdentifier();
            if (s6 as any !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 46) {
                s7 = peg$c6;
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c7); }
              }
              if (s7 as any !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 as any === peg$FAILED) {
              s5 = null;
            }
            if (s5 as any !== peg$FAILED) {
              s6 = peg$parseIdentifier();
              if (s6 as any !== peg$FAILED) {
                s7 = peg$parse___();
                if (s7 as any !== peg$FAILED) {
                  if (input.substr(peg$currPos, 6) === peg$c36) {
                    s8 = peg$c36;
                    peg$currPos += 6;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c37); }
                  }
                  if (s8 as any !== peg$FAILED) {
                    s9 = peg$parse_();
                    if (s9 as any !== peg$FAILED) {
                      s10 = peg$parseConstantValue();
                      if (s10 as any !== peg$FAILED) {
                        s11 = peg$parse_();
                        if (s11 as any !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 40) {
                            s12 = peg$c15;
                            peg$currPos++;
                          } else {
                            s12 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c16); }
                          }
                          if (s12 as any !== peg$FAILED) {
                            s13 = peg$parseVarType();
                            if (s13 as any !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 41) {
                                s14 = peg$c17;
                                peg$currPos++;
                              } else {
                                s14 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c18); }
                              }
                              if (s14 as any !== peg$FAILED) {
                                s15 = peg$parse___();
                                if (s15 as any !== peg$FAILED) {
                                  s16 = peg$parseDescriptionShared();
                                  if (s16 as any === peg$FAILED) {
                                    s16 = null;
                                  }
                                  if (s16 as any !== peg$FAILED) {
                                    s17 = peg$parse___();
                                    if (s17 as any !== peg$FAILED) {
                                      peg$savedPos = s0;
                                      s1 = peg$c38(s5, s6, s10, s13, s16);
                                      s0 = s1;
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseClassMember(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c39) {
      s1 = peg$c39;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c40); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseMemberClass();
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parseIdentifier();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parse___();
            if (s5 as any !== peg$FAILED) {
              if (input.substr(peg$currPos, 10) === peg$c13) {
                s6 = peg$c13;
                peg$currPos += 10;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c14); }
              }
              if (s6 as any !== peg$FAILED) {
                s7 = peg$parse_();
                if (s7 as any !== peg$FAILED) {
                  s8 = peg$parseVarType();
                  if (s8 as any !== peg$FAILED) {
                    s9 = peg$parse_();
                    if (s9 as any !== peg$FAILED) {
                      s10 = peg$parseMemberClass();
                      if (s10 as any !== peg$FAILED) {
                        s11 = peg$parseIdentifier();
                        if (s11 as any !== peg$FAILED) {
                          s12 = peg$parse___();
                          if (s12 as any !== peg$FAILED) {
                            s13 = peg$parseDescriptionShared();
                            if (s13 as any === peg$FAILED) {
                              s13 = null;
                            }
                            if (s13 as any !== peg$FAILED) {
                              s14 = peg$parse___();
                              if (s14 as any !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c41(s8, s10, s11, s13);
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseHook(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c42) {
      s1 = peg$c42;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c43); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseHookClass();
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parseIdentifier();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parse___();
            if (s5 as any !== peg$FAILED) {
              if (input.substr(peg$currPos, 10) === peg$c13) {
                s6 = peg$c13;
                peg$currPos += 10;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c14); }
              }
              if (s6 as any !== peg$FAILED) {
                s7 = peg$parse_();
                if (s7 as any !== peg$FAILED) {
                  s8 = peg$parseVarType();
                  if (s8 as any !== peg$FAILED) {
                    s9 = peg$parse_();
                    if (s9 as any !== peg$FAILED) {
                      s10 = peg$parseHookClass();
                      if (s10 as any !== peg$FAILED) {
                        s11 = peg$parseIdentifier();
                        if (s11 as any !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 40) {
                            s12 = peg$c15;
                            peg$currPos++;
                          } else {
                            s12 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c16); }
                          }
                          if (s12 as any !== peg$FAILED) {
                            s13 = peg$parseParamList();
                            if (s13 as any === peg$FAILED) {
                              s13 = null;
                            }
                            if (s13 as any !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 41) {
                                s14 = peg$c17;
                                peg$currPos++;
                              } else {
                                s14 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c18); }
                              }
                              if (s14 as any !== peg$FAILED) {
                                s15 = peg$parse___();
                                if (s15 as any !== peg$FAILED) {
                                  s16 = peg$parseDescriptionShared();
                                  if (s16 as any === peg$FAILED) {
                                    s16 = null;
                                  }
                                  if (s16 as any !== peg$FAILED) {
                                    s17 = peg$parse___();
                                    if (s17 as any !== peg$FAILED) {
                                      peg$savedPos = s0;
                                      s1 = peg$c44(s8, s10, s11, s13, s16);
                                      s0 = s1;
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsenewline(): any {
    let s0, s1, s2;

    if (input.charCodeAt(peg$currPos) === 10) {
      s0 = peg$c45;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c46); }
    }
    if (s0 as any === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 13) {
        s1 = peg$c47;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c48); }
      }
      if (s1 as any !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 10) {
          s2 = peg$c45;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c46); }
        }
        if (s2 as any === peg$FAILED) {
          s2 = null;
        }
        if (s2 as any !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsechar(): any {
    let s0;

    if (peg$c49.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c50); }
    }

    return s0;
  }

  function peg$parseVarType(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (peg$c51.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c52); }
    }
    if (s2 as any !== peg$FAILED) {
      while (s2 as any !== peg$FAILED) {
        s1.push(s2);
        if (peg$c51.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c52); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c53(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseVarTypeAndName(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseVarType();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 91) {
          s4 = peg$c54;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c55); }
        }
        if (s4 as any !== peg$FAILED) {
          s5 = peg$currPos;
          s6 = [];
          s7 = peg$parsechar();
          if (s7 as any !== peg$FAILED) {
            while (s7 as any !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parsechar();
            }
          } else {
            s6 = peg$FAILED;
          }
          if (s6 as any !== peg$FAILED) {
            s5 = input.substring(s5, peg$currPos);
          } else {
            s5 = s6;
          }
          if (s5 as any !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 93) {
              s6 = peg$c56;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c57); }
            }
            if (s6 as any !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c58(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseIdentifier(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (peg$c59.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c60); }
    }
    if (s2 as any !== peg$FAILED) {
      while (s2 as any !== peg$FAILED) {
        s1.push(s2);
        if (peg$c59.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c60); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c53(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseParameterName(): any {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c54;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c55); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseIdentifier();
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parse_();
          if (s4 as any !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 93) {
              s5 = peg$c56;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c57); }
            }
            if (s5 as any !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c61(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseParameter(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseIdentifier();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseParameterName();
        if (s3 as any === peg$FAILED) {
          s3 = null;
        }
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c62(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parse_(): any {
    let s0, s1;

    peg$silentFails++;
    s0 = [];
    if (peg$c64.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c65); }
    }
    while (s1 as any !== peg$FAILED) {
      s0.push(s1);
      if (peg$c64.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c65); }
      }
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c63); }
    }

    return s0;
  }

  function peg$parse__(): any {
    let s0, s1;

    peg$silentFails++;
    s0 = [];
    if (peg$c64.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c65); }
    }
    if (s1 as any !== peg$FAILED) {
      while (s1 as any !== peg$FAILED) {
        s0.push(s1);
        if (peg$c64.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c65); }
        }
      }
    } else {
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c66); }
    }

    return s0;
  }

  function peg$parse___(): any {
    let s0, s1;

    peg$silentFails++;
    s0 = [];
    if (peg$c68.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c69); }
    }
    while (s1 as any !== peg$FAILED) {
      s0.push(s1);
      if (peg$c68.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c69); }
      }
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c67); }
    }

    return s0;
  }

  function peg$parseParamList(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseParameter();
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      if (s4 as any !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c31;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c32); }
        }
        if (s5 as any !== peg$FAILED) {
          s6 = peg$parse_();
          if (s6 as any !== peg$FAILED) {
            s7 = peg$parseParameter();
            if (s7 as any !== peg$FAILED) {
              s4 = [s4, s5, s6, s7];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (s4 as any !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c31;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c32); }
          }
          if (s5 as any !== peg$FAILED) {
            s6 = peg$parse_();
            if (s6 as any !== peg$FAILED) {
              s7 = peg$parseParameter();
              if (s7 as any !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c70(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSeparator(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 37) === peg$c71) {
      s1 = peg$c71;
      peg$currPos += 37;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c72); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parse___();
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEnum(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    s0 = peg$currPos;
    s1 = peg$parseSeparator();
    if (s1 as any !== peg$FAILED) {
      if (input.substr(peg$currPos, 5) === peg$c73) {
        s2 = peg$c73;
        peg$currPos += 5;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c74); }
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parse_();
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parseIdentifier();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parse___();
            if (s5 as any !== peg$FAILED) {
              if (input.substr(peg$currPos, 9) === peg$c75) {
                s6 = peg$c75;
                peg$currPos += 9;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c76); }
              }
              if (s6 as any !== peg$FAILED) {
                s7 = peg$parse_();
                if (s7 as any !== peg$FAILED) {
                  s8 = peg$parseIntegerValue();
                  if (s8 as any !== peg$FAILED) {
                    s9 = peg$parse___();
                    if (s9 as any !== peg$FAILED) {
                      s10 = peg$parseDescriptionShared();
                      if (s10 as any === peg$FAILED) {
                        s10 = null;
                      }
                      if (s10 as any !== peg$FAILED) {
                        s11 = peg$parse___();
                        if (s11 as any !== peg$FAILED) {
                          s12 = peg$parseSeparator();
                          if (s12 as any !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c77(s4, s8, s10);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseClass(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    s0 = peg$currPos;
    s1 = peg$parseSeparator();
    if (s1 as any !== peg$FAILED) {
      if (input.substr(peg$currPos, 6) === peg$c78) {
        s2 = peg$c78;
        peg$currPos += 6;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c79); }
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parse_();
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parseIdentifier();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parse___();
            if (s5 as any !== peg$FAILED) {
              if (input.substr(peg$currPos, 5) === peg$c80) {
                s6 = peg$c80;
                peg$currPos += 5;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c81); }
              }
              if (s6 as any !== peg$FAILED) {
                s7 = peg$parse_();
                if (s7 as any !== peg$FAILED) {
                  s8 = peg$parseIdentifier();
                  if (s8 as any === peg$FAILED) {
                    s8 = null;
                  }
                  if (s8 as any !== peg$FAILED) {
                    s9 = peg$parse___();
                    if (s9 as any !== peg$FAILED) {
                      s10 = peg$parseDescriptionShared();
                      if (s10 as any === peg$FAILED) {
                        s10 = null;
                      }
                      if (s10 as any !== peg$FAILED) {
                        s11 = peg$parse___();
                        if (s11 as any !== peg$FAILED) {
                          s12 = peg$parseSeparator();
                          if (s12 as any !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c82(s4, s8, s10);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRetVal(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseVarType();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c83(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }


    function extractList(list, index) {
      return list.map(function(element) { return element[index]; });
    }
    
    function buildList(head, tail, index) {
      return [head].concat(extractList(tail, index));
   }


  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

export interface IParseOptions {
  filename?: string;
  startRule?: string;
  tracer?: any;
  [key: string]: any;
}
export type ParseFunction = (input: string, options?: IParseOptions) => any;
export const parse: ParseFunction = peg$parse;

