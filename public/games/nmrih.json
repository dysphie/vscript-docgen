[
    {
        "kind": "enum",
        "id": "Hitgroup",
        "size": 9,
        "desc": "Hit groups from traces"
    },
    {
        "kind": "enum",
        "id": "IN",
        "size": 26,
        "desc": "Button mask bindings"
    },
    {
        "kind": "enum",
        "id": "MapLoad",
        "size": 4,
        "desc": "Map load enum for GetLoadType()"
    },
    {
        "kind": "enum",
        "id": "RenderMode",
        "size": 11,
        "desc": "Render modes used by Get/SetRenderMode"
    },
    {
        "kind": "enum",
        "id": "WeaponID",
        "size": 69,
        "desc": "Weapon IDs for all NMRiH weapons."
    },
    {
        "kind": "enum",
        "id": "WeaponSound",
        "size": 17,
        "desc": "Weapon sounds."
    },
    {
        "kind": "constant",
        "id": "AE_TYPE_CLIENT",
        "type": "int",
        "value": 16,
        "desc": "Animation event flag which indicates an event is supposed to be clientside only.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "AE_TYPE_FACEPOSER",
        "type": "int",
        "value": 32,
        "desc": "Animation event flag with an unknown purpose. Presumably related to Faceposer.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "AE_TYPE_NEWEVENTSYSTEM",
        "type": "int",
        "value": 1024,
        "desc": "Animation event flag which indicates an event is using the new system. This is often used by class-specific events from NPCs.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "AE_TYPE_SCRIPTED",
        "type": "int",
        "value": 2,
        "desc": "Animation event flag with an unknown purpose.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "AE_TYPE_SERVER",
        "type": "int",
        "value": 1,
        "desc": "Animation event flag which indicates an event is supposed to be serverside only.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "AE_TYPE_SHARED",
        "type": "int",
        "value": 4,
        "desc": "Animation event flag which indicates an event is supposed to be shared between the server and client.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "AE_TYPE_WEAPON",
        "type": "int",
        "value": 8,
        "desc": "Animation event flag which indicates an event is part of a weapon.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "AISS_AWAKE",
        "type": "int",
        "value": 0,
        "desc": "NPC is awake. (NPC sleep state used in Get/SetSleepState())",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "AISS_WAITING_FOR_INPUT",
        "type": "int",
        "value": 3,
        "desc": "NPC is asleep and will only awaken upon receiving the Wake input. (NPC sleep state used in Get/SetSleepState())",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "AISS_WAITING_FOR_PVS",
        "type": "int",
        "value": 2,
        "desc": "NPC is asleep and will awaken upon entering a player's PVS. (NPC sleep state used in Get/SetSleepState())",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "AISS_WAITING_FOR_THREAT",
        "type": "int",
        "value": 1,
        "desc": "NPC is asleep and will awaken upon seeing an enemy. (NPC sleep state used in Get/SetSleepState())",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "AI_SLEEP_FLAGS_NONE",
        "type": "int",
        "value": 0,
        "desc": "No sleep flags. (NPC sleep flag used in Add/Remove/HasSleepFlags())",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "AI_SLEEP_FLAG_AUTO_PVS",
        "type": "int",
        "value": 1,
        "desc": "Indicates a NPC will sleep upon exiting PVS. (NPC sleep flag used in Add/Remove/HasSleepFlags())",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "AI_SLEEP_FLAG_AUTO_PVS_AFTER_PVS",
        "type": "int",
        "value": 2,
        "desc": "Indicates a NPC will sleep upon exiting PVS after entering PVS for the first time(?????) (NPC sleep flag used in Add/Remove/HasSleepFlags())",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "ALL_CONTEXTS",
        "type": "int",
        "value": 1048576,
        "desc": "All sound contexts useable in QueryHearSound hooks, etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "ALL_SCENTS",
        "type": "int",
        "value": 224,
        "desc": "All \"scent\" sound types useable in QueryHearSound hooks, etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "ALL_SOUNDS",
        "type": "int",
        "value": 1048351,
        "desc": "All sound types useable in QueryHearSound hooks, etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "ALL_VISIBLE_CONTENTS",
        "type": "int",
        "value": 255,
        "desc": "Contains all visible spatial content flags.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "AUTOAIM_10DEGREES",
        "type": "float",
        "value": 0.173648,
        "desc": "10-degree autoaim cone.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "AUTOAIM_20DEGREES",
        "type": "float",
        "value": 0.349066,
        "desc": "20-degree autoaim cone.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "AUTOAIM_2DEGREES",
        "type": "float",
        "value": 0.034899,
        "desc": "2-degree autoaim cone.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "AUTOAIM_5DEGREES",
        "type": "float",
        "value": 0.087156,
        "desc": "5-degree autoaim cone.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "AUTOAIM_8DEGREES",
        "type": "float",
        "value": 0.139173,
        "desc": "8-degree autoaim cone.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "AUTOAIM_SCALE_DEFAULT",
        "type": "float",
        "value": 1,
        "desc": "Indicates default auto aim scale.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "AUTOAIM_SCALE_DIRECT_ONLY",
        "type": "float",
        "value": 0,
        "desc": "Indicates auto aim should not be used except for direct hits.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "CHAN_AUTO",
        "type": "int",
        "value": 0,
        "desc": "The default generic sound channel.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "CHAN_BODY",
        "type": "int",
        "value": 4,
        "desc": "The sound channel used for clothing, ragdoll impacts, footsteps, knocking/pounding/punching etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "CHAN_ITEM",
        "type": "int",
        "value": 3,
        "desc": "The sound channel used for generic physics impact sounds, health/suit chargers, +use sounds.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "CHAN_REPLACE",
        "type": "int",
        "value": 1,
        "desc": "The sound channel used when playing sounds through console commands.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "CHAN_STATIC",
        "type": "int",
        "value": 6,
        "desc": "The sound channel for constant/background sound that doesn't require any reaction.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "CHAN_STREAM",
        "type": "int",
        "value": 5,
        "desc": "The sound channel for sounds that can be delayed by an async load, i.e. aren't responses to particular events.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "CHAN_VOICE",
        "type": "int",
        "value": 2,
        "desc": "The sound channel used for dialogue, voice lines, etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "CHAN_VOICE2",
        "type": "int",
        "value": 7,
        "desc": "An additional sound channel for voices. Used in TF2 for the announcer.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "CHAN_VOICE_BASE",
        "type": "int",
        "value": 8,
        "desc": "The sound channel used for network voice data (online voice communications).",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "CHAN_WEAPON",
        "type": "int",
        "value": 1,
        "desc": "The sound channel for player and NPC weapons.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "CLASS_NONE",
        "type": "int",
        "value": 0,
        "desc": "No class.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "CLASS_PLAYER",
        "type": "int",
        "value": 1,
        "desc": "Used by players.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "CLASS_PLAYER_ALLY",
        "type": "int",
        "value": 2,
        "desc": "Used by player allies.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "CLIENT_DLL",
        "type": "int",
        "value": 0,
        "desc": null,
        "enum": null
    },
    {
        "kind": "constant",
        "id": "COLLISION_GROUP_BREAKABLE_GLASS",
        "type": "int",
        "value": 6,
        "desc": "Collision group used in GetCollisionGroup(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "COLLISION_GROUP_DEBRIS",
        "type": "int",
        "value": 1,
        "desc": "Collision group used in GetCollisionGroup(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "COLLISION_GROUP_DEBRIS_TRIGGER",
        "type": "int",
        "value": 2,
        "desc": "Collision group used in GetCollisionGroup(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "COLLISION_GROUP_DISSOLVING",
        "type": "int",
        "value": 25,
        "desc": "Collision group used in GetCollisionGroup(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "COLLISION_GROUP_DOOR_BLOCKER",
        "type": "int",
        "value": 23,
        "desc": "Collision group used in GetCollisionGroup(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "COLLISION_GROUP_INTERACTIVE",
        "type": "int",
        "value": 4,
        "desc": "Collision group used in GetCollisionGroup(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "COLLISION_GROUP_INTERACTIVE_DEBRIS",
        "type": "int",
        "value": 3,
        "desc": "Collision group used in GetCollisionGroup(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "COLLISION_GROUP_IN_VEHICLE",
        "type": "int",
        "value": 19,
        "desc": "Collision group used in GetCollisionGroup(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "COLLISION_GROUP_NONE",
        "type": "int",
        "value": 0,
        "desc": "Collision group used in GetCollisionGroup(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "COLLISION_GROUP_NPC",
        "type": "int",
        "value": 9,
        "desc": "Collision group used in GetCollisionGroup(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "COLLISION_GROUP_NPC_ACTOR",
        "type": "int",
        "value": 27,
        "desc": "Collision group used in GetCollisionGroup(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "COLLISION_GROUP_NPC_SCRIPTED",
        "type": "int",
        "value": 28,
        "desc": "Collision group used in GetCollisionGroup(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "COLLISION_GROUP_PASSABLE_DOOR",
        "type": "int",
        "value": 24,
        "desc": "Collision group used in GetCollisionGroup(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "COLLISION_GROUP_PLAYER",
        "type": "int",
        "value": 5,
        "desc": "Collision group used in GetCollisionGroup(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "COLLISION_GROUP_PLAYER_MOVEMENT",
        "type": "int",
        "value": 8,
        "desc": "Collision group used in GetCollisionGroup(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "COLLISION_GROUP_PROJECTILE",
        "type": "int",
        "value": 22,
        "desc": "Collision group used in GetCollisionGroup(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "COLLISION_GROUP_PUSHAWAY",
        "type": "int",
        "value": 26,
        "desc": "Collision group used in GetCollisionGroup(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "COLLISION_GROUP_VEHICLE",
        "type": "int",
        "value": 7,
        "desc": "Collision group used in GetCollisionGroup(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "COLLISION_GROUP_VEHICLE_CLIP",
        "type": "int",
        "value": 21,
        "desc": "Collision group used in GetCollisionGroup(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "COLLISION_GROUP_WEAPON",
        "type": "int",
        "value": 20,
        "desc": "Collision group used in GetCollisionGroup(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "CONTENTS_AREAPORTAL",
        "type": "int",
        "value": 32768,
        "desc": "Spatial content flags.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "CONTENTS_AUX",
        "type": "int",
        "value": 4,
        "desc": "Spatial content flags.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "CONTENTS_BLOCKLOS",
        "type": "int",
        "value": 64,
        "desc": "Spatial content flags.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "CONTENTS_CURRENT_0",
        "type": "int",
        "value": 262144,
        "desc": "Spatial content flags.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "CONTENTS_CURRENT_180",
        "type": "int",
        "value": 1048576,
        "desc": "Spatial content flags.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "CONTENTS_CURRENT_270",
        "type": "int",
        "value": 2097152,
        "desc": "Spatial content flags.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "CONTENTS_CURRENT_90",
        "type": "int",
        "value": 524288,
        "desc": "Spatial content flags.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "CONTENTS_CURRENT_DOWN",
        "type": "int",
        "value": 8388608,
        "desc": "Spatial content flags.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "CONTENTS_CURRENT_UP",
        "type": "int",
        "value": 4194304,
        "desc": "Spatial content flags.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "CONTENTS_DEBRIS",
        "type": "int",
        "value": 67108864,
        "desc": "Spatial content flags.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "CONTENTS_DETAIL",
        "type": "int",
        "value": 134217728,
        "desc": "Spatial content flags.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "CONTENTS_EMPTY",
        "type": "int",
        "value": 0,
        "desc": "Spatial content flags.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "CONTENTS_GRATE",
        "type": "int",
        "value": 8,
        "desc": "Spatial content flags.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "CONTENTS_HITBOX",
        "type": "int",
        "value": 1073741824,
        "desc": "Spatial content flags.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "CONTENTS_IGNORE_NODRAW_OPAQUE",
        "type": "int",
        "value": 8192,
        "desc": "Spatial content flags.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "CONTENTS_LADDER",
        "type": "int",
        "value": 536870912,
        "desc": "Spatial content flags.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "CONTENTS_MONSTER",
        "type": "int",
        "value": 33554432,
        "desc": "Spatial content flags.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "CONTENTS_MONSTERCLIP",
        "type": "int",
        "value": 131072,
        "desc": "Spatial content flags.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "CONTENTS_MOVEABLE",
        "type": "int",
        "value": 16384,
        "desc": "Spatial content flags.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "CONTENTS_OPAQUE",
        "type": "int",
        "value": 128,
        "desc": "Spatial content flags.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "CONTENTS_ORIGIN",
        "type": "int",
        "value": 16777216,
        "desc": "Spatial content flags.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "CONTENTS_PLAYERCLIP",
        "type": "int",
        "value": 65536,
        "desc": "Spatial content flags.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "CONTENTS_SLIME",
        "type": "int",
        "value": 16,
        "desc": "Spatial content flags.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "CONTENTS_SOLID",
        "type": "int",
        "value": 1,
        "desc": "Spatial content flags.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "CONTENTS_TEAM1",
        "type": "int",
        "value": 2048,
        "desc": "Spatial content flags.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "CONTENTS_TEAM2",
        "type": "int",
        "value": 4096,
        "desc": "Spatial content flags.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "CONTENTS_TESTFOGVOLUME",
        "type": "int",
        "value": 256,
        "desc": "Spatial content flags.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "CONTENTS_TRANSLUCENT",
        "type": "int",
        "value": 268435456,
        "desc": "Spatial content flags.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "CONTENTS_WATER",
        "type": "int",
        "value": 32,
        "desc": "Spatial content flags.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "CONTENTS_WINDOW",
        "type": "int",
        "value": 2,
        "desc": "Spatial content flags.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "DAMAGE_AIM",
        "type": "int",
        "value": 3,
        "desc": "(Use with GetTakeDamage/SetTakeDamage)",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "DAMAGE_EVENTS_ONLY",
        "type": "int",
        "value": 1,
        "desc": "Call damage functions, but don't modify health (Use with GetTakeDamage/SetTakeDamage)",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "DAMAGE_NO",
        "type": "int",
        "value": 0,
        "desc": "Don't take damage (Use with GetTakeDamage/SetTakeDamage)",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "DAMAGE_YES",
        "type": "int",
        "value": 2,
        "desc": "Allow damage to be taken (Use with GetTakeDamage/SetTakeDamage)",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "DEG2RAD",
        "type": "float",
        "value": 0.017453,
        "desc": null,
        "enum": null
    },
    {
        "kind": "constant",
        "id": "DMG_ACID",
        "type": "int",
        "value": 1048576,
        "desc": "Damage type used in damage information.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "DMG_AIRBOAT",
        "type": "int",
        "value": 33554432,
        "desc": "Damage type used in damage information.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "DMG_ALWAYSGIB",
        "type": "int",
        "value": 8192,
        "desc": "Damage type used in damage information.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "DMG_BLAST",
        "type": "int",
        "value": 64,
        "desc": "Damage type used in damage information.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "DMG_BLAST_SURFACE",
        "type": "int",
        "value": 134217728,
        "desc": "Damage type used in damage information.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "DMG_BUCKSHOT",
        "type": "int",
        "value": 536870912,
        "desc": "Damage type used in damage information.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "DMG_BULLET",
        "type": "int",
        "value": 2,
        "desc": "Damage type used in damage information.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "DMG_BURN",
        "type": "int",
        "value": 8,
        "desc": "Damage type used in damage information.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "DMG_CLUB",
        "type": "int",
        "value": 128,
        "desc": "Damage type used in damage information.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "DMG_CRUSH",
        "type": "int",
        "value": 1,
        "desc": "Damage type used in damage information.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "DMG_DIRECT",
        "type": "int",
        "value": 268435456,
        "desc": "Damage type used in damage information.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "DMG_DISSOLVE",
        "type": "int",
        "value": 67108864,
        "desc": "Damage type used in damage information.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "DMG_DROWN",
        "type": "int",
        "value": 16384,
        "desc": "Damage type used in damage information.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "DMG_DROWNRECOVER",
        "type": "int",
        "value": 524288,
        "desc": "Damage type used in damage information.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "DMG_ENERGYBEAM",
        "type": "int",
        "value": 1024,
        "desc": "Damage type used in damage information.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "DMG_FALL",
        "type": "int",
        "value": 32,
        "desc": "Damage type used in damage information.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "DMG_GENERIC",
        "type": "int",
        "value": 0,
        "desc": "Damage type used in damage information.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "DMG_NERVEGAS",
        "type": "int",
        "value": 65536,
        "desc": "Damage type used in damage information.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "DMG_NEVERGIB",
        "type": "int",
        "value": 4096,
        "desc": "Damage type used in damage information.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "DMG_PARALYZE",
        "type": "int",
        "value": 32768,
        "desc": "Damage type used in damage information.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "DMG_PHYSGUN",
        "type": "int",
        "value": 8388608,
        "desc": "Damage type used in damage information.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "DMG_PLASMA",
        "type": "int",
        "value": 16777216,
        "desc": "Damage type used in damage information.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "DMG_POISON",
        "type": "int",
        "value": 131072,
        "desc": "Damage type used in damage information.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "DMG_PREVENT_PHYSICS_FORCE",
        "type": "int",
        "value": 2048,
        "desc": "Damage type used in damage information.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "DMG_RADIATION",
        "type": "int",
        "value": 262144,
        "desc": "Damage type used in damage information.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "DMG_REMOVENORAGDOLL",
        "type": "int",
        "value": 4194304,
        "desc": "Damage type used in damage information.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "DMG_SHOCK",
        "type": "int",
        "value": 256,
        "desc": "Damage type used in damage information.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "DMG_SLASH",
        "type": "int",
        "value": 4,
        "desc": "Damage type used in damage information.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "DMG_SLOWBURN",
        "type": "int",
        "value": 2097152,
        "desc": "Damage type used in damage information.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "DMG_SONIC",
        "type": "int",
        "value": 512,
        "desc": "Damage type used in damage information.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "DMG_VEHICLE",
        "type": "int",
        "value": 16,
        "desc": "Damage type used in damage information.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "D_ER",
        "type": "int",
        "value": 0,
        "desc": "'Error' relationship definition. Used by NPCs and players for relationship disposition.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "D_FR",
        "type": "int",
        "value": 2,
        "desc": "Denotes a 'Fear' relationship. Used by NPCs and players for relationship disposition.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "D_HT",
        "type": "int",
        "value": 1,
        "desc": "Denotes a 'Hate' relationship. Used by NPCs and players for relationship disposition.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "D_LI",
        "type": "int",
        "value": 3,
        "desc": "Denotes a 'Like' relationship. Used by NPCs and players for relationship disposition.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "D_NU",
        "type": "int",
        "value": 4,
        "desc": "Denotes a 'Neutral' relationship. Used by NPCs and players for relationship disposition.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "EFL_BOT_FROZEN",
        "type": "int",
        "value": 256,
        "desc": "Entity flag used in GetEFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "EFL_CHECK_UNTOUCH",
        "type": "int",
        "value": 16777216,
        "desc": "Entity flag used in GetEFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "EFL_DIRTY_ABSANGVELOCITY",
        "type": "int",
        "value": 8192,
        "desc": "Entity flag used in GetEFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "EFL_DIRTY_ABSTRANSFORM",
        "type": "int",
        "value": 2048,
        "desc": "Entity flag used in GetEFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "EFL_DIRTY_ABSVELOCITY",
        "type": "int",
        "value": 4096,
        "desc": "Entity flag used in GetEFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "EFL_DIRTY_SHADOWUPDATE",
        "type": "int",
        "value": 32,
        "desc": "Entity flag used in GetEFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "EFL_DIRTY_SPATIAL_PARTITION",
        "type": "int",
        "value": 32768,
        "desc": "Entity flag used in GetEFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "EFL_DIRTY_SURROUNDING_COLLISION_BOUNDS",
        "type": "int",
        "value": 16384,
        "desc": "Entity flag used in GetEFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "EFL_DONTBLOCKLOS",
        "type": "int",
        "value": 33554432,
        "desc": "Entity flag used in GetEFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "EFL_DONTWALKON",
        "type": "int",
        "value": 67108864,
        "desc": "Entity flag used in GetEFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "EFL_DORMANT",
        "type": "int",
        "value": 2,
        "desc": "Entity flag used in GetEFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "EFL_FORCE_CHECK_TRANSMIT",
        "type": "int",
        "value": 128,
        "desc": "Entity flag used in GetEFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "EFL_HAS_PLAYER_CHILD",
        "type": "int",
        "value": 16,
        "desc": "Entity flag used in GetEFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "EFL_IN_SKYBOX",
        "type": "int",
        "value": 131072,
        "desc": "Entity flag used in GetEFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "EFL_IS_BEING_LIFTED_BY_BARNACLE",
        "type": "int",
        "value": 1048576,
        "desc": "Entity flag used in GetEFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "EFL_KEEP_ON_RECREATE_ENTITIES",
        "type": "int",
        "value": 16,
        "desc": "Entity flag used in GetEFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "EFL_KILLME",
        "type": "int",
        "value": 1,
        "desc": "Entity flag used in GetEFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "EFL_NOCLIP_ACTIVE",
        "type": "int",
        "value": 4,
        "desc": "Entity flag used in GetEFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "EFL_NOTIFY",
        "type": "int",
        "value": 64,
        "desc": "Entity flag used in GetEFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "EFL_NO_AUTO_EDICT_ATTACH",
        "type": "int",
        "value": 1024,
        "desc": "Entity flag used in GetEFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "EFL_NO_DAMAGE_FORCES",
        "type": "int",
        "value": 2147483648,
        "desc": "Entity flag used in GetEFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "EFL_NO_DISSOLVE",
        "type": "int",
        "value": 134217728,
        "desc": "Entity flag used in GetEFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "EFL_NO_GAME_PHYSICS_SIMULATION",
        "type": "int",
        "value": 8388608,
        "desc": "Entity flag used in GetEFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "EFL_NO_MEGAPHYSCANNON_RAGDOLL",
        "type": "int",
        "value": 268435456,
        "desc": "Entity flag used in GetEFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "EFL_NO_PHYSCANNON_INTERACTION",
        "type": "int",
        "value": 1073741824,
        "desc": "Entity flag used in GetEFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "EFL_NO_ROTORWASH_PUSH",
        "type": "int",
        "value": 2097152,
        "desc": "Entity flag used in GetEFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "EFL_NO_THINK_FUNCTION",
        "type": "int",
        "value": 4194304,
        "desc": "Entity flag used in GetEFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "EFL_NO_WATER_VELOCITY_CHANGE",
        "type": "int",
        "value": 536870912,
        "desc": "Entity flag used in GetEFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "EFL_SERVER_ONLY",
        "type": "int",
        "value": 512,
        "desc": "Entity flag used in GetEFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "EFL_SETTING_UP_BONES",
        "type": "int",
        "value": 8,
        "desc": "Entity flag used in GetEFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "EFL_TOUCHING_FLUID",
        "type": "int",
        "value": 524288,
        "desc": "Entity flag used in GetEFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "EFL_USE_PARTITION_WHEN_NOT_SOLID",
        "type": "int",
        "value": 262144,
        "desc": "Entity flag used in GetEFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "EF_BONEMERGE",
        "type": "int",
        "value": 1,
        "desc": "Effect flag used in GetEffects(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "EF_BONEMERGE_FASTCULL",
        "type": "int",
        "value": 128,
        "desc": "Effect flag used in GetEffects(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "EF_BRIGHTLIGHT",
        "type": "int",
        "value": 2,
        "desc": "Effect flag used in GetEffects(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "EF_DIMLIGHT",
        "type": "int",
        "value": 4,
        "desc": "Effect flag used in GetEffects(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "EF_ITEM_BLINK",
        "type": "int",
        "value": 256,
        "desc": "Effect flag used in GetEffects(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "EF_NODRAW",
        "type": "int",
        "value": 32,
        "desc": "Effect flag used in GetEffects(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "EF_NOINTERP",
        "type": "int",
        "value": 8,
        "desc": "Effect flag used in GetEffects(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "EF_NORECEIVESHADOW",
        "type": "int",
        "value": 64,
        "desc": "Effect flag used in GetEffects(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "EF_NOSHADOW",
        "type": "int",
        "value": 16,
        "desc": "Effect flag used in GetEffects(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "EF_PARENT_ANIMATES",
        "type": "int",
        "value": 512,
        "desc": "Effect flag used in GetEffects(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "FCVAR_ACCESSIBLE_FROM_THREADS",
        "type": "int",
        "value": 33554432,
        "desc": "If this convar flag is set, it will be accessible from the material system thread.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "FCVAR_ARCHIVE",
        "type": "int",
        "value": 128,
        "desc": "If this convar flag is set, its value will be saved when the game is exited.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "FCVAR_ARCHIVE_XBOX",
        "type": "int",
        "value": 16777216,
        "desc": "If this convar flag is set, it will be archived on the Xbox config.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "FCVAR_CLIENTCMD_CAN_EXECUTE",
        "type": "int",
        "value": 1073741824,
        "desc": "If this convar flag is set, any client will be allowed to execute this command.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "FCVAR_CLIENTDLL",
        "type": "int",
        "value": 8,
        "desc": "This convar flag is defined in client DLL convars.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "FCVAR_DEMO",
        "type": "int",
        "value": 65536,
        "desc": "If this convar flag is set, it will be recorded when starting a demo file.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "FCVAR_DEVELOPMENTONLY",
        "type": "int",
        "value": 2,
        "desc": "If this convar flag is set, it's hidden in \"retail\" DLLs.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "FCVAR_DONTRECORD",
        "type": "int",
        "value": 131072,
        "desc": "If this convar flag is set, it will NOT be recorded when starting a demo file.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "FCVAR_GAMEDLL",
        "type": "int",
        "value": 4,
        "desc": "This convar flag is defined in server DLL convars.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "FCVAR_HIDDEN",
        "type": "int",
        "value": 16,
        "desc": "If this convar flag is set, it doesn't appear in the console or any searching tools, but it can still be set.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "FCVAR_MATERIAL_SYSTEM_THREAD",
        "type": "int",
        "value": 8388608,
        "desc": "This convar flag indicates it's read from the material system thread.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "FCVAR_NEVER_AS_STRING",
        "type": "int",
        "value": 4096,
        "desc": "If this convar flag is set, it will never be printed as a string.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "FCVAR_NONE",
        "type": "int",
        "value": 0,
        "desc": "Empty convar flag.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "FCVAR_NOTIFY",
        "type": "int",
        "value": 256,
        "desc": "If this convar flag is set, it will notify players when it is changed.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "FCVAR_NOT_CONNECTED",
        "type": "int",
        "value": 4194304,
        "desc": "If this convar flag is set, it cannot be changed by a client connected to the server.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "FCVAR_PRINTABLEONLY",
        "type": "int",
        "value": 1024,
        "desc": "If this convar flag is set, it cannot contain unprintable characters. Used for player name cvars, etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "FCVAR_PROTECTED",
        "type": "int",
        "value": 32,
        "desc": "This convar flag prevents convars with secure data (e.g. passwords) from sending full data to clients, only sending 1 if non-zero and 0 otherwise.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "FCVAR_RELOAD_MATERIALS",
        "type": "int",
        "value": 1048576,
        "desc": "If this convar flag is set, it will force a material reload when it changes.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "FCVAR_RELOAD_TEXTURES",
        "type": "int",
        "value": 2097152,
        "desc": "If this convar flag is set, it will force a texture reload when it changes.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "FCVAR_REPLICATED",
        "type": "int",
        "value": 8192,
        "desc": "If this convar flag is set, it will enforce a serverside value on any clientside counterparts. (also known as FCAR_SERVER)",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "FCVAR_SERVER_CANNOT_QUERY",
        "type": "int",
        "value": 536870912,
        "desc": "If this convar flag is set, the server will not be allowed to query its value.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "FCVAR_SERVER_CAN_EXECUTE",
        "type": "int",
        "value": 268435456,
        "desc": "If this convar flag is set, the server will be allowed to execute it as a client command.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "FCVAR_SPONLY",
        "type": "int",
        "value": 64,
        "desc": "If this convar flag is set, it can't be changed by clients connected to a multiplayer server.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "FCVAR_UNLOGGED",
        "type": "int",
        "value": 2048,
        "desc": "If this convar flag is set, it will not log its changes if a log is being created.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "FCVAR_UNREGISTERED",
        "type": "int",
        "value": 1,
        "desc": "If this convar flag is set, it isn't added to linked list, etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "FCVAR_USERINFO",
        "type": "int",
        "value": 512,
        "desc": "If this convar flag is set, it will be marked as info which plays a part in how the server identifies a client.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "FL_AIMTARGET",
        "type": "int",
        "value": 131072,
        "desc": "Flag used in GetFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "FL_ATCONTROLS",
        "type": "int",
        "value": 128,
        "desc": "Flag used in GetFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "FL_BASEVELOCITY",
        "type": "int",
        "value": 16777216,
        "desc": "Flag used in GetFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "FL_CLIENT",
        "type": "int",
        "value": 256,
        "desc": "Flag used in GetFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "FL_CONVEYOR",
        "type": "int",
        "value": 8192,
        "desc": "Flag used in GetFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "FL_DISSOLVING",
        "type": "int",
        "value": 536870912,
        "desc": "Flag used in GetFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "FL_DONTTOUCH",
        "type": "int",
        "value": 8388608,
        "desc": "Flag used in GetFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "FL_DUCKING",
        "type": "int",
        "value": 2,
        "desc": "Flag used in GetFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "FL_FAKECLIENT",
        "type": "int",
        "value": 512,
        "desc": "Flag used in GetFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "FL_FLY",
        "type": "int",
        "value": 2048,
        "desc": "Flag used in GetFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "FL_FROZEN",
        "type": "int",
        "value": 64,
        "desc": "Flag used in GetFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "FL_GODMODE",
        "type": "int",
        "value": 32768,
        "desc": "Flag used in GetFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "FL_GRAPHED",
        "type": "int",
        "value": 1048576,
        "desc": "Flag used in GetFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "FL_GRENADE",
        "type": "int",
        "value": 2097152,
        "desc": "Flag used in GetFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "FL_INRAIN",
        "type": "int",
        "value": 32,
        "desc": "Flag used in GetFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "FL_INWATER",
        "type": "int",
        "value": 1024,
        "desc": "Flag used in GetFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "FL_KILLME",
        "type": "int",
        "value": 134217728,
        "desc": "Flag used in GetFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "FL_NOTARGET",
        "type": "int",
        "value": 65536,
        "desc": "Flag used in GetFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "FL_NPC",
        "type": "int",
        "value": 16384,
        "desc": "Flag used in GetFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "FL_OBJECT",
        "type": "int",
        "value": 67108864,
        "desc": "Flag used in GetFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "FL_ONFIRE",
        "type": "int",
        "value": 268435456,
        "desc": "Flag used in GetFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "FL_ONGROUND",
        "type": "int",
        "value": 1,
        "desc": "Flag used in GetFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "FL_ONTRAIN",
        "type": "int",
        "value": 16,
        "desc": "Flag used in GetFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "FL_PARTIALGROUND",
        "type": "int",
        "value": 262144,
        "desc": "Flag used in GetFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "FL_STATICPROP",
        "type": "int",
        "value": 524288,
        "desc": "Flag used in GetFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "FL_STEPMOVEMENT",
        "type": "int",
        "value": 4194304,
        "desc": "Flag used in GetFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "FL_SWIM",
        "type": "int",
        "value": 4096,
        "desc": "Flag used in GetFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "FL_TRANSRAGDOLL",
        "type": "int",
        "value": 1073741824,
        "desc": "Flag used in GetFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "FL_UNBLOCKABLE_BY_PLAYER",
        "type": "int",
        "value": 2147483648,
        "desc": "Flag used in GetFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "FL_WATERJUMP",
        "type": "int",
        "value": 8,
        "desc": "Flag used in GetFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "FL_WORLDBRUSH",
        "type": "int",
        "value": 33554432,
        "desc": "Flag used in GetFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "FSOLID_CUSTOMBOXTEST",
        "type": "int",
        "value": 2,
        "desc": "Solid flag used in GetSolidFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "FSOLID_CUSTOMRAYTEST",
        "type": "int",
        "value": 1,
        "desc": "Solid flag used in GetSolidFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "FSOLID_FORCE_WORLD_ALIGNED",
        "type": "int",
        "value": 64,
        "desc": "Solid flag used in GetSolidFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "FSOLID_NOT_SOLID",
        "type": "int",
        "value": 4,
        "desc": "Solid flag used in GetSolidFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "FSOLID_NOT_STANDABLE",
        "type": "int",
        "value": 16,
        "desc": "Solid flag used in GetSolidFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "FSOLID_ROOT_PARENT_ALIGNED",
        "type": "int",
        "value": 256,
        "desc": "Solid flag used in GetSolidFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "FSOLID_TRIGGER",
        "type": "int",
        "value": 8,
        "desc": "Solid flag used in GetSolidFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "FSOLID_TRIGGER_TOUCH_DEBRIS",
        "type": "int",
        "value": 512,
        "desc": "Solid flag used in GetSolidFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "FSOLID_USE_TRIGGER_BOUNDS",
        "type": "int",
        "value": 128,
        "desc": "Solid flag used in GetSolidFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "FSOLID_VOLUME_CONTENTS",
        "type": "int",
        "value": 32,
        "desc": "Solid flag used in GetSolidFlags(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "GENDER_FEMALE",
        "type": "int",
        "value": 2,
        "desc": "A standard value used to represent female gender. Usually used for sounds.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "GENDER_MALE",
        "type": "int",
        "value": 1,
        "desc": "A standard value used to represent male gender. Usually used for sounds.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "GENDER_NONE",
        "type": "int",
        "value": 0,
        "desc": "A standard value used to represent no specific gender. Usually used for sounds.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "GLOBAL_DEAD",
        "type": "int",
        "value": 2,
        "desc": "Global state used by the Globals singleton.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "GLOBAL_OFF",
        "type": "int",
        "value": 0,
        "desc": "Global state used by the Globals singleton.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "GLOBAL_ON",
        "type": "int",
        "value": 1,
        "desc": "Global state used by the Globals singleton.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "Chest",
        "type": "int",
        "value": 2,
        "desc": null,
        "enum": [
            "Hitgroup",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "Gear",
        "type": "int",
        "value": 10,
        "desc": null,
        "enum": [
            "Hitgroup",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "Generic",
        "type": "int",
        "value": 0,
        "desc": null,
        "enum": [
            "Hitgroup",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "Head",
        "type": "int",
        "value": 1,
        "desc": null,
        "enum": [
            "Hitgroup",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "LeftArm",
        "type": "int",
        "value": 4,
        "desc": null,
        "enum": [
            "Hitgroup",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "LeftLeg",
        "type": "int",
        "value": 6,
        "desc": null,
        "enum": [
            "Hitgroup",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "RightArm",
        "type": "int",
        "value": 5,
        "desc": null,
        "enum": [
            "Hitgroup",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "RightLeg",
        "type": "int",
        "value": 7,
        "desc": null,
        "enum": [
            "Hitgroup",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "Stomach",
        "type": "int",
        "value": 3,
        "desc": null,
        "enum": [
            "Hitgroup",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "ALT1",
        "type": "int",
        "value": 16384,
        "desc": "Button for +alt1",
        "enum": [
            "IN",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "ALT2",
        "type": "int",
        "value": 32768,
        "desc": "Button for +alt2",
        "enum": [
            "IN",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "ATTACK",
        "type": "int",
        "value": 1,
        "desc": "Button for +attack",
        "enum": [
            "IN",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "ATTACK2",
        "type": "int",
        "value": 2048,
        "desc": "Button for +attack2",
        "enum": [
            "IN",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "ATTACK3",
        "type": "int",
        "value": 33554432,
        "desc": "Button for +attack3",
        "enum": [
            "IN",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "BACK",
        "type": "int",
        "value": 16,
        "desc": "Button for +back",
        "enum": [
            "IN",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "BULLRUSH",
        "type": "int",
        "value": 4194304,
        "desc": "Unused button",
        "enum": [
            "IN",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "CANCEL",
        "type": "int",
        "value": 64,
        "desc": "Special button flag for attack cancel",
        "enum": [
            "IN",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "DUCK",
        "type": "int",
        "value": 4,
        "desc": "Button for +duck",
        "enum": [
            "IN",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "FORWARD",
        "type": "int",
        "value": 8,
        "desc": "Button for +forward",
        "enum": [
            "IN",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "GRENADE1",
        "type": "int",
        "value": 8388608,
        "desc": "Button for +grenade1",
        "enum": [
            "IN",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "GRENADE2",
        "type": "int",
        "value": 16777216,
        "desc": "Button for +grenade2",
        "enum": [
            "IN",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "JUMP",
        "type": "int",
        "value": 2,
        "desc": "Button for +jump",
        "enum": [
            "IN",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "LEFT",
        "type": "int",
        "value": 128,
        "desc": "Button for +left",
        "enum": [
            "IN",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "MOVELEFT",
        "type": "int",
        "value": 512,
        "desc": "Button for +moveleft",
        "enum": [
            "IN",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "MOVERIGHT",
        "type": "int",
        "value": 1024,
        "desc": "Button for +moveright",
        "enum": [
            "IN",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "RELOAD",
        "type": "int",
        "value": 8192,
        "desc": "Button for +reload",
        "enum": [
            "IN",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "RIGHT",
        "type": "int",
        "value": 256,
        "desc": "Button for +right",
        "enum": [
            "IN",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "RUN",
        "type": "int",
        "value": 4096,
        "desc": "Unused button (see IN.SPEED for sprint)",
        "enum": [
            "IN",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "SCORE",
        "type": "int",
        "value": 65536,
        "desc": "Button for +score",
        "enum": [
            "IN",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "SPEED",
        "type": "int",
        "value": 131072,
        "desc": "Button for +speed",
        "enum": [
            "IN",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "USE",
        "type": "int",
        "value": 32,
        "desc": "Button for +use",
        "enum": [
            "IN",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "WALK",
        "type": "int",
        "value": 262144,
        "desc": "Button for +walk",
        "enum": [
            "IN",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "WEAPON1",
        "type": "int",
        "value": 1048576,
        "desc": "Special button used by weapons themselves",
        "enum": [
            "IN",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "WEAPON2",
        "type": "int",
        "value": 2097152,
        "desc": "Special button used by weapons themselves",
        "enum": [
            "IN",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "ZOOM",
        "type": "int",
        "value": 524288,
        "desc": "Button for +zoom",
        "enum": [
            "IN",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "LAST_VISIBLE_CONTENTS",
        "type": "int",
        "value": 128,
        "desc": "Contains last visible spatial content flags.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "MASK_BLOCKLOS",
        "type": "int",
        "value": 16449,
        "desc": "Spatial content mask representing objects which block LOS for AI (CONTENTS_SOLID|CONTENTS_MOVEABLE|CONTENTS_BLOCKLOS)",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "MASK_BLOCKLOS_AND_NPCS",
        "type": "int",
        "value": 33570881,
        "desc": "Spatial content mask equivalent to MASK_BLOCKLOS, but also including NPCs (MASK_BLOCKLOS|CONTENTS_MONSTER)",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "MASK_NPCSOLID",
        "type": "int",
        "value": 33701899,
        "desc": "Spatial content mask representing objects solid to NPCs, including NPC clips (CONTENTS_SOLID|CONTENTS_MOVEABLE|CONTENTS_MONSTERCLIP|CONTENTS_WINDOW|CONTENTS_MONSTER|CONTENTS_GRATE)",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "MASK_NPCSOLID_BRUSHONLY",
        "type": "int",
        "value": 147467,
        "desc": "Spatial content mask equivalent to MASK_NPCSOLID, but without NPCs (CONTENTS_SOLID|CONTENTS_MOVEABLE|CONTENTS_WINDOW|CONTENTS_MONSTERCLIP|CONTENTS_GRATE)",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "MASK_NPCWORLDSTATIC",
        "type": "int",
        "value": 131083,
        "desc": "Spatial content mask representing objects static to NPCs, used for nodegraph rebuilding (CONTENTS_SOLID|CONTENTS_WINDOW|CONTENTS_MONSTERCLIP|CONTENTS_GRATE)",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "MASK_OPAQUE",
        "type": "int",
        "value": 16513,
        "desc": "Spatial content mask representing objects which block lighting (CONTENTS_SOLID|CONTENTS_MOVEABLE|CONTENTS_OPAQUE)",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "MASK_OPAQUE_AND_NPCS",
        "type": "int",
        "value": 33570945,
        "desc": "Spatial content mask equivalent to MASK_OPAQUE, but also including NPCs (MASK_OPAQUE|CONTENTS_MONSTER)",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "MASK_PLAYERSOLID",
        "type": "int",
        "value": 33636363,
        "desc": "Spatial content mask representing objects solid to the player, including player clips (CONTENTS_SOLID|CONTENTS_MOVEABLE|CONTENTS_PLAYERCLIP|CONTENTS_WINDOW|CONTENTS_MONSTER|CONTENTS_GRATE)",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "MASK_PLAYERSOLID_BRUSHONLY",
        "type": "int",
        "value": 81931,
        "desc": "Spatial content mask equivalent to MASK_PLAYERSOLID, but without NPCs (CONTENTS_SOLID|CONTENTS_MOVEABLE|CONTENTS_WINDOW|CONTENTS_PLAYERCLIP|CONTENTS_GRATE)",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "MASK_SHOT",
        "type": "int",
        "value": 1174421507,
        "desc": "Spatial content mask representing objects solid to bullets (CONTENTS_SOLID|CONTENTS_MOVEABLE|CONTENTS_MONSTER|CONTENTS_WINDOW|CONTENTS_DEBRIS|CONTENTS_HITBOX)",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "MASK_SHOT_HULL",
        "type": "int",
        "value": 100679691,
        "desc": "Spatial content mask representing objects solid to non-raycasted weapons, including grates (CONTENTS_SOLID|CONTENTS_MOVEABLE|CONTENTS_MONSTER|CONTENTS_WINDOW|CONTENTS_DEBRIS|CONTENTS_GRATE)",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "MASK_SHOT_PORTAL",
        "type": "int",
        "value": 33570819,
        "desc": "Spatial content mask equivalent to MASK_SHOT, but excluding debris and not using expensive hitbox calculations (CONTENTS_SOLID|CONTENTS_MOVEABLE|CONTENTS_WINDOW|CONTENTS_MONSTER)",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "MASK_SOLID",
        "type": "int",
        "value": 33570827,
        "desc": "Spatial content mask representing solid objects (CONTENTS_SOLID|CONTENTS_MOVEABLE|CONTENTS_WINDOW|CONTENTS_MONSTER|CONTENTS_GRATE)",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "MASK_SOLID_BRUSHONLY",
        "type": "int",
        "value": 16395,
        "desc": "Spatial content mask equivalent to MASK_SOLID, but without NPCs (CONTENTS_SOLID|CONTENTS_MOVEABLE|CONTENTS_WINDOW|CONTENTS_GRATE)",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "MASK_SPLITAREAPORTAL",
        "type": "int",
        "value": 48,
        "desc": "Spatial content mask representing objects which can split areaportals (CONTENTS_WATER|CONTENTS_SLIME)",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "MASK_VISIBLE",
        "type": "int",
        "value": 24705,
        "desc": "Spatial content mask representing objects which block LOS for players (MASK_OPAQUE|CONTENTS_IGNORE_NODRAW_OPAQUE)",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "MASK_VISIBLE_AND_NPCS",
        "type": "int",
        "value": 33579137,
        "desc": "Spatial content mask equivalent to MASK_VISIBLE, but also including NPCs (MASK_OPAQUE_AND_NPCS|CONTENTS_IGNORE_NODRAW_OPAQUE)",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "MASK_WATER",
        "type": "int",
        "value": 16432,
        "desc": "Spatial content mask representing water and slime solids (CONTENTS_WATER|CONTENTS_MOVEABLE|CONTENTS_SLIME)",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "MAX_COORD_FLOAT",
        "type": "float",
        "value": 16384,
        "desc": "Maximum float coordinate.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "MAX_PLAYERS",
        "type": "int",
        "value": 9,
        "desc": "Max number of players in a game.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "MAX_TRACE_LENGTH",
        "type": "float",
        "value": 56755.839844,
        "desc": "Maximum traceable distance (assumes cubic world and trace from one corner to opposite).",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "MOVETYPE_CUSTOM",
        "type": "int",
        "value": 11,
        "desc": "Move type used in GetMoveType(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "MOVETYPE_FLY",
        "type": "int",
        "value": 4,
        "desc": "Move type used in GetMoveType(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "MOVETYPE_FLYGRAVITY",
        "type": "int",
        "value": 5,
        "desc": "Move type used in GetMoveType(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "MOVETYPE_ISOMETRIC",
        "type": "int",
        "value": 1,
        "desc": "Move type used in GetMoveType(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "MOVETYPE_LADDER",
        "type": "int",
        "value": 9,
        "desc": "Move type used in GetMoveType(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "MOVETYPE_NOCLIP",
        "type": "int",
        "value": 8,
        "desc": "Move type used in GetMoveType(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "MOVETYPE_NONE",
        "type": "int",
        "value": 0,
        "desc": "Move type used in GetMoveType(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "MOVETYPE_OBSERVER",
        "type": "int",
        "value": 10,
        "desc": "Move type used in GetMoveType(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "MOVETYPE_PUSH",
        "type": "int",
        "value": 7,
        "desc": "Move type used in GetMoveType(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "MOVETYPE_STEP",
        "type": "int",
        "value": 3,
        "desc": "Move type used in GetMoveType(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "MOVETYPE_VPHYSICS",
        "type": "int",
        "value": 6,
        "desc": "Move type used in GetMoveType(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "MOVETYPE_WALK",
        "type": "int",
        "value": 2,
        "desc": "Move type used in GetMoveType(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "Background",
        "type": "int",
        "value": 3,
        "desc": "Map was loaded as a background map",
        "enum": [
            "MapLoad",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "LoadGame",
        "type": "int",
        "value": 1,
        "desc": "Map was loaded from a save file",
        "enum": [
            "MapLoad",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "NewGame",
        "type": "int",
        "value": 0,
        "desc": "Map was loaded from a new game",
        "enum": [
            "MapLoad",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "Transition",
        "type": "int",
        "value": 2,
        "desc": "Map was loaded from a level transition",
        "enum": [
            "MapLoad",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "NPC_STATE_ALERT",
        "type": "int",
        "value": 2,
        "desc": "NPC state type used in GetNPCState(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "NPC_STATE_COMBAT",
        "type": "int",
        "value": 3,
        "desc": "NPC state type used in GetNPCState(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "NPC_STATE_DEAD",
        "type": "int",
        "value": 7,
        "desc": "NPC state type used in GetNPCState(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "NPC_STATE_IDLE",
        "type": "int",
        "value": 1,
        "desc": "NPC state type used in GetNPCState(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "NPC_STATE_INVALID",
        "type": "int",
        "value": 1,
        "desc": "NPC state type used in GetNPCState(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "NPC_STATE_NONE",
        "type": "int",
        "value": 0,
        "desc": "NPC state type used in GetNPCState(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "NPC_STATE_PLAYDEAD",
        "type": "int",
        "value": 5,
        "desc": "NPC state type used in GetNPCState(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "NPC_STATE_PRONE",
        "type": "int",
        "value": 6,
        "desc": "When in clutches of barnacle (NPC state type used in GetNPCState(), etc.)",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "NPC_STATE_SCRIPT",
        "type": "int",
        "value": 4,
        "desc": "NPC state type used in GetNPCState(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "NUM_AI_CLASSES",
        "type": "int",
        "value": 9,
        "desc": "Number of AI classes.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "PITCH_HIGH",
        "type": "int",
        "value": 120,
        "desc": "The standard high pitch value.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "PITCH_LOW",
        "type": "int",
        "value": 95,
        "desc": "The standard low pitch value.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "PITCH_NORM",
        "type": "int",
        "value": 100,
        "desc": "The standard pitch value.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "RAD2DEG",
        "type": "float",
        "value": 57.29578,
        "desc": null,
        "enum": null
    },
    {
        "kind": "constant",
        "id": "ROPE_BARBED",
        "type": "int",
        "value": 2,
        "desc": "Hack option to draw like a barbed wire. (for use in rope flags)",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "ROPE_BREAKABLE",
        "type": "int",
        "value": 16,
        "desc": "Can the endpoints detach? (for use in rope flags)",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "ROPE_COLLIDE",
        "type": "int",
        "value": 4,
        "desc": "Collide with the world. (for use in rope flags)",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "ROPE_GRAVITY",
        "type": "Vector",
        "value": "Vector( 9510798229504.000000, 0.000000, 8581046861824.000000 )",
        "desc": "Default rope gravity vector.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "ROPE_INITIAL_HANG",
        "type": "int",
        "value": 64,
        "desc": "By default, ropes will simulate for a bit internally when they are created so they sag, but dynamically created ropes for things like harpoons don't want this. (for use in rope flags)",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "ROPE_NO_GRAVITY",
        "type": "int",
        "value": 256,
        "desc": "Disable gravity on this rope. (for use in rope flags)",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "ROPE_NUMFLAGS",
        "type": "int",
        "value": 9,
        "desc": "The number of rope flags recognized by the game.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "ROPE_PLAYER_WPN_ATTACH",
        "type": "int",
        "value": 128,
        "desc": "If this flag is set, then the second attachment must be a player. The rope will attach to \"buff_attach\" on the player's active weapon. This is a flag because it requires special code on the client to find the weapon. (for use in rope flags)",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "ROPE_RESIZE",
        "type": "int",
        "value": 1,
        "desc": "Try to keep the rope dangling the same amount even as the rope length changes. (for use in rope flags)",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "ROPE_SIMULATE",
        "type": "int",
        "value": 8,
        "desc": "Is the rope valid? (for use in rope flags)",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "Additive",
        "type": "int",
        "value": 5,
        "desc": null,
        "enum": [
            "RenderMode",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "AdditiveFractionalFrame",
        "type": "int",
        "value": 7,
        "desc": null,
        "enum": [
            "RenderMode",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "AlphaAdd",
        "type": "int",
        "value": 8,
        "desc": null,
        "enum": [
            "RenderMode",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "Color",
        "type": "int",
        "value": 1,
        "desc": null,
        "enum": [
            "RenderMode",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "Environmental",
        "type": "int",
        "value": 6,
        "desc": null,
        "enum": [
            "RenderMode",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "Glow",
        "type": "int",
        "value": 3,
        "desc": null,
        "enum": [
            "RenderMode",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "None",
        "type": "int",
        "value": 10,
        "desc": null,
        "enum": [
            "RenderMode",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "Normal",
        "type": "int",
        "value": 0,
        "desc": null,
        "enum": [
            "RenderMode",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "Solid",
        "type": "int",
        "value": 4,
        "desc": null,
        "enum": [
            "RenderMode",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "Texture",
        "type": "int",
        "value": 2,
        "desc": null,
        "enum": [
            "RenderMode",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "WorldSpaceGlow",
        "type": "int",
        "value": 9,
        "desc": null,
        "enum": [
            "RenderMode",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "SCRIPT_CLEANUP",
        "type": "int",
        "value": 3,
        "desc": "Cancelling the script / cleaning up.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SCRIPT_PLAYING",
        "type": "int",
        "value": 0,
        "desc": "Moving to the scripted sequence position while playing a custom movement animation.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SCRIPT_POST_IDLE",
        "type": "int",
        "value": 2,
        "desc": "Playing the post idle animation after playing the action animation.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SCRIPT_RUN_TO_MARK",
        "type": "int",
        "value": 5,
        "desc": "Running to the scripted sequence position.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SCRIPT_WAIT",
        "type": "int",
        "value": 1,
        "desc": "Waiting on everyone in the script to be ready. Plays the pre idle animation if there is one.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SCRIPT_WALK_TO_MARK",
        "type": "int",
        "value": 4,
        "desc": "Walking to the scripted sequence position.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SERVER_DLL",
        "type": "int",
        "value": 1,
        "desc": null,
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SNDLVL_100dB",
        "type": "int",
        "value": 100,
        "desc": "A standard value used for a sound's sound level.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SNDLVL_105dB",
        "type": "int",
        "value": 105,
        "desc": "A standard value used for a sound's sound level.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SNDLVL_110dB",
        "type": "int",
        "value": 110,
        "desc": "A standard value used for a sound's sound level.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SNDLVL_120dB",
        "type": "int",
        "value": 120,
        "desc": "A standard value used for a sound's sound level.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SNDLVL_130dB",
        "type": "int",
        "value": 130,
        "desc": "A standard value used for a sound's sound level.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SNDLVL_140dB",
        "type": "int",
        "value": 140,
        "desc": "A standard value used for a sound's sound level.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SNDLVL_150dB",
        "type": "int",
        "value": 150,
        "desc": "A standard value used for a sound's sound level.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SNDLVL_180dB",
        "type": "int",
        "value": 180,
        "desc": "A standard value used for a sound's sound level.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SNDLVL_20dB",
        "type": "int",
        "value": 20,
        "desc": "A standard value used for a sound's sound level.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SNDLVL_25dB",
        "type": "int",
        "value": 25,
        "desc": "A standard value used for a sound's sound level.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SNDLVL_30dB",
        "type": "int",
        "value": 30,
        "desc": "A standard value used for a sound's sound level.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SNDLVL_35dB",
        "type": "int",
        "value": 35,
        "desc": "A standard value used for a sound's sound level.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SNDLVL_40dB",
        "type": "int",
        "value": 40,
        "desc": "A standard value used for a sound's sound level.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SNDLVL_45dB",
        "type": "int",
        "value": 45,
        "desc": "A standard value used for a sound's sound level.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SNDLVL_50dB",
        "type": "int",
        "value": 50,
        "desc": "A standard value used for a sound's sound level.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SNDLVL_55dB",
        "type": "int",
        "value": 55,
        "desc": "A standard value used for a sound's sound level.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SNDLVL_60dB",
        "type": "int",
        "value": 60,
        "desc": "A standard value used for a sound's sound level.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SNDLVL_65dB",
        "type": "int",
        "value": 65,
        "desc": "A standard value used for a sound's sound level.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SNDLVL_70dB",
        "type": "int",
        "value": 70,
        "desc": "A standard value used for a sound's sound level.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SNDLVL_75dB",
        "type": "int",
        "value": 75,
        "desc": "A standard value used for a sound's sound level.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SNDLVL_80dB",
        "type": "int",
        "value": 80,
        "desc": "A standard value used for a sound's sound level.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SNDLVL_85dB",
        "type": "int",
        "value": 85,
        "desc": "A standard value used for a sound's sound level.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SNDLVL_90dB",
        "type": "int",
        "value": 90,
        "desc": "A standard value used for a sound's sound level.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SNDLVL_95dB",
        "type": "int",
        "value": 95,
        "desc": "A standard value used for a sound's sound level.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SNDLVL_GUNFIRE",
        "type": "int",
        "value": 140,
        "desc": "A standard value used for a sound's sound level.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SNDLVL_IDLE",
        "type": "int",
        "value": 60,
        "desc": "A standard value used for a sound's sound level.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SNDLVL_NONE",
        "type": "int",
        "value": 0,
        "desc": "A standard value used for a sound's sound level.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SNDLVL_NORM",
        "type": "int",
        "value": 75,
        "desc": "A standard value used for a sound's sound level.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SNDLVL_STATIC",
        "type": "int",
        "value": 66,
        "desc": "A standard value used for a sound's sound level.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SNDLVL_TALKING",
        "type": "int",
        "value": 80,
        "desc": "A standard value used for a sound's sound level.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SND_CHANGE_PITCH",
        "type": "int",
        "value": 2,
        "desc": "Indicates a sound is a pitch change to an already-playing sound.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SND_CHANGE_VOL",
        "type": "int",
        "value": 1,
        "desc": "Indicates a sound is a volume change to an already-playing sound.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SND_DELAY",
        "type": "int",
        "value": 16,
        "desc": "Indicates a sound has an initial delay.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SND_DO_NOT_OVERWRITE_EXISTING_ON_CHANNEL",
        "type": "int",
        "value": 1024,
        "desc": "Prevents a sound from interrupting other sounds on a channel (if the channel supports interruption).",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SND_IGNORE_NAME",
        "type": "int",
        "value": 512,
        "desc": "Used to change all sounds emitted by an entity, regardless of name.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SND_IGNORE_PHONEMES",
        "type": "int",
        "value": 256,
        "desc": "Prevents the entity emitting this sound from using its phonemes (no lip-syncing).",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SND_SHOULDPAUSE",
        "type": "int",
        "value": 128,
        "desc": "Forces a sound to pause if the game is paused.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SND_SPAWNING",
        "type": "int",
        "value": 8,
        "desc": "Indicates a sound is spawning, used in some cases for ambients. Not networked.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SND_SPEAKER",
        "type": "int",
        "value": 64,
        "desc": "Indicates a sound is being played again by a microphone through a speaker.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SND_STOP",
        "type": "int",
        "value": 4,
        "desc": "Indicates a sound is stopping an already-playing sound.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SND_STOP_LOOPING",
        "type": "int",
        "value": 32,
        "desc": "Stops all looping sounds on an entity.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SOUNDENT_CHANNEL_BULLET_IMPACT",
        "type": "int",
        "value": 6,
        "desc": "Sound channel used in QueryHearSound hooks, etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SOUNDENT_CHANNEL_INJURY",
        "type": "int",
        "value": 5,
        "desc": "Sound channel used in QueryHearSound hooks, etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SOUNDENT_CHANNEL_NPC_FOOTSTEP",
        "type": "int",
        "value": 7,
        "desc": "Sound channel used in QueryHearSound hooks, etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SOUNDENT_CHANNEL_REPEATED_DANGER",
        "type": "int",
        "value": 2,
        "desc": "Sound channel used in QueryHearSound hooks, etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SOUNDENT_CHANNEL_REPEATED_PHYSICS_DANGER",
        "type": "int",
        "value": 3,
        "desc": "Sound channel used in QueryHearSound hooks, etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SOUNDENT_CHANNEL_REPEATING",
        "type": "int",
        "value": 1,
        "desc": "Sound channel used in QueryHearSound hooks, etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SOUNDENT_CHANNEL_SPOOKY_NOISE",
        "type": "int",
        "value": 8,
        "desc": "Sound channel used in QueryHearSound hooks, etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SOUNDENT_CHANNEL_UNSPECIFIED",
        "type": "int",
        "value": 0,
        "desc": "Sound channel used in QueryHearSound hooks, etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SOUNDENT_CHANNEL_WEAPON",
        "type": "int",
        "value": 4,
        "desc": "Sound channel used in QueryHearSound hooks, etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SOUNDENT_CHANNEL_ZOMBINE_GRENADE",
        "type": "int",
        "value": 9,
        "desc": "Sound channel used in QueryHearSound hooks, etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SOUNDENT_VOLUME_MACHINEGUN",
        "type": "int",
        "value": 1500,
        "desc": "Sound volume preset for use in InsertAISound, etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SOUNDENT_VOLUME_PISTOL",
        "type": "int",
        "value": 500,
        "desc": "Sound volume preset for use in InsertAISound, etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SOUNDENT_VOLUME_SHOTGUN",
        "type": "int",
        "value": 1500,
        "desc": "Sound volume preset for use in InsertAISound, etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SOUND_BUGBAIT",
        "type": "int",
        "value": 512,
        "desc": "Sound type used in QueryHearSound hooks, etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SOUND_BULLET_IMPACT",
        "type": "int",
        "value": 16,
        "desc": "Sound type used in QueryHearSound hooks, etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SOUND_CARCASS",
        "type": "int",
        "value": 32,
        "desc": "Sound type used in QueryHearSound hooks, etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SOUND_COMBAT",
        "type": "int",
        "value": 1,
        "desc": "Sound type used in QueryHearSound hooks, etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SOUND_CONTEXT_ALLIES_ONLY",
        "type": "int",
        "value": 268435456,
        "desc": "Sound context used in QueryHearSound hooks, etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SOUND_CONTEXT_COMBINE_ONLY",
        "type": "int",
        "value": 8388608,
        "desc": "Sound context used in QueryHearSound hooks, etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SOUND_CONTEXT_DANGER_APPROACH",
        "type": "int",
        "value": 134217728,
        "desc": "Sound context used in QueryHearSound hooks, etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SOUND_CONTEXT_EXCLUDE_COMBINE",
        "type": "int",
        "value": 67108864,
        "desc": "Sound context used in QueryHearSound hooks, etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SOUND_CONTEXT_EXPLOSION",
        "type": "int",
        "value": 33554432,
        "desc": "Sound context used in QueryHearSound hooks, etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SOUND_CONTEXT_FROM_SNIPER",
        "type": "int",
        "value": 1048576,
        "desc": "Sound context used in QueryHearSound hooks, etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SOUND_CONTEXT_GUNFIRE",
        "type": "int",
        "value": 2097152,
        "desc": "Sound context used in QueryHearSound hooks, etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SOUND_CONTEXT_MORTAR",
        "type": "int",
        "value": 4194304,
        "desc": "Sound context used in QueryHearSound hooks, etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SOUND_CONTEXT_PLAYER_VEHICLE",
        "type": "int",
        "value": 536870912,
        "desc": "Sound context used in QueryHearSound hooks, etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SOUND_CONTEXT_REACT_TO_SOURCE",
        "type": "int",
        "value": 16777216,
        "desc": "Sound context used in QueryHearSound hooks, etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SOUND_DANGER",
        "type": "int",
        "value": 8,
        "desc": "Sound type used in QueryHearSound hooks, etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SOUND_DANGER_SNIPERONLY",
        "type": "int",
        "value": 2048,
        "desc": "Sound type used in QueryHearSound hooks, etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SOUND_GARBAGE",
        "type": "int",
        "value": 128,
        "desc": "Sound type used in QueryHearSound hooks, etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SOUND_MEAT",
        "type": "int",
        "value": 64,
        "desc": "Sound type used in QueryHearSound hooks, etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SOUND_MOVE_AWAY",
        "type": "int",
        "value": 4096,
        "desc": "Sound type used in QueryHearSound hooks, etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SOUND_NONE",
        "type": "int",
        "value": 0,
        "desc": "Sound type used in QueryHearSound hooks, etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SOUND_PHYSICS_DANGER",
        "type": "int",
        "value": 1024,
        "desc": "Sound type used in QueryHearSound hooks, etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SOUND_PLAYER",
        "type": "int",
        "value": 4,
        "desc": "Sound type used in QueryHearSound hooks, etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SOUND_PLAYER_VEHICLE",
        "type": "int",
        "value": 8192,
        "desc": "Sound type used in QueryHearSound hooks, etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SOUND_READINESS_HIGH",
        "type": "int",
        "value": 65536,
        "desc": "Sound type used in QueryHearSound hooks, etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SOUND_READINESS_LOW",
        "type": "int",
        "value": 16384,
        "desc": "Sound type used in QueryHearSound hooks, etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SOUND_READINESS_MEDIUM",
        "type": "int",
        "value": 32768,
        "desc": "Sound type used in QueryHearSound hooks, etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SOUND_THUMPER",
        "type": "int",
        "value": 256,
        "desc": "Sound type used in QueryHearSound hooks, etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "SOUND_WORLD",
        "type": "int",
        "value": 2,
        "desc": "Sound type used in QueryHearSound hooks, etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "VECTOR_CONE_10DEGREES",
        "type": "Vector",
        "value": "Vector( 0.087160, 0.087160, 0.087160 )",
        "desc": "10-degree weapon vector cone.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "VECTOR_CONE_15DEGREES",
        "type": "Vector",
        "value": "Vector( 0.130530, 0.130530, 0.130530 )",
        "desc": "15-degree weapon vector cone.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "VECTOR_CONE_1DEGREES",
        "type": "Vector",
        "value": "Vector( 0.008730, 0.008730, 0.008730 )",
        "desc": "1-degree weapon vector cone.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "VECTOR_CONE_20DEGREES",
        "type": "Vector",
        "value": "Vector( 0.173650, 0.173650, 0.173650 )",
        "desc": "20-degree weapon vector cone.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "VECTOR_CONE_2DEGREES",
        "type": "Vector",
        "value": "Vector( 0.017450, 0.017450, 0.017450 )",
        "desc": "2-degree weapon vector cone.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "VECTOR_CONE_3DEGREES",
        "type": "Vector",
        "value": "Vector( 0.026180, 0.026180, 0.026180 )",
        "desc": "3-degree weapon vector cone.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "VECTOR_CONE_4DEGREES",
        "type": "Vector",
        "value": "Vector( 0.034900, 0.034900, 0.034900 )",
        "desc": "4-degree weapon vector cone.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "VECTOR_CONE_5DEGREES",
        "type": "Vector",
        "value": "Vector( 0.043620, 0.043620, 0.043620 )",
        "desc": "5-degree weapon vector cone.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "VECTOR_CONE_6DEGREES",
        "type": "Vector",
        "value": "Vector( 0.052340, 0.052340, 0.052340 )",
        "desc": "6-degree weapon vector cone.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "VECTOR_CONE_7DEGREES",
        "type": "Vector",
        "value": "Vector( 0.061050, 0.061050, 0.061050 )",
        "desc": "7-degree weapon vector cone.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "VECTOR_CONE_8DEGREES",
        "type": "Vector",
        "value": "Vector( 0.069760, 0.069760, 0.069760 )",
        "desc": "8-degree weapon vector cone.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "VECTOR_CONE_9DEGREES",
        "type": "Vector",
        "value": "Vector( 0.078460, 0.078460, 0.078460 )",
        "desc": "9-degree weapon vector cone.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "VECTOR_CONE_PRECALCULATED",
        "type": "Vector",
        "value": "Vector( 0.000000, 0.000000, 0.000000 )",
        "desc": "This is just a zero vector, but it adds some context indicating that the person writing the code is not allowing FireBullets() to modify the direction of the shot because the shot direction being passed into the function has already been modified by another piece of code and should be fired as specified.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "VOL_NORM",
        "type": "float",
        "value": 1,
        "desc": "The standard volume value.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "WEAPON_PROFICIENCY_AVERAGE",
        "type": "int",
        "value": 1,
        "desc": "Average weapon proficiency. Causes average accuracy.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "WEAPON_PROFICIENCY_GOOD",
        "type": "int",
        "value": 2,
        "desc": "Good weapon proficiency. Causes good accuracy.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "WEAPON_PROFICIENCY_PERFECT",
        "type": "int",
        "value": 4,
        "desc": "Perfect weapon proficiency. Causes perfect accuracy.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "WEAPON_PROFICIENCY_POOR",
        "type": "int",
        "value": 0,
        "desc": "Poor weapon proficiency. Causes low accuracy.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "WEAPON_PROFICIENCY_VERY_GOOD",
        "type": "int",
        "value": 3,
        "desc": "Very good weapon proficiency. Causes very good accuracy.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "AMMOBOX_12GAUGE",
        "type": "int",
        "value": 55,
        "desc": null,
        "enum": [
            "WeaponID",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "AMMOBOX_22LR",
        "type": "int",
        "value": 56,
        "desc": null,
        "enum": [
            "WeaponID",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "AMMOBOX_308",
        "type": "int",
        "value": 57,
        "desc": null,
        "enum": [
            "WeaponID",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "AMMOBOX_357",
        "type": "int",
        "value": 54,
        "desc": null,
        "enum": [
            "WeaponID",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "AMMOBOX_45ACP",
        "type": "int",
        "value": 53,
        "desc": null,
        "enum": [
            "WeaponID",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "AMMOBOX_556",
        "type": "int",
        "value": 58,
        "desc": null,
        "enum": [
            "WeaponID",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "AMMOBOX_762MM",
        "type": "int",
        "value": 59,
        "desc": null,
        "enum": [
            "WeaponID",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "AMMOBOX_9MM",
        "type": "int",
        "value": 52,
        "desc": null,
        "enum": [
            "WeaponID",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "AMMOBOX_ARROW",
        "type": "int",
        "value": 60,
        "desc": null,
        "enum": [
            "WeaponID",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "AMMOBOX_BOARD",
        "type": "int",
        "value": 61,
        "desc": null,
        "enum": [
            "WeaponID",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "AMMOBOX_FLARE",
        "type": "int",
        "value": 63,
        "desc": null,
        "enum": [
            "WeaponID",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "AMMOBOX_FUEL",
        "type": "int",
        "value": 62,
        "desc": null,
        "enum": [
            "WeaponID",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "BOW_DEERHUNTER",
        "type": "int",
        "value": 22,
        "desc": null,
        "enum": [
            "WeaponID",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "EXP_GRENADE",
        "type": "int",
        "value": 49,
        "desc": null,
        "enum": [
            "WeaponID",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "EXP_MOLOTOV",
        "type": "int",
        "value": 50,
        "desc": null,
        "enum": [
            "WeaponID",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "EXP_TNT",
        "type": "int",
        "value": 51,
        "desc": null,
        "enum": [
            "WeaponID",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "FA_1022",
        "type": "int",
        "value": 11,
        "desc": null,
        "enum": [
            "WeaponID",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "FA_1022_25MAG",
        "type": "int",
        "value": 12,
        "desc": null,
        "enum": [
            "WeaponID",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "FA_1911",
        "type": "int",
        "value": 4,
        "desc": null,
        "enum": [
            "WeaponID",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "FA_500A",
        "type": "int",
        "value": 9,
        "desc": null,
        "enum": [
            "WeaponID",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "FA_870",
        "type": "int",
        "value": 6,
        "desc": null,
        "enum": [
            "WeaponID",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "FA_CZ858",
        "type": "int",
        "value": 15,
        "desc": null,
        "enum": [
            "WeaponID",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "FA_FNFAL",
        "type": "int",
        "value": 17,
        "desc": null,
        "enum": [
            "WeaponID",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "FA_GLOCK17",
        "type": "int",
        "value": 1,
        "desc": null,
        "enum": [
            "WeaponID",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "FA_JAE700",
        "type": "int",
        "value": 16,
        "desc": null,
        "enum": [
            "WeaponID",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "FA_M16A4",
        "type": "int",
        "value": 20,
        "desc": null,
        "enum": [
            "WeaponID",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "FA_M16A4_CARRYHANDLE",
        "type": "int",
        "value": 21,
        "desc": null,
        "enum": [
            "WeaponID",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "FA_M92FS",
        "type": "int",
        "value": 2,
        "desc": null,
        "enum": [
            "WeaponID",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "FA_MAC10",
        "type": "int",
        "value": 18,
        "desc": null,
        "enum": [
            "WeaponID",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "FA_MKIII",
        "type": "int",
        "value": 3,
        "desc": null,
        "enum": [
            "WeaponID",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "FA_MP5A3",
        "type": "int",
        "value": 19,
        "desc": null,
        "enum": [
            "WeaponID",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "FA_SAKO85",
        "type": "int",
        "value": 14,
        "desc": null,
        "enum": [
            "WeaponID",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "FA_SAKO85_IRONSIGHTS",
        "type": "int",
        "value": 67,
        "desc": null,
        "enum": [
            "WeaponID",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "FA_SKS",
        "type": "int",
        "value": 13,
        "desc": null,
        "enum": [
            "WeaponID",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "FA_SKS_NOBAYO",
        "type": "int",
        "value": 66,
        "desc": null,
        "enum": [
            "WeaponID",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "FA_SUPERX3",
        "type": "int",
        "value": 7,
        "desc": null,
        "enum": [
            "WeaponID",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "FA_SV10",
        "type": "int",
        "value": 8,
        "desc": null,
        "enum": [
            "WeaponID",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "FA_SW686",
        "type": "int",
        "value": 5,
        "desc": null,
        "enum": [
            "WeaponID",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "FA_WINCHESTER1892",
        "type": "int",
        "value": 10,
        "desc": null,
        "enum": [
            "WeaponID",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "ITEM_BANDAGES",
        "type": "int",
        "value": 47,
        "desc": null,
        "enum": [
            "WeaponID",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "ITEM_FIRST_AID",
        "type": "int",
        "value": 45,
        "desc": null,
        "enum": [
            "WeaponID",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "ITEM_GENE_THERAPY",
        "type": "int",
        "value": 46,
        "desc": null,
        "enum": [
            "WeaponID",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "ITEM_MAGLITE",
        "type": "int",
        "value": 42,
        "desc": null,
        "enum": [
            "WeaponID",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "ITEM_PILLS",
        "type": "int",
        "value": 44,
        "desc": null,
        "enum": [
            "WeaponID",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "ITEM_WALKIETALKIE",
        "type": "int",
        "value": 43,
        "desc": null,
        "enum": [
            "WeaponID",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "ITEM_ZIPPO",
        "type": "int",
        "value": 48,
        "desc": null,
        "enum": [
            "WeaponID",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "ME_ABRASIVESAW",
        "type": "int",
        "value": 31,
        "desc": null,
        "enum": [
            "WeaponID",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "ME_AXE_FIRE",
        "type": "int",
        "value": 27,
        "desc": null,
        "enum": [
            "WeaponID",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "ME_BAT_METAL",
        "type": "int",
        "value": 28,
        "desc": null,
        "enum": [
            "WeaponID",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "ME_CHAINSAW",
        "type": "int",
        "value": 30,
        "desc": null,
        "enum": [
            "WeaponID",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "ME_CLEAVER",
        "type": "int",
        "value": 65,
        "desc": null,
        "enum": [
            "WeaponID",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "ME_CROWBAR",
        "type": "int",
        "value": 29,
        "desc": null,
        "enum": [
            "WeaponID",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "ME_ETOOL",
        "type": "int",
        "value": 32,
        "desc": null,
        "enum": [
            "WeaponID",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "ME_FISTS",
        "type": "int",
        "value": 33,
        "desc": null,
        "enum": [
            "WeaponID",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "ME_FUBAR",
        "type": "int",
        "value": 34,
        "desc": null,
        "enum": [
            "WeaponID",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "ME_HATCHET",
        "type": "int",
        "value": 35,
        "desc": null,
        "enum": [
            "WeaponID",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "ME_KITKNIFE",
        "type": "int",
        "value": 36,
        "desc": null,
        "enum": [
            "WeaponID",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "ME_MACHETE",
        "type": "int",
        "value": 37,
        "desc": null,
        "enum": [
            "WeaponID",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "ME_PICKAXE",
        "type": "int",
        "value": 64,
        "desc": null,
        "enum": [
            "WeaponID",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "ME_PIPE_LEAD",
        "type": "int",
        "value": 38,
        "desc": null,
        "enum": [
            "WeaponID",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "ME_SHOVEL",
        "type": "int",
        "value": 39,
        "desc": null,
        "enum": [
            "WeaponID",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "ME_SLEDGE",
        "type": "int",
        "value": 40,
        "desc": null,
        "enum": [
            "WeaponID",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "ME_WRENCH",
        "type": "int",
        "value": 41,
        "desc": null,
        "enum": [
            "WeaponID",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "TOOL_BARRICADE",
        "type": "int",
        "value": 23,
        "desc": null,
        "enum": [
            "WeaponID",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "TOOL_EXTINGUISHER",
        "type": "int",
        "value": 24,
        "desc": null,
        "enum": [
            "WeaponID",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "TOOL_FLARE_GUN",
        "type": "int",
        "value": 25,
        "desc": null,
        "enum": [
            "WeaponID",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "TOOL_WELDER",
        "type": "int",
        "value": 26,
        "desc": null,
        "enum": [
            "WeaponID",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "WEAPON_MAX",
        "type": "int",
        "value": 68,
        "desc": null,
        "enum": [
            "WeaponID",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "WEAPON_NONE",
        "type": "int",
        "value": 0,
        "desc": null,
        "enum": [
            "WeaponID",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "BURST",
        "type": "int",
        "value": 5,
        "desc": null,
        "enum": [
            "WeaponSound",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "DEPLOY",
        "type": "int",
        "value": 15,
        "desc": null,
        "enum": [
            "WeaponSound",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "DOUBLE_NPC",
        "type": "int",
        "value": 4,
        "desc": null,
        "enum": [
            "WeaponSound",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "EMPTY",
        "type": "int",
        "value": 0,
        "desc": null,
        "enum": [
            "WeaponSound",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "MELEE_HIT",
        "type": "int",
        "value": 9,
        "desc": null,
        "enum": [
            "WeaponSound",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "MELEE_HIT_WORLD",
        "type": "int",
        "value": 10,
        "desc": null,
        "enum": [
            "WeaponSound",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "MELEE_MISS",
        "type": "int",
        "value": 8,
        "desc": null,
        "enum": [
            "WeaponSound",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "NUM_SHOOT_SOUND_TYPES",
        "type": "int",
        "value": 24,
        "desc": null,
        "enum": [
            "WeaponSound",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "RELOAD",
        "type": "int",
        "value": 6,
        "desc": null,
        "enum": [
            "WeaponSound",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "RELOAD_NPC",
        "type": "int",
        "value": 7,
        "desc": null,
        "enum": [
            "WeaponSound",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "SINGLE",
        "type": "int",
        "value": 1,
        "desc": null,
        "enum": [
            "WeaponSound",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "SINGLE_NPC",
        "type": "int",
        "value": 2,
        "desc": null,
        "enum": [
            "WeaponSound",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "SPECIAL1",
        "type": "int",
        "value": 11,
        "desc": null,
        "enum": [
            "WeaponSound",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "SPECIAL2",
        "type": "int",
        "value": 12,
        "desc": null,
        "enum": [
            "WeaponSound",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "SPECIAL3",
        "type": "int",
        "value": 13,
        "desc": null,
        "enum": [
            "WeaponSound",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "TAUNT",
        "type": "int",
        "value": 14,
        "desc": null,
        "enum": [
            "WeaponSound",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "WPN_DOUBLE",
        "type": "int",
        "value": 3,
        "desc": null,
        "enum": [
            "WeaponSound",
            "."
        ]
    },
    {
        "kind": "constant",
        "id": "bits_CAP_AIM_GUN",
        "type": "int",
        "value": 536870912,
        "desc": "NPC/player/weapon capability used in GetCapabilities(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "bits_CAP_ANIMATEDFACE",
        "type": "int",
        "value": 8388608,
        "desc": "NPC/player/weapon capability used in GetCapabilities(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "bits_CAP_AUTO_DOORS",
        "type": "int",
        "value": 1024,
        "desc": "NPC/player/weapon capability used in GetCapabilities(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "bits_CAP_DOORS_GROUP",
        "type": "int",
        "value": 3072,
        "desc": "NPC/player/weapon capability used in GetCapabilities(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "bits_CAP_DUCK",
        "type": "int",
        "value": 134217728,
        "desc": "NPC/player/weapon capability used in GetCapabilities(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "bits_CAP_FRIENDLY_DMG_IMMUNE",
        "type": "int",
        "value": 33554432,
        "desc": "NPC/player/weapon capability used in GetCapabilities(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "bits_CAP_INNATE_MELEE_ATTACK1",
        "type": "int",
        "value": 524288,
        "desc": "NPC/player/weapon capability used in GetCapabilities(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "bits_CAP_INNATE_MELEE_ATTACK2",
        "type": "int",
        "value": 1048576,
        "desc": "NPC/player/weapon capability used in GetCapabilities(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "bits_CAP_INNATE_RANGE_ATTACK1",
        "type": "int",
        "value": 131072,
        "desc": "NPC/player/weapon capability used in GetCapabilities(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "bits_CAP_INNATE_RANGE_ATTACK2",
        "type": "int",
        "value": 262144,
        "desc": "NPC/player/weapon capability used in GetCapabilities(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "bits_CAP_MELEE_ATTACK_GROUP",
        "type": "int",
        "value": 98304,
        "desc": "NPC/player/weapon capability used in GetCapabilities(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "bits_CAP_MOVE_CLIMB",
        "type": "int",
        "value": 8,
        "desc": "NPC/player/weapon capability used in GetCapabilities(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "bits_CAP_MOVE_CRAWL",
        "type": "int",
        "value": 32,
        "desc": "NPC/player/weapon capability used in GetCapabilities(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "bits_CAP_MOVE_FLY",
        "type": "int",
        "value": 4,
        "desc": "NPC/player/weapon capability used in GetCapabilities(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "bits_CAP_MOVE_GROUND",
        "type": "int",
        "value": 1,
        "desc": "NPC/player/weapon capability used in GetCapabilities(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "bits_CAP_MOVE_JUMP",
        "type": "int",
        "value": 2,
        "desc": "NPC/player/weapon capability used in GetCapabilities(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "bits_CAP_MOVE_SHOOT",
        "type": "int",
        "value": 64,
        "desc": "NPC/player/weapon capability used in GetCapabilities(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "bits_CAP_MOVE_SWIM",
        "type": "int",
        "value": 16,
        "desc": "NPC/player/weapon capability used in GetCapabilities(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "bits_CAP_NO_HIT_PLAYER",
        "type": "int",
        "value": 268435456,
        "desc": "NPC/player/weapon capability used in GetCapabilities(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "bits_CAP_NO_HIT_SQUADMATES",
        "type": "int",
        "value": 1073741824,
        "desc": "NPC/player/weapon capability used in GetCapabilities(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "bits_CAP_OPEN_DOORS",
        "type": "int",
        "value": 2048,
        "desc": "NPC/player/weapon capability used in GetCapabilities(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "bits_CAP_RANGE_ATTACK_GROUP",
        "type": "int",
        "value": 24576,
        "desc": "NPC/player/weapon capability used in GetCapabilities(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "bits_CAP_SIMPLE_RADIUS_DAMAGE",
        "type": "int",
        "value": 2147483648,
        "desc": "NPC/player/weapon capability used in GetCapabilities(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "bits_CAP_SKIP_NAV_GROUND_CHECK",
        "type": "int",
        "value": 128,
        "desc": "NPC/player/weapon capability used in GetCapabilities(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "bits_CAP_SQUAD",
        "type": "int",
        "value": 67108864,
        "desc": "NPC/player/weapon capability used in GetCapabilities(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "bits_CAP_TURN_HEAD",
        "type": "int",
        "value": 4096,
        "desc": "NPC/player/weapon capability used in GetCapabilities(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "bits_CAP_USE",
        "type": "int",
        "value": 256,
        "desc": "NPC/player/weapon capability used in GetCapabilities(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "bits_CAP_USE_SHOT_REGULATOR",
        "type": "int",
        "value": 16777216,
        "desc": "NPC/player/weapon capability used in GetCapabilities(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "bits_CAP_USE_WEAPONS",
        "type": "int",
        "value": 2097152,
        "desc": "NPC/player/weapon capability used in GetCapabilities(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "bits_CAP_WEAPON_MELEE_ATTACK1",
        "type": "int",
        "value": 32768,
        "desc": "NPC/player/weapon capability used in GetCapabilities(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "bits_CAP_WEAPON_MELEE_ATTACK2",
        "type": "int",
        "value": 65536,
        "desc": "NPC/player/weapon capability used in GetCapabilities(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "bits_CAP_WEAPON_RANGE_ATTACK1",
        "type": "int",
        "value": 8192,
        "desc": "NPC/player/weapon capability used in GetCapabilities(), etc.",
        "enum": null
    },
    {
        "kind": "constant",
        "id": "bits_CAP_WEAPON_RANGE_ATTACK2",
        "type": "int",
        "value": 16384,
        "desc": "NPC/player/weapon capability used in GetCapabilities(), etc.",
        "enum": null
    },
    {
        "kind": "class",
        "id": "AI_EnemyInfo_t",
        "parent": null,
        "desc": "Accessor for information about an enemy."
    },
    {
        "kind": "class",
        "id": "CAI_BaseActor",
        "parent": "CAI_BaseNPC",
        "desc": "The base class for NPCs which act in complex choreo scenes."
    },
    {
        "kind": "class",
        "id": "CAI_BaseNPC",
        "parent": "CBaseCombatCharacter",
        "desc": "The base class all NPCs derive from."
    },
    {
        "kind": "class",
        "id": "CAI_Expresser",
        "parent": null,
        "desc": "Expresser class for complex speech."
    },
    {
        "kind": "class",
        "id": "CAI_GoalEntity",
        "parent": "CBaseEntity",
        "desc": "The base class for goal entities used to control NPC behavior."
    },
    {
        "kind": "class",
        "id": "CAI_Hint",
        "parent": "CBaseEntity",
        "desc": "An entity which gives contextual pointers for NPCs."
    },
    {
        "kind": "class",
        "id": "CAI_Squad",
        "parent": null,
        "desc": "NPC squads used for schedule coordination, sharing information about enemies, etc."
    },
    {
        "kind": "class",
        "id": "CAI_SquadManager",
        "parent": null,
        "desc": "Manager for NPC squads."
    },
    {
        "kind": "class",
        "id": "CAmmoDef",
        "parent": null,
        "desc": "The ammo type definition manager."
    },
    {
        "kind": "class",
        "id": "CBaseAnimating",
        "parent": "CBaseEntity",
        "desc": "Animating models"
    },
    {
        "kind": "class",
        "id": "CBaseCombatCharacter",
        "parent": "CBaseFlex",
        "desc": "The base class shared by players and NPCs."
    },
    {
        "kind": "class",
        "id": "CBaseCombatWeapon",
        "parent": "CBaseAnimating",
        "desc": "The base class for all equippable weapons."
    },
    {
        "kind": "class",
        "id": "CBaseEntity",
        "parent": null,
        "desc": "Root class of all server-side entities"
    },
    {
        "kind": "class",
        "id": "CBaseFilter",
        "parent": "CBaseEntity",
        "desc": "All entities which could be used as filters."
    },
    {
        "kind": "class",
        "id": "CBaseFlex",
        "parent": "CBaseAnimating",
        "desc": "Animated characters who have vertex flex capability."
    },
    {
        "kind": "class",
        "id": "CBasePlayer",
        "parent": "CInfectableCharacter",
        "desc": "The player entity."
    },
    {
        "kind": "class",
        "id": "CConvars",
        "parent": null,
        "desc": "Provides an interface to convars."
    },
    {
        "kind": "class",
        "id": "CDebugOverlayScriptHelper",
        "parent": null,
        "desc": "CDebugOverlayScriptHelper"
    },
    {
        "kind": "class",
        "id": "CEntities",
        "parent": null,
        "desc": "The global list of entities"
    },
    {
        "kind": "class",
        "id": "CEnvEntityMaker",
        "parent": "CBaseEntity",
        "desc": "env_entity_maker"
    },
    {
        "kind": "class",
        "id": "CFilterScript",
        "parent": "CBaseFilter",
        "desc": "The filter_script entity which allows VScript functions to hook onto filter methods."
    },
    {
        "kind": "class",
        "id": "CGameRules",
        "parent": null,
        "desc": "The container of the game's rules, handling behavior which could be different on a game-by-game basis."
    },
    {
        "kind": "class",
        "id": "CGameState",
        "parent": null,
        "desc": "Helper interface for various game state functions."
    },
    {
        "kind": "class",
        "id": "CGameTrace",
        "parent": null,
        "desc": "trace_t"
    },
    {
        "kind": "class",
        "id": "CGlobalSys",
        "parent": null,
        "desc": "GlobalSys"
    },
    {
        "kind": "class",
        "id": "CInfectableCharacter",
        "parent": "CBaseCombatCharacter",
        "desc": "Base class for all characters that can be infected."
    },
    {
        "kind": "class",
        "id": "CItem_AmmoBox",
        "parent": "CBaseAnimating",
        "desc": "Ammo box."
    },
    {
        "kind": "class",
        "id": "CItem_InventoryBox",
        "parent": "CBaseAnimating",
        "desc": "Inventory box, an entity used for supply crates."
    },
    {
        "kind": "class",
        "id": "CLocalize",
        "parent": null,
        "desc": "Accesses functions related to localization strings."
    },
    {
        "kind": "class",
        "id": "CNMRiHLogicScriptProxy",
        "parent": "CBaseEntity",
        "desc": "Script proxy."
    },
    {
        "kind": "class",
        "id": "CNMRiH_BaseZombie",
        "parent": "CAI_BaseNPC",
        "desc": "The zombie entity."
    },
    {
        "kind": "class",
        "id": "CNMRiH_GameRules",
        "parent": "CGameRules",
        "desc": null
    },
    {
        "kind": "class",
        "id": "CNMRiH_Player",
        "parent": "CBasePlayer",
        "desc": "The player entity for NMRiH."
    },
    {
        "kind": "class",
        "id": "CNMRiH_WeaponBase",
        "parent": "CBaseCombatWeapon",
        "desc": "The weapon entity for NMRiH."
    },
    {
        "kind": "class",
        "id": "CNetPropManager",
        "parent": null,
        "desc": "Allows reading and updating the network properties of an entity."
    },
    {
        "kind": "class",
        "id": "CObjectiveManager",
        "parent": null,
        "desc": "Interface for objective manager."
    },
    {
        "kind": "class",
        "id": "COverlord_Wave_Controller",
        "parent": "CBaseEntity",
        "desc": "The wave controller."
    },
    {
        "kind": "class",
        "id": "CRagdollProp",
        "parent": "CBaseAnimating",
        "desc": "Ragdoll physics prop."
    },
    {
        "kind": "class",
        "id": "CRulesetManager",
        "parent": null,
        "desc": "Interface for ruleset manager."
    },
    {
        "kind": "class",
        "id": "CSceneEntity",
        "parent": "CBaseEntity",
        "desc": "Choreographed scene which controls animation and/or dialog on one or more actors."
    },
    {
        "kind": "class",
        "id": "CSceneListManager",
        "parent": "CBaseEntity",
        "desc": "Stores choreo scenes and cleans them up when a later scene in the list begins playing."
    },
    {
        "kind": "class",
        "id": "CScriptKeyValues",
        "parent": null,
        "desc": "Wrapper class over KeyValues instance"
    },
    {
        "kind": "class",
        "id": "CSound",
        "parent": null,
        "desc": "A sound NPCs can hear."
    },
    {
        "kind": "class",
        "id": "CTakeDamageInfo",
        "parent": null,
        "desc": "Damage information handler."
    },
    {
        "kind": "class",
        "id": "CUserCmd",
        "parent": null,
        "desc": null
    },
    {
        "kind": "class",
        "id": "CVersion",
        "parent": null,
        "desc": "Utilities for NMRiH versioning, such as patch labels."
    },
    {
        "kind": "class",
        "id": "Color",
        "parent": null,
        "desc": null
    },
    {
        "kind": "class",
        "id": "EmitSound_t",
        "parent": null,
        "desc": null
    },
    {
        "kind": "class",
        "id": "FireBulletsInfo_t",
        "parent": null,
        "desc": null
    },
    {
        "kind": "class",
        "id": "IPhysicsObject",
        "parent": null,
        "desc": "VPhysics object class."
    },
    {
        "kind": "class",
        "id": "Quaternion",
        "parent": null,
        "desc": "A quaternion."
    },
    {
        "kind": "class",
        "id": "Vector",
        "parent": null,
        "desc": "Basic 3-float Vector class."
    },
    {
        "kind": "class",
        "id": "cplane_t",
        "parent": null,
        "desc": null
    },
    {
        "kind": "class",
        "id": "csurface_t",
        "parent": null,
        "desc": null
    },
    {
        "kind": "class",
        "id": "matrix3x4_t",
        "parent": null,
        "desc": "A 3x4 matrix transform."
    },
    {
        "kind": "class",
        "id": "scriptanimevent_t",
        "parent": null,
        "desc": null
    },
    {
        "kind": "class",
        "id": "surfacedata_t",
        "parent": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "DangerMemory",
        "ret": "bool",
        "class": "AI_EnemyInfo_t",
        "args": null,
        "desc": "Get the memory of danger position w/o enemy pointer."
    },
    {
        "kind": "function",
        "id": "EludedMe",
        "ret": "bool",
        "class": "AI_EnemyInfo_t",
        "args": null,
        "desc": "Get whether the enemy is not at the last known location."
    },
    {
        "kind": "function",
        "id": "Enemy",
        "ret": "handle",
        "class": "AI_EnemyInfo_t",
        "args": null,
        "desc": "Get the enemy."
    },
    {
        "kind": "function",
        "id": "LastKnownLocation",
        "ret": "Vector",
        "class": "AI_EnemyInfo_t",
        "args": null,
        "desc": "Get the enemy's last known location."
    },
    {
        "kind": "function",
        "id": "LastSeenLocation",
        "ret": "Vector",
        "class": "AI_EnemyInfo_t",
        "args": null,
        "desc": "Get the enemy's last seen location."
    },
    {
        "kind": "function",
        "id": "MobbedMe",
        "ret": "bool",
        "class": "AI_EnemyInfo_t",
        "args": null,
        "desc": "Get whether the enemy was part of a mob at some point."
    },
    {
        "kind": "function",
        "id": "SetDangerMemory",
        "ret": "void",
        "class": "AI_EnemyInfo_t",
        "args": [
            {
                "type": "bool",
                "id": null
            }
        ],
        "desc": "Set the memory of danger position w/o enemy pointer."
    },
    {
        "kind": "function",
        "id": "SetEludedMe",
        "ret": "void",
        "class": "AI_EnemyInfo_t",
        "args": [
            {
                "type": "bool",
                "id": null
            }
        ],
        "desc": "Set whether the enemy is not at the last known location."
    },
    {
        "kind": "function",
        "id": "SetEnemy",
        "ret": "void",
        "class": "AI_EnemyInfo_t",
        "args": [
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Set the enemy."
    },
    {
        "kind": "function",
        "id": "SetLastKnownLocation",
        "ret": "void",
        "class": "AI_EnemyInfo_t",
        "args": [
            {
                "type": "Vector",
                "id": null
            }
        ],
        "desc": "Set the enemy's last known location."
    },
    {
        "kind": "function",
        "id": "SetLastSeenLocation",
        "ret": "void",
        "class": "AI_EnemyInfo_t",
        "args": [
            {
                "type": "Vector",
                "id": null
            }
        ],
        "desc": "Set the enemy's last seen location."
    },
    {
        "kind": "function",
        "id": "SetMobbedMe",
        "ret": "void",
        "class": "AI_EnemyInfo_t",
        "args": [
            {
                "type": "bool",
                "id": null
            }
        ],
        "desc": "Set whether the enemy was part of a mob at some point."
    },
    {
        "kind": "function",
        "id": "SetTimeAtFirstHand",
        "ret": "void",
        "class": "AI_EnemyInfo_t",
        "args": [
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Set the time at which the enemy was seen firsthand."
    },
    {
        "kind": "function",
        "id": "SetTimeFirstSeen",
        "ret": "void",
        "class": "AI_EnemyInfo_t",
        "args": [
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Set the first time the enemy was seen."
    },
    {
        "kind": "function",
        "id": "SetTimeLastReacquired",
        "ret": "void",
        "class": "AI_EnemyInfo_t",
        "args": [
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Set the last time the enemy was reaquired."
    },
    {
        "kind": "function",
        "id": "SetTimeLastReceivedDamageFrom",
        "ret": "void",
        "class": "AI_EnemyInfo_t",
        "args": [
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Set the last time damage was received from this enemy."
    },
    {
        "kind": "function",
        "id": "SetTimeLastSeen",
        "ret": "void",
        "class": "AI_EnemyInfo_t",
        "args": [
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Set the last time the enemy was seen."
    },
    {
        "kind": "function",
        "id": "SetTimeValidEnemy",
        "ret": "void",
        "class": "AI_EnemyInfo_t",
        "args": [
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Set the time at which the enemy can be selected (reaction delay)."
    },
    {
        "kind": "function",
        "id": "SetUnforgettable",
        "ret": "void",
        "class": "AI_EnemyInfo_t",
        "args": [
            {
                "type": "bool",
                "id": null
            }
        ],
        "desc": "Set whether the enemy is unforgettable."
    },
    {
        "kind": "function",
        "id": "TimeAtFirstHand",
        "ret": "float",
        "class": "AI_EnemyInfo_t",
        "args": null,
        "desc": "Get the time at which the enemy was seen firsthand."
    },
    {
        "kind": "function",
        "id": "TimeFirstSeen",
        "ret": "float",
        "class": "AI_EnemyInfo_t",
        "args": null,
        "desc": "Get the first time the enemy was seen."
    },
    {
        "kind": "function",
        "id": "TimeLastReacquired",
        "ret": "float",
        "class": "AI_EnemyInfo_t",
        "args": null,
        "desc": "Get the last time the enemy was reaquired."
    },
    {
        "kind": "function",
        "id": "TimeLastReceivedDamageFrom",
        "ret": "float",
        "class": "AI_EnemyInfo_t",
        "args": null,
        "desc": "Get the last time damage was received from this enemy."
    },
    {
        "kind": "function",
        "id": "TimeLastSeen",
        "ret": "float",
        "class": "AI_EnemyInfo_t",
        "args": null,
        "desc": "Get the last time the enemy was seen."
    },
    {
        "kind": "function",
        "id": "TimeValidEnemy",
        "ret": "float",
        "class": "AI_EnemyInfo_t",
        "args": null,
        "desc": "Get the time at which the enemy can be selected (reaction delay)."
    },
    {
        "kind": "function",
        "id": "Unforgettable",
        "ret": "bool",
        "class": "AI_EnemyInfo_t",
        "args": null,
        "desc": "Get whether the enemy is unforgettable."
    },
    {
        "kind": "function",
        "id": "AddPhysVelocity",
        "ret": "void",
        "class": null,
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            }
        ],
        "desc": "Adds physics velocity for the given VPhysics object"
    },
    {
        "kind": "function",
        "id": "AddThinkToEnt",
        "ret": "void",
        "class": null,
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "This will put a think function onto an entity, or pass null to remove it. This is NOT chained, so be careful."
    },
    {
        "kind": "function",
        "id": "AngleDiff",
        "ret": "float",
        "class": null,
        "args": [
            {
                "type": "float",
                "id": null
            },
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Returns the degrees difference between two yaw angles."
    },
    {
        "kind": "function",
        "id": "AngleDistance",
        "ret": "float",
        "class": null,
        "args": [
            {
                "type": "float",
                "id": null
            },
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": null
    },
    {
        "kind": "function",
        "id": "AngleIMatrix",
        "ret": "void",
        "class": null,
        "args": [
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Sets the inverted angles and position of a matrix."
    },
    {
        "kind": "function",
        "id": "AngleMatrix",
        "ret": "void",
        "class": null,
        "args": [
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Sets the angles and position of a matrix."
    },
    {
        "kind": "function",
        "id": "AngleNormalize",
        "ret": "float",
        "class": null,
        "args": [
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Clamps an angle to be in between -360 and 360."
    },
    {
        "kind": "function",
        "id": "AngleNormalizePositive",
        "ret": "float",
        "class": null,
        "args": [
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Clamps an angle to be in between 0 and 360."
    },
    {
        "kind": "function",
        "id": "AngleVectors",
        "ret": "Vector",
        "class": null,
        "args": [
            {
                "type": "Vector",
                "id": null
            }
        ],
        "desc": "Turns an angle into a direction vector."
    },
    {
        "kind": "function",
        "id": "AnglesAreEqual",
        "ret": "bool",
        "class": null,
        "args": [
            {
                "type": "float",
                "id": null
            },
            {
                "type": "float",
                "id": null
            },
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Checks if two angles are equal based on a given tolerance value."
    },
    {
        "kind": "function",
        "id": "Approach",
        "ret": "float",
        "class": null,
        "args": [
            {
                "type": "float",
                "id": null
            },
            {
                "type": "float",
                "id": null
            },
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": null
    },
    {
        "kind": "function",
        "id": "ApproachAngle",
        "ret": "float",
        "class": null,
        "args": [
            {
                "type": "float",
                "id": null
            },
            {
                "type": "float",
                "id": null
            },
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Returns an angle which approaches the target angle from the input angle with the specified speed."
    },
    {
        "kind": "function",
        "id": "Bias",
        "ret": "float",
        "class": null,
        "args": [
            {
                "type": "float",
                "id": null
            },
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "The curve is biased towards 0 or 1 based on biasAmt, which is between 0 and 1."
    },
    {
        "kind": "function",
        "id": "AddLookTarget",
        "ret": "void",
        "class": "CAI_BaseActor",
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "float",
                "id": null
            },
            {
                "type": "float",
                "id": null
            },
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Add a potential look target for this actor."
    },
    {
        "kind": "function",
        "id": "AddLookTargetPos",
        "ret": "void",
        "class": "CAI_BaseActor",
        "args": [
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "float",
                "id": null
            },
            {
                "type": "float",
                "id": null
            },
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Add a potential look target position for this actor."
    },
    {
        "kind": "function",
        "id": "AddSleepFlags",
        "ret": "void",
        "class": "CAI_BaseNPC",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Add to the NPC's sleep flags. (see AI_SLEEP_ set of constants)"
    },
    {
        "kind": "function",
        "id": "CapabilitiesAdd",
        "ret": "int",
        "class": "CAI_BaseNPC",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Add capabilities to the NPC."
    },
    {
        "kind": "function",
        "id": "CapabilitiesClear",
        "ret": "void",
        "class": "CAI_BaseNPC",
        "args": null,
        "desc": "Clear capabilities for the NPC."
    },
    {
        "kind": "function",
        "id": "CapabilitiesGet",
        "ret": "int",
        "class": "CAI_BaseNPC",
        "args": null,
        "desc": "Get the capabilities the NPC currently possesses."
    },
    {
        "kind": "function",
        "id": "CapabilitiesRemove",
        "ret": "int",
        "class": "CAI_BaseNPC",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Remove capabilities from the NPC."
    },
    {
        "kind": "function",
        "id": "ClearCondition",
        "ret": "void",
        "class": "CAI_BaseNPC",
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Clear a condition on the NPC."
    },
    {
        "kind": "function",
        "id": "ClearConditionID",
        "ret": "void",
        "class": "CAI_BaseNPC",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Clear a condition on the NPC by ID."
    },
    {
        "kind": "function",
        "id": "ClearSchedule",
        "ret": "void",
        "class": "CAI_BaseNPC",
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Clear the NPC's current schedule for the specified reason."
    },
    {
        "kind": "function",
        "id": "FindEnemyMemory",
        "ret": "handle",
        "class": "CAI_BaseNPC",
        "args": [
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Get information about the NPC's current enemy."
    },
    {
        "kind": "function",
        "id": "GetActivity",
        "ret": "string",
        "class": "CAI_BaseNPC",
        "args": null,
        "desc": "Get the NPC's current activity."
    },
    {
        "kind": "function",
        "id": "GetActivityID",
        "ret": "int",
        "class": "CAI_BaseNPC",
        "args": null,
        "desc": "Get the NPC's current activity ID."
    },
    {
        "kind": "function",
        "id": "GetCine",
        "ret": "handle",
        "class": "CAI_BaseNPC",
        "args": null,
        "desc": "Get the NPC's currently running scripted sequence if it has one."
    },
    {
        "kind": "function",
        "id": "GetEnemy",
        "ret": "handle",
        "class": "CAI_BaseNPC",
        "args": null,
        "desc": "Get the NPC's current enemy."
    },
    {
        "kind": "function",
        "id": "GetEnemyLKP",
        "ret": "Vector",
        "class": "CAI_BaseNPC",
        "args": null,
        "desc": "Get the last known position of the NPC's current enemy."
    },
    {
        "kind": "function",
        "id": "GetExpresser",
        "ret": "handle",
        "class": "CAI_BaseNPC",
        "args": null,
        "desc": "Get a handle for this NPC's expresser."
    },
    {
        "kind": "function",
        "id": "GetHintGroup",
        "ret": "string",
        "class": "CAI_BaseNPC",
        "args": null,
        "desc": "Get the name of the NPC's hint group."
    },
    {
        "kind": "function",
        "id": "GetHintNode",
        "ret": "handle",
        "class": "CAI_BaseNPC",
        "args": null,
        "desc": "Get the NPC's current AI hint."
    },
    {
        "kind": "function",
        "id": "GetLastAttackTime",
        "ret": "float",
        "class": "CAI_BaseNPC",
        "args": null,
        "desc": "Get the last time the NPC has used an attack (e.g. fired a bullet from a gun)."
    },
    {
        "kind": "function",
        "id": "GetLastDamageTime",
        "ret": "float",
        "class": "CAI_BaseNPC",
        "args": null,
        "desc": "Get the last time the NPC has been damaged."
    },
    {
        "kind": "function",
        "id": "GetLastEnemyTime",
        "ret": "float",
        "class": "CAI_BaseNPC",
        "args": null,
        "desc": "Get the last time the NPC has seen an enemy."
    },
    {
        "kind": "function",
        "id": "GetLastPlayerDamageTime",
        "ret": "float",
        "class": "CAI_BaseNPC",
        "args": null,
        "desc": "Get the last time the NPC has been damaged by a player."
    },
    {
        "kind": "function",
        "id": "GetNPCState",
        "ret": "int",
        "class": "CAI_BaseNPC",
        "args": null,
        "desc": "Get the NPC's current state."
    },
    {
        "kind": "function",
        "id": "GetSchedule",
        "ret": "string",
        "class": "CAI_BaseNPC",
        "args": null,
        "desc": "Get the NPC's current schedule."
    },
    {
        "kind": "function",
        "id": "GetScheduleID",
        "ret": "int",
        "class": "CAI_BaseNPC",
        "args": null,
        "desc": "Get the NPC's current schedule ID."
    },
    {
        "kind": "function",
        "id": "GetScriptState",
        "ret": "int",
        "class": "CAI_BaseNPC",
        "args": null,
        "desc": "Get the NPC's current scripted sequence state."
    },
    {
        "kind": "function",
        "id": "GetSleepState",
        "ret": "int",
        "class": "CAI_BaseNPC",
        "args": null,
        "desc": "Get the NPC's sleep state. (see AISS_ set of constants)"
    },
    {
        "kind": "function",
        "id": "GetSquad",
        "ret": "handle",
        "class": "CAI_BaseNPC",
        "args": null,
        "desc": "Get the NPC's squad if it has one."
    },
    {
        "kind": "function",
        "id": "GetTask",
        "ret": "string",
        "class": "CAI_BaseNPC",
        "args": null,
        "desc": "Get the NPC's current task."
    },
    {
        "kind": "function",
        "id": "GetTaskID",
        "ret": "int",
        "class": "CAI_BaseNPC",
        "args": null,
        "desc": "Get the NPC's current task ID."
    },
    {
        "kind": "function",
        "id": "HasCondition",
        "ret": "bool",
        "class": "CAI_BaseNPC",
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Get whether the NPC has a condition."
    },
    {
        "kind": "function",
        "id": "HasConditionID",
        "ret": "bool",
        "class": "CAI_BaseNPC",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Get whether the NPC has a condition ID."
    },
    {
        "kind": "function",
        "id": "HasSleepFlags",
        "ret": "bool",
        "class": "CAI_BaseNPC",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Return true if the NPC has the specified sleep flags. (see AI_SLEEP_ set of constants)"
    },
    {
        "kind": "function",
        "id": "IsCommandable",
        "ret": "bool",
        "class": "CAI_BaseNPC",
        "args": null,
        "desc": "Check if the NPC is commandable."
    },
    {
        "kind": "function",
        "id": "IsInPlayerSquad",
        "ret": "bool",
        "class": "CAI_BaseNPC",
        "args": null,
        "desc": "Check if the NPC is in the player's squad."
    },
    {
        "kind": "function",
        "id": "IsInSquad",
        "ret": "bool",
        "class": "CAI_BaseNPC",
        "args": null,
        "desc": "Returns true if the NPC is in a squad."
    },
    {
        "kind": "function",
        "id": "IsMoving",
        "ret": "bool",
        "class": "CAI_BaseNPC",
        "args": null,
        "desc": "Check if the NPC is moving."
    },
    {
        "kind": "function",
        "id": "NumWeaponsInSquad",
        "ret": "int",
        "class": "CAI_BaseNPC",
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Get the number of weapons in a squad."
    },
    {
        "kind": "function",
        "id": "RemoveSleepFlags",
        "ret": "void",
        "class": "CAI_BaseNPC",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Remove from NPC's sleep flags. (see AI_SLEEP_ set of constants)"
    },
    {
        "kind": "function",
        "id": "ResetActivity",
        "ret": "void",
        "class": "CAI_BaseNPC",
        "args": null,
        "desc": "Reset the NPC's current activity."
    },
    {
        "kind": "function",
        "id": "SetActivity",
        "ret": "void",
        "class": "CAI_BaseNPC",
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Set the NPC's current activity."
    },
    {
        "kind": "function",
        "id": "SetActivityID",
        "ret": "void",
        "class": "CAI_BaseNPC",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Set the NPC's current activity ID."
    },
    {
        "kind": "function",
        "id": "SetCondition",
        "ret": "void",
        "class": "CAI_BaseNPC",
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Set a condition on the NPC."
    },
    {
        "kind": "function",
        "id": "SetConditionID",
        "ret": "void",
        "class": "CAI_BaseNPC",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Set a condition on the NPC by ID."
    },
    {
        "kind": "function",
        "id": "SetEnemy",
        "ret": "void",
        "class": "CAI_BaseNPC",
        "args": [
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Set the NPC's current enemy."
    },
    {
        "kind": "function",
        "id": "SetSchedule",
        "ret": "void",
        "class": "CAI_BaseNPC",
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Set the NPC's current schedule."
    },
    {
        "kind": "function",
        "id": "SetScheduleID",
        "ret": "void",
        "class": "CAI_BaseNPC",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Set the NPC's current schedule ID."
    },
    {
        "kind": "function",
        "id": "SetSleepState",
        "ret": "void",
        "class": "CAI_BaseNPC",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Set the NPC's sleep state. (see AISS_ set of constants)"
    },
    {
        "kind": "function",
        "id": "Sleep",
        "ret": "void",
        "class": "CAI_BaseNPC",
        "args": null,
        "desc": "Puts the NPC into a sleeping state."
    },
    {
        "kind": "function",
        "id": "Wake",
        "ret": "void",
        "class": "CAI_BaseNPC",
        "args": [
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Awakens the NPC if it is currently asleep."
    },
    {
        "kind": "function",
        "id": "BlockSpeechUntil",
        "ret": "void",
        "class": "CAI_Expresser",
        "args": [
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Block speech for a certain amount of time. This is stored in curtime."
    },
    {
        "kind": "function",
        "id": "CanSpeak",
        "ret": "bool",
        "class": "CAI_Expresser",
        "args": null,
        "desc": "Check if the actor can speak."
    },
    {
        "kind": "function",
        "id": "ForceNotSpeaking",
        "ret": "void",
        "class": "CAI_Expresser",
        "args": null,
        "desc": "If the actor is speaking, force the system to recognize them as not speaking."
    },
    {
        "kind": "function",
        "id": "GetVoicePitch",
        "ret": "int",
        "class": "CAI_Expresser",
        "args": null,
        "desc": "Get the actor's voice pitch. Used in sentences."
    },
    {
        "kind": "function",
        "id": "IsSpeaking",
        "ret": "bool",
        "class": "CAI_Expresser",
        "args": null,
        "desc": "Check if the actor is speaking."
    },
    {
        "kind": "function",
        "id": "SetVoicePitch",
        "ret": "void",
        "class": "CAI_Expresser",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Set the actor's voice pitch. Used in sentences."
    },
    {
        "kind": "function",
        "id": "Speak",
        "ret": "bool",
        "class": "CAI_Expresser",
        "args": [
            {
                "type": "string",
                "id": null
            },
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Speak a response concept with the specified modifiers."
    },
    {
        "kind": "function",
        "id": "SpeakAutoGeneratedScene",
        "ret": "bool",
        "class": "CAI_Expresser",
        "args": [
            {
                "type": "string",
                "id": null
            },
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Speak an automatically generated, instanced VCD scene for this sound as though it were played through the Response System. Return whether the scene successfully plays."
    },
    {
        "kind": "function",
        "id": "SpeakRawScene",
        "ret": "bool",
        "class": "CAI_Expresser",
        "args": [
            {
                "type": "string",
                "id": null
            },
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Speak a raw, instanced VCD scene as though it were played through the Response System. Return whether the scene successfully plays."
    },
    {
        "kind": "function",
        "id": "SpeakRawSentence",
        "ret": "int",
        "class": "CAI_Expresser",
        "args": [
            {
                "type": "string",
                "id": null
            },
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Speak a raw sentence as though it were played through the Response System. Return the sentence's index; -1 if not successfully played."
    },
    {
        "kind": "function",
        "id": "IsActive",
        "ret": "bool",
        "class": "CAI_GoalEntity",
        "args": null,
        "desc": "Check if the goal entity is active."
    },
    {
        "kind": "function",
        "id": "NumActors",
        "ret": "int",
        "class": "CAI_GoalEntity",
        "args": null,
        "desc": "Get the number of actors using this goal entity."
    },
    {
        "kind": "function",
        "id": "GetDirection",
        "ret": "Vector",
        "class": "CAI_Hint",
        "args": null,
        "desc": "Get the hint's direction."
    },
    {
        "kind": "function",
        "id": "GetHintActivity",
        "ret": "string",
        "class": "CAI_Hint",
        "args": null,
        "desc": "Get the name of the hint activity."
    },
    {
        "kind": "function",
        "id": "GetHintGroup",
        "ret": "string",
        "class": "CAI_Hint",
        "args": null,
        "desc": "Get the name of the hint's group."
    },
    {
        "kind": "function",
        "id": "GetHintType",
        "ret": "int",
        "class": "CAI_Hint",
        "args": null,
        "desc": "Get the hint's type ID."
    },
    {
        "kind": "function",
        "id": "GetNodeId",
        "ret": "int",
        "class": "CAI_Hint",
        "args": null,
        "desc": "Get the hint's node ID."
    },
    {
        "kind": "function",
        "id": "GetUser",
        "ret": "handle",
        "class": "CAI_Hint",
        "args": null,
        "desc": "Get the hint's current user."
    },
    {
        "kind": "function",
        "id": "IsDisabled",
        "ret": "bool",
        "class": "CAI_Hint",
        "args": null,
        "desc": "Check if the hint is disabled."
    },
    {
        "kind": "function",
        "id": "IsLocked",
        "ret": "bool",
        "class": "CAI_Hint",
        "args": null,
        "desc": "Check if the hint is locked."
    },
    {
        "kind": "function",
        "id": "Yaw",
        "ret": "float",
        "class": "CAI_Hint",
        "args": null,
        "desc": "Get the hint's yaw."
    },
    {
        "kind": "function",
        "id": "AddToSquad",
        "ret": "void",
        "class": "CAI_Squad",
        "args": [
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Adds a NPC to the squad."
    },
    {
        "kind": "function",
        "id": "GetAnyMember",
        "ret": "handle",
        "class": "CAI_Squad",
        "args": null,
        "desc": "Randomly get any one of the squad's members."
    },
    {
        "kind": "function",
        "id": "GetFirstMember",
        "ret": "handle",
        "class": "CAI_Squad",
        "args": [
            {
                "type": "bool",
                "id": null
            }
        ],
        "desc": "Get the squad's first member. The parameter is for whether to ignore silent members (see CAI_Squad::IsSilentMember() for more info)."
    },
    {
        "kind": "function",
        "id": "GetLeader",
        "ret": "handle",
        "class": "CAI_Squad",
        "args": null,
        "desc": "Get the squad's leader."
    },
    {
        "kind": "function",
        "id": "GetMember",
        "ret": "handle",
        "class": "CAI_Squad",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Get one of the squad's members by their index."
    },
    {
        "kind": "function",
        "id": "GetName",
        "ret": "string",
        "class": "CAI_Squad",
        "args": null,
        "desc": "Get the squad's name."
    },
    {
        "kind": "function",
        "id": "GetSquadData",
        "ret": "string",
        "class": "CAI_Squad",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Get the squad data in the specified slot."
    },
    {
        "kind": "function",
        "id": "GetSquadIndex",
        "ret": "int",
        "class": "CAI_Squad",
        "args": [
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Get the index of the specified NPC in the squad."
    },
    {
        "kind": "function",
        "id": "GetSquadMemberNearestTo",
        "ret": "handle",
        "class": "CAI_Squad",
        "args": [
            {
                "type": "Vector",
                "id": null
            }
        ],
        "desc": "Get the squad member nearest to a point."
    },
    {
        "kind": "function",
        "id": "GetVisibleSquadMembers",
        "ret": "int",
        "class": "CAI_Squad",
        "args": [
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Get the number of squad members visible to the specified member."
    },
    {
        "kind": "function",
        "id": "IsLeader",
        "ret": "bool",
        "class": "CAI_Squad",
        "args": [
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Returns true if the specified NPC is the squad's leader."
    },
    {
        "kind": "function",
        "id": "IsMember",
        "ret": "bool",
        "class": "CAI_Squad",
        "args": [
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Returns true if the specified NPC is a member of the squad."
    },
    {
        "kind": "function",
        "id": "IsSilentMember",
        "ret": "bool",
        "class": "CAI_Squad",
        "args": [
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Returns true if the specified NPC is a \"silent squad member\", which means it's only in squads for enemy information purposes and does not actually participate in any tactics. For example, this is used for npc_enemyfinder and vital allies (e.g. Alyx) in the player's squad. Please note that this does not check if the NPC is in the squad first."
    },
    {
        "kind": "function",
        "id": "NearestSquadMember",
        "ret": "handle",
        "class": "CAI_Squad",
        "args": [
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Get the squad member nearest to the specified member."
    },
    {
        "kind": "function",
        "id": "NumMembers",
        "ret": "int",
        "class": "CAI_Squad",
        "args": [
            {
                "type": "bool",
                "id": null
            }
        ],
        "desc": "Get the squad's number of members. The parameter is for whether to ignore silent members (see CAI_Squad::IsSilentMember() for more info)."
    },
    {
        "kind": "function",
        "id": "RemoveFromSquad",
        "ret": "void",
        "class": "CAI_Squad",
        "args": [
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Removes a NPC from the squad."
    },
    {
        "kind": "function",
        "id": "SetSquadData",
        "ret": "void",
        "class": "CAI_Squad",
        "args": [
            {
                "type": "int",
                "id": null
            },
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Set the squad data in the specified slot."
    },
    {
        "kind": "function",
        "id": "SquadMemberInRange",
        "ret": "handle",
        "class": "CAI_Squad",
        "args": [
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Get the first squad member found around the specified position in the specified range."
    },
    {
        "kind": "function",
        "id": "UpdateEnemyMemory",
        "ret": "void",
        "class": "CAI_Squad",
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            }
        ],
        "desc": "Updates the squad's memory of an enemy. The first parameter is the updater, the second parameter is the enemy, and the third parameter is the position."
    },
    {
        "kind": "function",
        "id": "FindCreateSquad",
        "ret": "handle",
        "class": "CAI_SquadManager",
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Find the specified squad in the squad list or create it if it doesn't exist."
    },
    {
        "kind": "function",
        "id": "FindSquad",
        "ret": "handle",
        "class": "CAI_SquadManager",
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Find the specified squad in the squad list. Returns null if none found."
    },
    {
        "kind": "function",
        "id": "GetFirstSquad",
        "ret": "handle",
        "class": "CAI_SquadManager",
        "args": null,
        "desc": "Get the first squad in the squad list."
    },
    {
        "kind": "function",
        "id": "GetNextSquad",
        "ret": "handle",
        "class": "CAI_SquadManager",
        "args": [
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Get the next squad in the squad list starting from the specified squad."
    },
    {
        "kind": "function",
        "id": "NumSquads",
        "ret": "int",
        "class": "CAI_SquadManager",
        "args": null,
        "desc": "Get the number of squads in the list."
    },
    {
        "kind": "function",
        "id": "DamageForce",
        "ret": "float",
        "class": "CAmmoDef",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Gets the amount of force this ammo type deals."
    },
    {
        "kind": "function",
        "id": "DamageType",
        "ret": "int",
        "class": "CAmmoDef",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Gets the type of damage this ammo type deals."
    },
    {
        "kind": "function",
        "id": "Flags",
        "ret": "int",
        "class": "CAmmoDef",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Gets the flags this ammo type uses."
    },
    {
        "kind": "function",
        "id": "GetNumAmmoTypes",
        "ret": "int",
        "class": "CAmmoDef",
        "args": null,
        "desc": "Gets the number of ammo types which currently exist."
    },
    {
        "kind": "function",
        "id": "Index",
        "ret": "int",
        "class": "CAmmoDef",
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Gets the index of the specified ammo type name."
    },
    {
        "kind": "function",
        "id": "MaxCarry",
        "ret": "int",
        "class": "CAmmoDef",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Gets the maximum amount of this ammo type which players should be able to carry."
    },
    {
        "kind": "function",
        "id": "MaxSplashSize",
        "ret": "int",
        "class": "CAmmoDef",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Gets the maximum size of water splashes caused by impacts from this ammo type."
    },
    {
        "kind": "function",
        "id": "MinSplashSize",
        "ret": "int",
        "class": "CAmmoDef",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Gets the minimum size of water splashes caused by impacts from this ammo type."
    },
    {
        "kind": "function",
        "id": "NPCDamage",
        "ret": "int",
        "class": "CAmmoDef",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Gets the damage NPCs deal for the specified ammo type."
    },
    {
        "kind": "function",
        "id": "PlrDamage",
        "ret": "int",
        "class": "CAmmoDef",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Gets the damage players deal for the specified ammo type."
    },
    {
        "kind": "function",
        "id": "TracerType",
        "ret": "int",
        "class": "CAmmoDef",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Gets the type of tracer this ammo type uses."
    },
    {
        "kind": "function",
        "id": "BecomeRagdollOnClient",
        "ret": "bool",
        "class": "CBaseAnimating",
        "args": [
            {
                "type": "Vector",
                "id": null
            }
        ],
        "desc": null
    },
    {
        "kind": "function",
        "id": "CanBecomeRagdoll",
        "ret": "bool",
        "class": "CBaseAnimating",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "Dissolve",
        "ret": "bool",
        "class": "CBaseAnimating",
        "args": [
            {
                "type": "string",
                "id": null
            },
            {
                "type": "float",
                "id": null
            },
            {
                "type": "bool",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Use 'sprites/blueglow1.vmt' for the default material, Time() for the default start time, false for npcOnly if you don't want it to check if the entity is a NPC first, 0 for the default dissolve type, Vector(0,0,0) for the default dissolver origin, and 0 for the default magnitude."
    },
    {
        "kind": "function",
        "id": "FindBodygroupByName",
        "ret": "int",
        "class": "CBaseAnimating",
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Finds a bodygroup by name"
    },
    {
        "kind": "function",
        "id": "GetAttachmentAngles",
        "ret": "Vector",
        "class": "CBaseAnimating",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Get the attachement id's angles as a p,y,r vector"
    },
    {
        "kind": "function",
        "id": "GetAttachmentMatrix",
        "ret": "handle",
        "class": "CBaseAnimating",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Get the attachement id's matrix transform"
    },
    {
        "kind": "function",
        "id": "GetAttachmentOrigin",
        "ret": "Vector",
        "class": "CBaseAnimating",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Get the attachement id's origin vector"
    },
    {
        "kind": "function",
        "id": "GetBodygroup",
        "ret": "int",
        "class": "CBaseAnimating",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Gets a bodygroup"
    },
    {
        "kind": "function",
        "id": "GetBodygroupCount",
        "ret": "int",
        "class": "CBaseAnimating",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Gets the number of models in a bodygroup"
    },
    {
        "kind": "function",
        "id": "GetBodygroupName",
        "ret": "string",
        "class": "CBaseAnimating",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Gets a bodygroup name"
    },
    {
        "kind": "function",
        "id": "GetBoneTransform",
        "ret": "void",
        "class": "CBaseAnimating",
        "args": [
            {
                "type": "int",
                "id": null
            },
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Get the transform for the specified bone"
    },
    {
        "kind": "function",
        "id": "GetCycle",
        "ret": "float",
        "class": "CBaseAnimating",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "GetNumBodyGroups",
        "ret": "int",
        "class": "CBaseAnimating",
        "args": null,
        "desc": "Gets the number of bodygroups"
    },
    {
        "kind": "function",
        "id": "GetNumBones",
        "ret": "int",
        "class": "CBaseAnimating",
        "args": null,
        "desc": "Get the number of bones"
    },
    {
        "kind": "function",
        "id": "GetPhysicsBone",
        "ret": "int",
        "class": "CBaseAnimating",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Get physics bone from bone index"
    },
    {
        "kind": "function",
        "id": "GetPlaybackRate",
        "ret": "float",
        "class": "CBaseAnimating",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "GetPoseParameter",
        "ret": "float",
        "class": "CBaseAnimating",
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Get the specified pose parameter's value"
    },
    {
        "kind": "function",
        "id": "GetSequence",
        "ret": "int",
        "class": "CBaseAnimating",
        "args": null,
        "desc": "Gets the current sequence"
    },
    {
        "kind": "function",
        "id": "GetSequenceActivity",
        "ret": "int",
        "class": "CBaseAnimating",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Gets the activity ID of the specified sequence index"
    },
    {
        "kind": "function",
        "id": "GetSequenceActivityName",
        "ret": "string",
        "class": "CBaseAnimating",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Gets the activity name of the specified sequence index"
    },
    {
        "kind": "function",
        "id": "GetSequenceKeyValues",
        "ret": "handle",
        "class": "CBaseAnimating",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Get a KeyValue class instance on the specified sequence. WARNING: This uses the same KeyValue pointer as GetModelKeyValues!"
    },
    {
        "kind": "function",
        "id": "GetSequenceMoveDist",
        "ret": "float",
        "class": "CBaseAnimating",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Gets the move distance of the specified sequence"
    },
    {
        "kind": "function",
        "id": "GetSequenceMoveYaw",
        "ret": "float",
        "class": "CBaseAnimating",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Gets the move yaw of the specified sequence"
    },
    {
        "kind": "function",
        "id": "GetSequenceName",
        "ret": "string",
        "class": "CBaseAnimating",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Gets the name of the specified sequence index"
    },
    {
        "kind": "function",
        "id": "GetSkin",
        "ret": "int",
        "class": "CBaseAnimating",
        "args": null,
        "desc": "Gets the model's skin"
    },
    {
        "kind": "function",
        "id": "Ignite",
        "ret": "void",
        "class": "CBaseAnimating",
        "args": [
            {
                "type": "float",
                "id": null
            },
            {
                "type": "bool",
                "id": null
            },
            {
                "type": "float",
                "id": null
            },
            {
                "type": "bool",
                "id": null
            }
        ],
        "desc": "'NPCOnly' only lets this fall through if the entity is a NPC and 'CalledByLevelDesigner' determines whether to treat this like the Ignite input or just an internal ignition call."
    },
    {
        "kind": "function",
        "id": "IsRagdoll",
        "ret": "bool",
        "class": "CBaseAnimating",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "IsSequenceFinished",
        "ret": "bool",
        "class": "CBaseAnimating",
        "args": null,
        "desc": "Ask whether the main sequence is done playing"
    },
    {
        "kind": "function",
        "id": "LookupActivity",
        "ret": "int",
        "class": "CBaseAnimating",
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Gets the ID of the specified activity name"
    },
    {
        "kind": "function",
        "id": "LookupAttachment",
        "ret": "int",
        "class": "CBaseAnimating",
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Get the named attachement id"
    },
    {
        "kind": "function",
        "id": "LookupBone",
        "ret": "int",
        "class": "CBaseAnimating",
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Get the named bone id"
    },
    {
        "kind": "function",
        "id": "LookupSequence",
        "ret": "int",
        "class": "CBaseAnimating",
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Gets the index of the specified sequence name"
    },
    {
        "kind": "function",
        "id": "ResetSequenceInfo",
        "ret": "void",
        "class": "CBaseAnimating",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "Scorch",
        "ret": "void",
        "class": "CBaseAnimating",
        "args": [
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Makes the entity darker from scorching"
    },
    {
        "kind": "function",
        "id": "SelectHeaviestSequence",
        "ret": "int",
        "class": "CBaseAnimating",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Selects the sequence with the heaviest weight for the specified activity ID"
    },
    {
        "kind": "function",
        "id": "SelectWeightedSequence",
        "ret": "int",
        "class": "CBaseAnimating",
        "args": [
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Selects a sequence for the specified activity ID"
    },
    {
        "kind": "function",
        "id": "SequenceDuration",
        "ret": "float",
        "class": "CBaseAnimating",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Get the specified sequence duration"
    },
    {
        "kind": "function",
        "id": "SequenceHasMovement",
        "ret": "bool",
        "class": "CBaseAnimating",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Checks if the specified sequence has movement"
    },
    {
        "kind": "function",
        "id": "SequenceLoops",
        "ret": "bool",
        "class": "CBaseAnimating",
        "args": null,
        "desc": "Does the current sequence loop?"
    },
    {
        "kind": "function",
        "id": "SetBodygroup",
        "ret": "void",
        "class": "CBaseAnimating",
        "args": [
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Sets a bodygroup"
    },
    {
        "kind": "function",
        "id": "SetCycle",
        "ret": "void",
        "class": "CBaseAnimating",
        "args": [
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": null
    },
    {
        "kind": "function",
        "id": "SetPlaybackRate",
        "ret": "void",
        "class": "CBaseAnimating",
        "args": [
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": null
    },
    {
        "kind": "function",
        "id": "SetPoseParameter",
        "ret": "void",
        "class": "CBaseAnimating",
        "args": [
            {
                "type": "string",
                "id": null
            },
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Set the specified pose parameter to the specified value"
    },
    {
        "kind": "function",
        "id": "SetSequence",
        "ret": "void",
        "class": "CBaseAnimating",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Sets the current sequence"
    },
    {
        "kind": "function",
        "id": "SetSkin",
        "ret": "void",
        "class": "CBaseAnimating",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Sets the model's skin"
    },
    {
        "kind": "function",
        "id": "StudioFrameAdvance",
        "ret": "void",
        "class": "CBaseAnimating",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "BodyAngles",
        "ret": "Vector",
        "class": "CBaseCombatCharacter",
        "args": null,
        "desc": "Get the body's angles."
    },
    {
        "kind": "function",
        "id": "BodyDirection2D",
        "ret": "Vector",
        "class": "CBaseCombatCharacter",
        "args": null,
        "desc": "Get the body's 2D direction."
    },
    {
        "kind": "function",
        "id": "BodyDirection3D",
        "ret": "Vector",
        "class": "CBaseCombatCharacter",
        "args": null,
        "desc": "Get the body's 3D direction."
    },
    {
        "kind": "function",
        "id": "DoMuzzleFlash",
        "ret": "void",
        "class": "CBaseCombatCharacter",
        "args": null,
        "desc": "Does a muzzle flash."
    },
    {
        "kind": "function",
        "id": "DropAllWeapons",
        "ret": "void",
        "class": "CBaseCombatCharacter",
        "args": [
            {
                "type": "bool",
                "id": null
            }
        ],
        "desc": "Make the character drop all of its weapons."
    },
    {
        "kind": "function",
        "id": "DropWeapon",
        "ret": "void",
        "class": "CBaseCombatCharacter",
        "args": [
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Make the character drop the specified weapon entity if they own it."
    },
    {
        "kind": "function",
        "id": "EntInAimCone",
        "ret": "bool",
        "class": "CBaseCombatCharacter",
        "args": [
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Check if the specified entity is in the character's aim cone."
    },
    {
        "kind": "function",
        "id": "EntInViewCone",
        "ret": "bool",
        "class": "CBaseCombatCharacter",
        "args": [
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Check if the specified entity is in the character's viewcone."
    },
    {
        "kind": "function",
        "id": "EquipWeapon",
        "ret": "void",
        "class": "CBaseCombatCharacter",
        "args": [
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Make the character equip the specified weapon entity. If they don't already own the weapon, they will acquire it instantly."
    },
    {
        "kind": "function",
        "id": "EyeDirection2D",
        "ret": "Vector",
        "class": "CBaseCombatCharacter",
        "args": null,
        "desc": "Get the eyes' 2D direction."
    },
    {
        "kind": "function",
        "id": "EyeDirection3D",
        "ret": "Vector",
        "class": "CBaseCombatCharacter",
        "args": null,
        "desc": "Get the eyes' 3D direction."
    },
    {
        "kind": "function",
        "id": "FindWeapon",
        "ret": "handle",
        "class": "CBaseCombatCharacter",
        "args": [
            {
                "type": "string",
                "id": null
            },
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Find a specific weapon in the character's inventory by its classname."
    },
    {
        "kind": "function",
        "id": "GetActiveWeapon",
        "ret": "handle",
        "class": "CBaseCombatCharacter",
        "args": null,
        "desc": "Get the character's active weapon entity."
    },
    {
        "kind": "function",
        "id": "GetAllWeapons",
        "ret": "void",
        "class": "CBaseCombatCharacter",
        "args": [
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Get the character's weapon inventory."
    },
    {
        "kind": "function",
        "id": "GetAmmoCount",
        "ret": "int",
        "class": "CBaseCombatCharacter",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Get the ammo count of the specified ammo type."
    },
    {
        "kind": "function",
        "id": "GetAttackSpread",
        "ret": "Vector",
        "class": "CBaseCombatCharacter",
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Get the attack spread."
    },
    {
        "kind": "function",
        "id": "GetCurrentWeaponProficiency",
        "ret": "int",
        "class": "CBaseCombatCharacter",
        "args": null,
        "desc": "Get the character's current proficiency (accuracy) with their current weapon."
    },
    {
        "kind": "function",
        "id": "GetRelationPriority",
        "ret": "int",
        "class": "CBaseCombatCharacter",
        "args": [
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Get a character's relationship priority for a specific entity."
    },
    {
        "kind": "function",
        "id": "GetRelationship",
        "ret": "int",
        "class": "CBaseCombatCharacter",
        "args": [
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Get a character's relationship to a specific entity."
    },
    {
        "kind": "function",
        "id": "GetSpreadBias",
        "ret": "float",
        "class": "CBaseCombatCharacter",
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Get the spread bias."
    },
    {
        "kind": "function",
        "id": "GetVehicleEntity",
        "ret": "handle",
        "class": "CBaseCombatCharacter",
        "args": null,
        "desc": "Get the entity for a character's current vehicle if they're in one."
    },
    {
        "kind": "function",
        "id": "GetWeapon",
        "ret": "handle",
        "class": "CBaseCombatCharacter",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Get a specific weapon in the character's inventory."
    },
    {
        "kind": "function",
        "id": "HeadDirection2D",
        "ret": "Vector",
        "class": "CBaseCombatCharacter",
        "args": null,
        "desc": "Get the head's 2D direction."
    },
    {
        "kind": "function",
        "id": "HeadDirection3D",
        "ret": "Vector",
        "class": "CBaseCombatCharacter",
        "args": null,
        "desc": "Get the head's 3D direction."
    },
    {
        "kind": "function",
        "id": "InAimCone",
        "ret": "bool",
        "class": "CBaseCombatCharacter",
        "args": [
            {
                "type": "Vector",
                "id": null
            }
        ],
        "desc": "Check if the specified position is in the character's aim cone."
    },
    {
        "kind": "function",
        "id": "InViewCone",
        "ret": "bool",
        "class": "CBaseCombatCharacter",
        "args": [
            {
                "type": "Vector",
                "id": null
            }
        ],
        "desc": "Check if the specified position is in the character's viewcone."
    },
    {
        "kind": "function",
        "id": "SetAmmoCount",
        "ret": "void",
        "class": "CBaseCombatCharacter",
        "args": [
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Set the ammo count of the specified ammo type."
    },
    {
        "kind": "function",
        "id": "SetRelationship",
        "ret": "void",
        "class": "CBaseCombatCharacter",
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Set a character's relationship with a specific entity."
    },
    {
        "kind": "function",
        "id": "ShootPosition",
        "ret": "Vector",
        "class": "CBaseCombatCharacter",
        "args": null,
        "desc": "Get the character's shoot position."
    },
    {
        "kind": "function",
        "id": "WeaponCount",
        "ret": "int",
        "class": "CBaseCombatCharacter",
        "args": null,
        "desc": "Get the number of weapons a character possesses."
    },
    {
        "kind": "function",
        "id": "AddViewKick",
        "ret": "void",
        "class": "CBaseCombatWeapon",
        "args": null,
        "desc": "Applies the weapon's view kick."
    },
    {
        "kind": "function",
        "id": "AltFiresUnderwater",
        "ret": "bool",
        "class": "CBaseCombatWeapon",
        "args": null,
        "desc": "Returns true if this weapon can alt-fire underwater."
    },
    {
        "kind": "function",
        "id": "CanBePickedUpByNPCs",
        "ret": "bool",
        "class": "CBaseCombatWeapon",
        "args": null,
        "desc": "Check if the weapon can be picked up by NPCs."
    },
    {
        "kind": "function",
        "id": "CapabilitiesGet",
        "ret": "int",
        "class": "CBaseCombatWeapon",
        "args": null,
        "desc": "Get the capabilities the weapon currently possesses."
    },
    {
        "kind": "function",
        "id": "Clip1",
        "ret": "int",
        "class": "CBaseCombatWeapon",
        "args": null,
        "desc": "Get the weapon's current primary ammo."
    },
    {
        "kind": "function",
        "id": "Clip2",
        "ret": "int",
        "class": "CBaseCombatWeapon",
        "args": null,
        "desc": "Get the weapon's current secondary ammo."
    },
    {
        "kind": "function",
        "id": "FireDuration",
        "ret": "float",
        "class": "CBaseCombatWeapon",
        "args": null,
        "desc": "Returns the amount of time that the weapon has sustained firing."
    },
    {
        "kind": "function",
        "id": "FiresUnderwater",
        "ret": "bool",
        "class": "CBaseCombatWeapon",
        "args": null,
        "desc": "Returns true if this weapon can fire underwater."
    },
    {
        "kind": "function",
        "id": "GetBulletSpread",
        "ret": "Vector",
        "class": "CBaseCombatWeapon",
        "args": null,
        "desc": "Returns the weapon's default bullet spread."
    },
    {
        "kind": "function",
        "id": "GetBulletSpreadForProficiency",
        "ret": "Vector",
        "class": "CBaseCombatWeapon",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Returns the weapon's bullet spread for the specified proficiency level."
    },
    {
        "kind": "function",
        "id": "GetDefaultAnimSpeed",
        "ret": "float",
        "class": "CBaseCombatWeapon",
        "args": null,
        "desc": "Returns the weapon's default animation speed."
    },
    {
        "kind": "function",
        "id": "GetDefaultClip1",
        "ret": "int",
        "class": "CBaseCombatWeapon",
        "args": null,
        "desc": "Get the weapon's default primary ammo."
    },
    {
        "kind": "function",
        "id": "GetDefaultClip2",
        "ret": "int",
        "class": "CBaseCombatWeapon",
        "args": null,
        "desc": "Get the weapon's default secondary ammo."
    },
    {
        "kind": "function",
        "id": "GetDrawActivity",
        "ret": "int",
        "class": "CBaseCombatWeapon",
        "args": null,
        "desc": "Returns the weapon's draw activity."
    },
    {
        "kind": "function",
        "id": "GetFireRate",
        "ret": "float",
        "class": "CBaseCombatWeapon",
        "args": null,
        "desc": "Get the weapon's firing rate."
    },
    {
        "kind": "function",
        "id": "GetMaxClip1",
        "ret": "int",
        "class": "CBaseCombatWeapon",
        "args": null,
        "desc": "Get the weapon's maximum primary ammo."
    },
    {
        "kind": "function",
        "id": "GetMaxClip2",
        "ret": "int",
        "class": "CBaseCombatWeapon",
        "args": null,
        "desc": "Get the weapon's maximum secondary ammo."
    },
    {
        "kind": "function",
        "id": "GetOwner",
        "ret": "handle",
        "class": "CBaseCombatWeapon",
        "args": null,
        "desc": "Get the weapon's owner."
    },
    {
        "kind": "function",
        "id": "GetPrimaryAmmoType",
        "ret": "int",
        "class": "CBaseCombatWeapon",
        "args": null,
        "desc": "Get the weapon's primary ammo type."
    },
    {
        "kind": "function",
        "id": "GetPrimaryAttackActivity",
        "ret": "int",
        "class": "CBaseCombatWeapon",
        "args": null,
        "desc": "Returns the weapon's primary attack activity."
    },
    {
        "kind": "function",
        "id": "GetPrintName",
        "ret": "string",
        "class": "CBaseCombatWeapon",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "GetSecondaryAmmoType",
        "ret": "int",
        "class": "CBaseCombatWeapon",
        "args": null,
        "desc": "Get the weapon's secondary ammo type."
    },
    {
        "kind": "function",
        "id": "GetSecondaryAttackActivity",
        "ret": "int",
        "class": "CBaseCombatWeapon",
        "args": null,
        "desc": "Returns the weapon's secondary attack activity."
    },
    {
        "kind": "function",
        "id": "GetSubType",
        "ret": "int",
        "class": "CBaseCombatWeapon",
        "args": null,
        "desc": "Get the weapon's subtype."
    },
    {
        "kind": "function",
        "id": "GetViewModel",
        "ret": "string",
        "class": "CBaseCombatWeapon",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Get the weapon's view model."
    },
    {
        "kind": "function",
        "id": "GetViewModelSequenceDuration",
        "ret": "float",
        "class": "CBaseCombatWeapon",
        "args": null,
        "desc": "Gets the sequence duration of the current view model animation."
    },
    {
        "kind": "function",
        "id": "GetWeaponIdleTime",
        "ret": "float",
        "class": "CBaseCombatWeapon",
        "args": null,
        "desc": "Returns the next time WeaponIdle() will run."
    },
    {
        "kind": "function",
        "id": "GetWeight",
        "ret": "int",
        "class": "CBaseCombatWeapon",
        "args": null,
        "desc": "Get the weapon's weight."
    },
    {
        "kind": "function",
        "id": "GetWorldModel",
        "ret": "string",
        "class": "CBaseCombatWeapon",
        "args": null,
        "desc": "Get the weapon's world model."
    },
    {
        "kind": "function",
        "id": "GiveDefaultAmmo",
        "ret": "void",
        "class": "CBaseCombatWeapon",
        "args": null,
        "desc": "Fill the weapon back up to default ammo."
    },
    {
        "kind": "function",
        "id": "HasAnyAmmo",
        "ret": "bool",
        "class": "CBaseCombatWeapon",
        "args": null,
        "desc": "Check if the weapon currently has ammo or doesn't need ammo."
    },
    {
        "kind": "function",
        "id": "HasPrimaryAmmo",
        "ret": "bool",
        "class": "CBaseCombatWeapon",
        "args": null,
        "desc": "Check if the weapon currently has ammo or doesn't need primary ammo."
    },
    {
        "kind": "function",
        "id": "HasSecondaryAmmo",
        "ret": "bool",
        "class": "CBaseCombatWeapon",
        "args": null,
        "desc": "Check if the weapon currently has ammo or doesn't need secondary ammo."
    },
    {
        "kind": "function",
        "id": "HasWeaponIdleTimeElapsed",
        "ret": "bool",
        "class": "CBaseCombatWeapon",
        "args": null,
        "desc": "Returns true if the idle time has elapsed."
    },
    {
        "kind": "function",
        "id": "IsViewModelSequenceFinished",
        "ret": "bool",
        "class": "CBaseCombatWeapon",
        "args": null,
        "desc": "Returns true if the current view model animation is finished."
    },
    {
        "kind": "function",
        "id": "MinRange1",
        "ret": "float",
        "class": "CBaseCombatWeapon",
        "args": null,
        "desc": "Returns the closest this weapon can be used."
    },
    {
        "kind": "function",
        "id": "MinRange2",
        "ret": "float",
        "class": "CBaseCombatWeapon",
        "args": null,
        "desc": "Returns the closest this weapon can be used."
    },
    {
        "kind": "function",
        "id": "NextPrimaryAttack",
        "ret": "float",
        "class": "CBaseCombatWeapon",
        "args": null,
        "desc": "Returns the next time PrimaryAttack() will run when the player is pressing +ATTACK."
    },
    {
        "kind": "function",
        "id": "NextSecondaryAttack",
        "ret": "float",
        "class": "CBaseCombatWeapon",
        "args": null,
        "desc": "Returns the next time SecondaryAttack() will run when the player is pressing +ATTACK2."
    },
    {
        "kind": "function",
        "id": "ReloadsSingly",
        "ret": "bool",
        "class": "CBaseCombatWeapon",
        "args": null,
        "desc": "Returns true if this weapon reloads 1 round at a time."
    },
    {
        "kind": "function",
        "id": "SendWeaponAnim",
        "ret": "bool",
        "class": "CBaseCombatWeapon",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Sends a weapon animation."
    },
    {
        "kind": "function",
        "id": "SetAltFiresUnderwater",
        "ret": "void",
        "class": "CBaseCombatWeapon",
        "args": [
            {
                "type": "bool",
                "id": null
            }
        ],
        "desc": "Sets whether this weapon can alt-fire underwater."
    },
    {
        "kind": "function",
        "id": "SetClip1",
        "ret": "void",
        "class": "CBaseCombatWeapon",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Set the weapon's current primary ammo."
    },
    {
        "kind": "function",
        "id": "SetClip2",
        "ret": "void",
        "class": "CBaseCombatWeapon",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Set the weapon's current secondary ammo."
    },
    {
        "kind": "function",
        "id": "SetFireDuration",
        "ret": "void",
        "class": "CBaseCombatWeapon",
        "args": [
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Sets the amount of time that the weapon has sustained firing."
    },
    {
        "kind": "function",
        "id": "SetFiresUnderwater",
        "ret": "void",
        "class": "CBaseCombatWeapon",
        "args": [
            {
                "type": "bool",
                "id": null
            }
        ],
        "desc": "Sets whether this weapon can fire underwater."
    },
    {
        "kind": "function",
        "id": "SetMinRange1",
        "ret": "void",
        "class": "CBaseCombatWeapon",
        "args": [
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Sets the closest this weapon can be used."
    },
    {
        "kind": "function",
        "id": "SetMinRange2",
        "ret": "void",
        "class": "CBaseCombatWeapon",
        "args": [
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Sets the closest this weapon can be used."
    },
    {
        "kind": "function",
        "id": "SetNextPrimaryAttack",
        "ret": "void",
        "class": "CBaseCombatWeapon",
        "args": [
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Sets the next time PrimaryAttack() will run when the player is pressing +ATTACK."
    },
    {
        "kind": "function",
        "id": "SetNextSecondaryAttack",
        "ret": "void",
        "class": "CBaseCombatWeapon",
        "args": [
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Sets the next time SecondaryAttack() will run when the player is pressing +ATTACK2."
    },
    {
        "kind": "function",
        "id": "SetOwner",
        "ret": "void",
        "class": "CBaseCombatWeapon",
        "args": [
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Set the weapon's owner."
    },
    {
        "kind": "function",
        "id": "SetReloadsSingly",
        "ret": "void",
        "class": "CBaseCombatWeapon",
        "args": [
            {
                "type": "bool",
                "id": null
            }
        ],
        "desc": "Sets whether this weapon reloads 1 round at a time."
    },
    {
        "kind": "function",
        "id": "SetSubType",
        "ret": "void",
        "class": "CBaseCombatWeapon",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Set the weapon's subtype."
    },
    {
        "kind": "function",
        "id": "SetWeaponIdleTime",
        "ret": "void",
        "class": "CBaseCombatWeapon",
        "args": [
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Sets the next time WeaponIdle() will run."
    },
    {
        "kind": "function",
        "id": "UsesClipsForAmmo1",
        "ret": "bool",
        "class": "CBaseCombatWeapon",
        "args": null,
        "desc": "Check if the weapon uses clips for primary ammo."
    },
    {
        "kind": "function",
        "id": "UsesClipsForAmmo2",
        "ret": "bool",
        "class": "CBaseCombatWeapon",
        "args": null,
        "desc": "Check if the weapon uses clips for secondary ammo."
    },
    {
        "kind": "function",
        "id": "UsesPrimaryAmmo",
        "ret": "bool",
        "class": "CBaseCombatWeapon",
        "args": null,
        "desc": "Check if the weapon uses primary ammo."
    },
    {
        "kind": "function",
        "id": "UsesSecondaryAmmo",
        "ret": "bool",
        "class": "CBaseCombatWeapon",
        "args": null,
        "desc": "Check if the weapon uses secondary ammo."
    },
    {
        "kind": "function",
        "id": "WeaponSound",
        "ret": "void",
        "class": "CBaseCombatWeapon",
        "args": [
            {
                "type": "int",
                "id": null
            },
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Plays one of the weapon's sounds."
    },
    {
        "kind": "function",
        "id": "AcceptInput",
        "ret": "bool",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "string",
                "id": null
            },
            {
                "type": "string",
                "id": null
            },
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": null
    },
    {
        "kind": "function",
        "id": "Activate",
        "ret": "void",
        "class": "CBaseEntity",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "AddEFlags",
        "ret": "void",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Add Eflags"
    },
    {
        "kind": "function",
        "id": "AddEffects",
        "ret": "void",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Add effect(s)"
    },
    {
        "kind": "function",
        "id": "AddFlag",
        "ret": "void",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Add flag"
    },
    {
        "kind": "function",
        "id": "AddOutput",
        "ret": "bool",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "string",
                "id": null
            },
            {
                "type": "string",
                "id": null
            },
            {
                "type": "string",
                "id": null
            },
            {
                "type": "string",
                "id": null
            },
            {
                "type": "float",
                "id": null
            },
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Add an output"
    },
    {
        "kind": "function",
        "id": "AddSolidFlags",
        "ret": "void",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Add solid flags"
    },
    {
        "kind": "function",
        "id": "AddSpawnFlags",
        "ret": "void",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Add spawnflag(s)"
    },
    {
        "kind": "function",
        "id": "ApplyAbsVelocityImpulse",
        "ret": "void",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "Vector",
                "id": null
            }
        ],
        "desc": null
    },
    {
        "kind": "function",
        "id": "ApplyLocalAngularVelocityImpulse",
        "ret": "void",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "Vector",
                "id": null
            }
        ],
        "desc": null
    },
    {
        "kind": "function",
        "id": "BodyTarget",
        "ret": "Vector",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "bool",
                "id": null
            }
        ],
        "desc": null
    },
    {
        "kind": "function",
        "id": "Classify",
        "ret": "int",
        "class": "CBaseEntity",
        "args": null,
        "desc": "Get Class_T class ID (corresponds to the CLASS_ set of constants)"
    },
    {
        "kind": "function",
        "id": "ClearEffects",
        "ret": "void",
        "class": "CBaseEntity",
        "args": null,
        "desc": "Clear effect(s)"
    },
    {
        "kind": "function",
        "id": "ClearSpawnFlags",
        "ret": "void",
        "class": "CBaseEntity",
        "args": null,
        "desc": "Clear spawnflag(s)"
    },
    {
        "kind": "function",
        "id": "ConnectOutput",
        "ret": "void",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "string",
                "id": null
            },
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Adds an I/O connection that will call the named function when the specified output fires"
    },
    {
        "kind": "function",
        "id": "Destroy",
        "ret": "void",
        "class": "CBaseEntity",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "DisconnectOutput",
        "ret": "void",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "string",
                "id": null
            },
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Removes a connected script function from an I/O event."
    },
    {
        "kind": "function",
        "id": "EmitSound",
        "ret": "void",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Plays a sound from this entity."
    },
    {
        "kind": "function",
        "id": "EntityToWorldTransform",
        "ret": "handle",
        "class": "CBaseEntity",
        "args": null,
        "desc": "Get the entity's transform"
    },
    {
        "kind": "function",
        "id": "EyeAngles",
        "ret": "Vector",
        "class": "CBaseEntity",
        "args": null,
        "desc": "Get eye pitch, yaw, roll as a vector"
    },
    {
        "kind": "function",
        "id": "EyePosition",
        "ret": "Vector",
        "class": "CBaseEntity",
        "args": null,
        "desc": "Get vector to eye position - absolute coords"
    },
    {
        "kind": "function",
        "id": "FireBullets",
        "ret": "void",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Fire bullets from entity with a given info handle"
    },
    {
        "kind": "function",
        "id": "FireOutput",
        "ret": "void",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "string",
                "id": null
            },
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "string",
                "id": null
            },
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Fire an entity output"
    },
    {
        "kind": "function",
        "id": "FirstMoveChild",
        "ret": "handle",
        "class": "CBaseEntity",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "FollowEntity",
        "ret": "void",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "bool",
                "id": null
            }
        ],
        "desc": "Begin following the specified entity. This makes this entity non-solid, parents it to the target entity, and teleports it to the specified entity's origin. The second parameter is whether or not to use bonemerging while following."
    },
    {
        "kind": "function",
        "id": "GetAngles",
        "ret": "Vector",
        "class": "CBaseEntity",
        "args": null,
        "desc": "Get entity pitch, yaw, roll as a vector"
    },
    {
        "kind": "function",
        "id": "GetAngularVelocity",
        "ret": "Vector",
        "class": "CBaseEntity",
        "args": null,
        "desc": "Get the local angular velocity - returns a vector of pitch,yaw,roll"
    },
    {
        "kind": "function",
        "id": "GetBoundingMaxs",
        "ret": "Vector",
        "class": "CBaseEntity",
        "args": null,
        "desc": "Get a vector containing max bounds, centered on object"
    },
    {
        "kind": "function",
        "id": "GetBoundingMins",
        "ret": "Vector",
        "class": "CBaseEntity",
        "args": null,
        "desc": "Get a vector containing min bounds, centered on object"
    },
    {
        "kind": "function",
        "id": "GetCenter",
        "ret": "Vector",
        "class": "CBaseEntity",
        "args": null,
        "desc": "Get vector to center of object - absolute coords"
    },
    {
        "kind": "function",
        "id": "GetClassname",
        "ret": "string",
        "class": "CBaseEntity",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "GetCollisionGroup",
        "ret": "int",
        "class": "CBaseEntity",
        "args": null,
        "desc": "Get the collision group"
    },
    {
        "kind": "function",
        "id": "GetContextCount",
        "ret": "int",
        "class": "CBaseEntity",
        "args": null,
        "desc": "Get the number of response contexts"
    },
    {
        "kind": "function",
        "id": "GetDebugName",
        "ret": "string",
        "class": "CBaseEntity",
        "args": null,
        "desc": "If name exists returns name, otherwise returns classname"
    },
    {
        "kind": "function",
        "id": "GetEFlags",
        "ret": "int",
        "class": "CBaseEntity",
        "args": null,
        "desc": "Get Eflags"
    },
    {
        "kind": "function",
        "id": "GetEffects",
        "ret": "int",
        "class": "CBaseEntity",
        "args": null,
        "desc": "Get effects"
    },
    {
        "kind": "function",
        "id": "GetFlags",
        "ret": "int",
        "class": "CBaseEntity",
        "args": null,
        "desc": "Get flags"
    },
    {
        "kind": "function",
        "id": "GetFollowedEntity",
        "ret": "handle",
        "class": "CBaseEntity",
        "args": null,
        "desc": "Get the entity we're following."
    },
    {
        "kind": "function",
        "id": "GetForwardVector",
        "ret": "Vector",
        "class": "CBaseEntity",
        "args": null,
        "desc": "Get the forward vector of the entity"
    },
    {
        "kind": "function",
        "id": "GetFriction",
        "ret": "float",
        "class": "CBaseEntity",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "GetGravity",
        "ret": "float",
        "class": "CBaseEntity",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "GetHealth",
        "ret": "int",
        "class": "CBaseEntity",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "GetKeyValue",
        "ret": "string",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Get a keyvalue"
    },
    {
        "kind": "function",
        "id": "GetLocalAngles",
        "ret": "Vector",
        "class": "CBaseEntity",
        "args": null,
        "desc": "GetLocalAngles"
    },
    {
        "kind": "function",
        "id": "GetLocalOrigin",
        "ret": "Vector",
        "class": "CBaseEntity",
        "args": null,
        "desc": "GetLocalOrigin"
    },
    {
        "kind": "function",
        "id": "GetMass",
        "ret": "float",
        "class": "CBaseEntity",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "GetMaxHealth",
        "ret": "int",
        "class": "CBaseEntity",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "GetMaxOutputDelay",
        "ret": "float",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Get the longest delay for all events attached to an output"
    },
    {
        "kind": "function",
        "id": "GetModelKeyValues",
        "ret": "handle",
        "class": "CBaseEntity",
        "args": null,
        "desc": "Get a KeyValue class instance on this entity's model"
    },
    {
        "kind": "function",
        "id": "GetModelName",
        "ret": "string",
        "class": "CBaseEntity",
        "args": null,
        "desc": "Returns the name of the model"
    },
    {
        "kind": "function",
        "id": "GetMoveParent",
        "ret": "handle",
        "class": "CBaseEntity",
        "args": null,
        "desc": "If in hierarchy, retrieves the entity's parent"
    },
    {
        "kind": "function",
        "id": "GetMoveType",
        "ret": "int",
        "class": "CBaseEntity",
        "args": null,
        "desc": "Get the move type"
    },
    {
        "kind": "function",
        "id": "GetName",
        "ret": "string",
        "class": "CBaseEntity",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "GetOrCreatePrivateScriptScope",
        "ret": "handle",
        "class": "CBaseEntity",
        "args": null,
        "desc": "Create and retrieve the script-side data associated with an entity"
    },
    {
        "kind": "function",
        "id": "GetOrigin",
        "ret": "Vector",
        "class": "CBaseEntity",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "GetOwner",
        "ret": "handle",
        "class": "CBaseEntity",
        "args": null,
        "desc": "Gets this entity's owner"
    },
    {
        "kind": "function",
        "id": "GetPhysicsObject",
        "ret": "handle",
        "class": "CBaseEntity",
        "args": null,
        "desc": "Get the entity's physics object if it has one"
    },
    {
        "kind": "function",
        "id": "GetPreTemplateName",
        "ret": "string",
        "class": "CBaseEntity",
        "args": null,
        "desc": "Get the entity name stripped of template unique decoration"
    },
    {
        "kind": "function",
        "id": "GetRenderAlpha",
        "ret": "int",
        "class": "CBaseEntity",
        "args": null,
        "desc": "Get the render color's alpha value"
    },
    {
        "kind": "function",
        "id": "GetRenderColorB",
        "ret": "int",
        "class": "CBaseEntity",
        "args": null,
        "desc": "Get the render color's B value"
    },
    {
        "kind": "function",
        "id": "GetRenderColorG",
        "ret": "int",
        "class": "CBaseEntity",
        "args": null,
        "desc": "Get the render color's G value"
    },
    {
        "kind": "function",
        "id": "GetRenderColorR",
        "ret": "int",
        "class": "CBaseEntity",
        "args": null,
        "desc": "Get the render color's R value"
    },
    {
        "kind": "function",
        "id": "GetRenderColorVector",
        "ret": "Vector",
        "class": "CBaseEntity",
        "args": null,
        "desc": "Get the render color as a vector"
    },
    {
        "kind": "function",
        "id": "GetRenderMode",
        "ret": "int",
        "class": "CBaseEntity",
        "args": null,
        "desc": "Get render mode"
    },
    {
        "kind": "function",
        "id": "GetRightVector",
        "ret": "Vector",
        "class": "CBaseEntity",
        "args": null,
        "desc": "Get the right vector of the entity"
    },
    {
        "kind": "function",
        "id": "GetRootMoveParent",
        "ret": "handle",
        "class": "CBaseEntity",
        "args": null,
        "desc": "If in hierarchy, walks up the hierarchy to find the root parent"
    },
    {
        "kind": "function",
        "id": "GetScriptId",
        "ret": "string",
        "class": "CBaseEntity",
        "args": null,
        "desc": "Retrieve the unique identifier used to refer to the entity within the scripting system"
    },
    {
        "kind": "function",
        "id": "GetScriptScope",
        "ret": "handle",
        "class": "CBaseEntity",
        "args": null,
        "desc": "Retrieve the script-side data associated with an entity"
    },
    {
        "kind": "function",
        "id": "GetSolid",
        "ret": "int",
        "class": "CBaseEntity",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "GetSolidFlags",
        "ret": "int",
        "class": "CBaseEntity",
        "args": null,
        "desc": "Get solid flags"
    },
    {
        "kind": "function",
        "id": "GetSoundDuration",
        "ret": "float",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "string",
                "id": null
            },
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Returns float duration of the sound. Takes soundname and optional actormodelname."
    },
    {
        "kind": "function",
        "id": "GetSpawnFlags",
        "ret": "int",
        "class": "CBaseEntity",
        "args": null,
        "desc": "Get spawnflags"
    },
    {
        "kind": "function",
        "id": "GetTakeDamage",
        "ret": "int",
        "class": "CBaseEntity",
        "args": null,
        "desc": "Gets this entity's m_takedamage value. (DAMAGE_YES, DAMAGE_NO, etc.)"
    },
    {
        "kind": "function",
        "id": "GetTeam",
        "ret": "int",
        "class": "CBaseEntity",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "GetTransmitState",
        "ret": "int",
        "class": "CBaseEntity",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "GetUpVector",
        "ret": "Vector",
        "class": "CBaseEntity",
        "args": null,
        "desc": "Get the up vector of the entity"
    },
    {
        "kind": "function",
        "id": "GetVelocity",
        "ret": "Vector",
        "class": "CBaseEntity",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "GetWaterLevel",
        "ret": "int",
        "class": "CBaseEntity",
        "args": null,
        "desc": "Get current level of water submergence"
    },
    {
        "kind": "function",
        "id": "HasSpawnFlags",
        "ret": "bool",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Check if the entity has specific spawnflag(s) ticked"
    },
    {
        "kind": "function",
        "id": "HeadTarget",
        "ret": "Vector",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "Vector",
                "id": null
            }
        ],
        "desc": null
    },
    {
        "kind": "function",
        "id": "IsAlive",
        "ret": "bool",
        "class": "CBaseEntity",
        "args": null,
        "desc": "Return true if this entity is alive"
    },
    {
        "kind": "function",
        "id": "IsCombatCharacter",
        "ret": "bool",
        "class": "CBaseEntity",
        "args": null,
        "desc": "Returns true if this entity is a combat character (player or NPC)."
    },
    {
        "kind": "function",
        "id": "IsEffectActive",
        "ret": "bool",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Check if an effect is active"
    },
    {
        "kind": "function",
        "id": "IsEntVisible",
        "ret": "bool",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Check if the specified entity can be visible to this entity."
    },
    {
        "kind": "function",
        "id": "IsFollowingEntity",
        "ret": "bool",
        "class": "CBaseEntity",
        "args": null,
        "desc": "Returns true if this entity is following another entity."
    },
    {
        "kind": "function",
        "id": "IsNPC",
        "ret": "bool",
        "class": "CBaseEntity",
        "args": null,
        "desc": "Returns true if this entity is a NPC."
    },
    {
        "kind": "function",
        "id": "IsPlayer",
        "ret": "bool",
        "class": "CBaseEntity",
        "args": null,
        "desc": "Returns true if this entity is a player."
    },
    {
        "kind": "function",
        "id": "IsVisible",
        "ret": "bool",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "Vector",
                "id": null
            }
        ],
        "desc": "Check if the specified position can be visible to this entity."
    },
    {
        "kind": "function",
        "id": "IsVisibleWithMask",
        "ret": "bool",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Check if the specified position can be visible to this entity with a specific trace mask."
    },
    {
        "kind": "function",
        "id": "IsWeapon",
        "ret": "bool",
        "class": "CBaseEntity",
        "args": null,
        "desc": "Returns true if this entity is a weapon."
    },
    {
        "kind": "function",
        "id": "IsWorld",
        "ret": "bool",
        "class": "CBaseEntity",
        "args": null,
        "desc": "Returns true if this entity is the world."
    },
    {
        "kind": "function",
        "id": "NextMovePeer",
        "ret": "handle",
        "class": "CBaseEntity",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "PrecacheSoundScript",
        "ret": "void",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Precache a sound for later playing."
    },
    {
        "kind": "function",
        "id": "RemoveEFlags",
        "ret": "void",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Remove Eflags"
    },
    {
        "kind": "function",
        "id": "RemoveEffects",
        "ret": "void",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Remove effect(s)"
    },
    {
        "kind": "function",
        "id": "RemoveFlag",
        "ret": "void",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Remove flag"
    },
    {
        "kind": "function",
        "id": "RemoveSolidFlags",
        "ret": "void",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Remove solid flags"
    },
    {
        "kind": "function",
        "id": "RemoveSpawnFlags",
        "ret": "void",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Remove spawnflag(s)"
    },
    {
        "kind": "function",
        "id": "SetAbsAngles",
        "ret": "void",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "Vector",
                "id": null
            }
        ],
        "desc": "SetAbsAngles"
    },
    {
        "kind": "function",
        "id": "SetAbsOrigin",
        "ret": "void",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "Vector",
                "id": null
            }
        ],
        "desc": "SetAbsOrigin"
    },
    {
        "kind": "function",
        "id": "SetAngles",
        "ret": "void",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "Vector",
                "id": null
            }
        ],
        "desc": "Set entity pitch, yaw, roll"
    },
    {
        "kind": "function",
        "id": "SetAngularVelocity",
        "ret": "void",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "float",
                "id": null
            },
            {
                "type": "float",
                "id": null
            },
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Set the local angular velocity - takes float pitch,yaw,roll velocities"
    },
    {
        "kind": "function",
        "id": "SetCauser",
        "ret": "void",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Set who gets credit for a kill from this entity. If this is not a player it will reset the causer to nobody."
    },
    {
        "kind": "function",
        "id": "SetCollisionGroup",
        "ret": "void",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Set the collision group"
    },
    {
        "kind": "function",
        "id": "SetContextThink",
        "ret": "void",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "string",
                "id": null
            },
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Set a think function on this entity."
    },
    {
        "kind": "function",
        "id": "SetEffects",
        "ret": "void",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Set effect(s)"
    },
    {
        "kind": "function",
        "id": "SetForwardVector",
        "ret": "void",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "Vector",
                "id": null
            }
        ],
        "desc": "Set the orientation of the entity to have this forward vector"
    },
    {
        "kind": "function",
        "id": "SetFriction",
        "ret": "void",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": null
    },
    {
        "kind": "function",
        "id": "SetGravity",
        "ret": "void",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": null
    },
    {
        "kind": "function",
        "id": "SetHealth",
        "ret": "void",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": null
    },
    {
        "kind": "function",
        "id": "SetLocalAngles",
        "ret": "void",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "Vector",
                "id": null
            }
        ],
        "desc": "SetLocalAngles"
    },
    {
        "kind": "function",
        "id": "SetLocalOrigin",
        "ret": "void",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "Vector",
                "id": null
            }
        ],
        "desc": "SetLocalOrigin"
    },
    {
        "kind": "function",
        "id": "SetMass",
        "ret": "void",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": null
    },
    {
        "kind": "function",
        "id": "SetMaxHealth",
        "ret": "void",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": null
    },
    {
        "kind": "function",
        "id": "SetModel",
        "ret": "void",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": null
    },
    {
        "kind": "function",
        "id": "SetMoveType",
        "ret": "void",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Set the move type"
    },
    {
        "kind": "function",
        "id": "SetName",
        "ret": "void",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": null
    },
    {
        "kind": "function",
        "id": "SetOrigin",
        "ret": "void",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "Vector",
                "id": null
            }
        ],
        "desc": null
    },
    {
        "kind": "function",
        "id": "SetOriginAngles",
        "ret": "void",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            }
        ],
        "desc": "Set both the origin and the angles"
    },
    {
        "kind": "function",
        "id": "SetOriginAnglesVelocity",
        "ret": "void",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            }
        ],
        "desc": "Set the origin, the angles, and the velocity"
    },
    {
        "kind": "function",
        "id": "SetOwner",
        "ret": "void",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Sets this entity's owner"
    },
    {
        "kind": "function",
        "id": "SetParent",
        "ret": "void",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": null
    },
    {
        "kind": "function",
        "id": "SetRenderAlpha",
        "ret": "void",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Set the render color's alpha value"
    },
    {
        "kind": "function",
        "id": "SetRenderColor",
        "ret": "void",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Set the render color"
    },
    {
        "kind": "function",
        "id": "SetRenderColorB",
        "ret": "void",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Set the render color's B value"
    },
    {
        "kind": "function",
        "id": "SetRenderColorG",
        "ret": "void",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Set the render color's G value"
    },
    {
        "kind": "function",
        "id": "SetRenderColorR",
        "ret": "void",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Set the render color's R value"
    },
    {
        "kind": "function",
        "id": "SetRenderColorVector",
        "ret": "void",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "Vector",
                "id": null
            }
        ],
        "desc": "Set the render color as a vector"
    },
    {
        "kind": "function",
        "id": "SetRenderMode",
        "ret": "void",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Set render mode"
    },
    {
        "kind": "function",
        "id": "SetSize",
        "ret": "void",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            }
        ],
        "desc": null
    },
    {
        "kind": "function",
        "id": "SetSolid",
        "ret": "void",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": null
    },
    {
        "kind": "function",
        "id": "SetTakeDamage",
        "ret": "void",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Sets this entity's m_takedamage value. (DAMAGE_YES, DAMAGE_NO, etc.)"
    },
    {
        "kind": "function",
        "id": "SetTeam",
        "ret": "void",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": null
    },
    {
        "kind": "function",
        "id": "SetThink",
        "ret": "void",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": null
    },
    {
        "kind": "function",
        "id": "SetThinkFunction",
        "ret": "void",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "string",
                "id": null
            },
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": null
    },
    {
        "kind": "function",
        "id": "SetTransmitState",
        "ret": "int",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": null
    },
    {
        "kind": "function",
        "id": "SetVelocity",
        "ret": "void",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "Vector",
                "id": null
            }
        ],
        "desc": null
    },
    {
        "kind": "function",
        "id": "StopFollowingEntity",
        "ret": "void",
        "class": "CBaseEntity",
        "args": null,
        "desc": "Stops following an entity if we're following one."
    },
    {
        "kind": "function",
        "id": "StopSound",
        "ret": "void",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Stops a sound from this entity."
    },
    {
        "kind": "function",
        "id": "StopThink",
        "ret": "void",
        "class": "CBaseEntity",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "StopThinkFunction",
        "ret": "void",
        "class": "CBaseEntity",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "TakeDamage",
        "ret": "int",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Apply damage to this entity with a given info handle"
    },
    {
        "kind": "function",
        "id": "TakeHealth",
        "ret": "int",
        "class": "CBaseEntity",
        "args": [
            {
                "type": "float",
                "id": null
            },
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Give this entity health"
    },
    {
        "kind": "function",
        "id": "ValidateScriptScope",
        "ret": "bool",
        "class": "CBaseEntity",
        "args": null,
        "desc": "Ensure that an entity's script scope has been created"
    },
    {
        "kind": "function",
        "id": "entindex",
        "ret": "int",
        "class": "CBaseEntity",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "PassesDamageFilter",
        "ret": "bool",
        "class": "CBaseFilter",
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Check if the given caller and damage info pass the damage filter, with the second parameter being a CTakeDamageInfo instance. The caller is the one who requests the filter result; For example, the entity being damaged when using this as a damage filter."
    },
    {
        "kind": "function",
        "id": "PassesFilter",
        "ret": "bool",
        "class": "CBaseFilter",
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Check if the given caller and entity pass the filter. The caller is the one who requests the filter result; For example, the entity being damaged when using this as a damage filter."
    },
    {
        "kind": "function",
        "id": "GetCurrentScene",
        "ret": "handle",
        "class": "CBaseFlex",
        "args": null,
        "desc": "Returns the instance of the oldest active scene entity (if any)."
    },
    {
        "kind": "function",
        "id": "GetSceneByIndex",
        "ret": "handle",
        "class": "CBaseFlex",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Returns the instance of the scene entity at the specified index."
    },
    {
        "kind": "function",
        "id": "CanPickupObject",
        "ret": "bool",
        "class": "CBasePlayer",
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "float",
                "id": null
            },
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Can player pick up this entity? With float parameters for mass limit, and size limit."
    },
    {
        "kind": "function",
        "id": "DeathCount",
        "ret": "int",
        "class": "CBasePlayer",
        "args": null,
        "desc": "Gets the number of deaths this player has had in a multiplayer game."
    },
    {
        "kind": "function",
        "id": "DisableButtons",
        "ret": "void",
        "class": "CBasePlayer",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Disables the specified button mask."
    },
    {
        "kind": "function",
        "id": "EnableButtons",
        "ret": "void",
        "class": "CBasePlayer",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Enables the specified button mask if it was disabled before."
    },
    {
        "kind": "function",
        "id": "FlashlightIsOn",
        "ret": "int",
        "class": "CBasePlayer",
        "args": null,
        "desc": "Returns true if the flashlight is on."
    },
    {
        "kind": "function",
        "id": "FlashlightTurnOff",
        "ret": "void",
        "class": "CBasePlayer",
        "args": null,
        "desc": "Turns off the flashlight."
    },
    {
        "kind": "function",
        "id": "FlashlightTurnOn",
        "ret": "void",
        "class": "CBasePlayer",
        "args": null,
        "desc": "Turns on the flashlight."
    },
    {
        "kind": "function",
        "id": "ForceButtons",
        "ret": "void",
        "class": "CBasePlayer",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Forces the specified button mask."
    },
    {
        "kind": "function",
        "id": "FragCount",
        "ret": "int",
        "class": "CBasePlayer",
        "args": null,
        "desc": "Gets the number of frags (kills) this player has in a multiplayer game."
    },
    {
        "kind": "function",
        "id": "GetArmor",
        "ret": "int",
        "class": "CBasePlayer",
        "args": null,
        "desc": "Gets the player's armor."
    },
    {
        "kind": "function",
        "id": "GetAutoaimVector",
        "ret": "Vector",
        "class": "CBasePlayer",
        "args": [
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Gets the player's autoaim shooting direction with the specified scale."
    },
    {
        "kind": "function",
        "id": "GetAutoaimVectorCustomMaxDist",
        "ret": "Vector",
        "class": "CBasePlayer",
        "args": [
            {
                "type": "float",
                "id": null
            },
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Gets the player's autoaim shooting direction with the specified scale and a custom max distance."
    },
    {
        "kind": "function",
        "id": "GetButtonDisabled",
        "ret": "int",
        "class": "CBasePlayer",
        "args": null,
        "desc": "Gets the player's currently unusable buttons."
    },
    {
        "kind": "function",
        "id": "GetButtonForced",
        "ret": "int",
        "class": "CBasePlayer",
        "args": null,
        "desc": "Gets the player's currently forced buttons."
    },
    {
        "kind": "function",
        "id": "GetButtonLast",
        "ret": "int",
        "class": "CBasePlayer",
        "args": null,
        "desc": "Gets the player's previously active buttons."
    },
    {
        "kind": "function",
        "id": "GetButtonPressed",
        "ret": "int",
        "class": "CBasePlayer",
        "args": null,
        "desc": "Gets the player's currently pressed buttons."
    },
    {
        "kind": "function",
        "id": "GetButtonReleased",
        "ret": "int",
        "class": "CBasePlayer",
        "args": null,
        "desc": "Gets the player's just-released buttons."
    },
    {
        "kind": "function",
        "id": "GetButtons",
        "ret": "int",
        "class": "CBasePlayer",
        "args": null,
        "desc": "Gets the player's active buttons."
    },
    {
        "kind": "function",
        "id": "GetExpresser",
        "ret": "handle",
        "class": "CBasePlayer",
        "args": null,
        "desc": "Gets a handle for this player's expresser."
    },
    {
        "kind": "function",
        "id": "GetEyeForward",
        "ret": "Vector",
        "class": "CBasePlayer",
        "args": null,
        "desc": "Gets the player's forward eye vector."
    },
    {
        "kind": "function",
        "id": "GetEyeRight",
        "ret": "Vector",
        "class": "CBasePlayer",
        "args": null,
        "desc": "Gets the player's right eye vector."
    },
    {
        "kind": "function",
        "id": "GetEyeUp",
        "ret": "Vector",
        "class": "CBasePlayer",
        "args": null,
        "desc": "Gets the player's up eye vector."
    },
    {
        "kind": "function",
        "id": "GetFOV",
        "ret": "int",
        "class": "CBasePlayer",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "GetFOVOwner",
        "ret": "handle",
        "class": "CBasePlayer",
        "args": null,
        "desc": "Gets current view owner."
    },
    {
        "kind": "function",
        "id": "GetNetworkIDString",
        "ret": "string",
        "class": "CBasePlayer",
        "args": null,
        "desc": "Gets the player's network (i.e. Steam) ID."
    },
    {
        "kind": "function",
        "id": "GetPlayerName",
        "ret": "string",
        "class": "CBasePlayer",
        "args": null,
        "desc": "Gets the player's name."
    },
    {
        "kind": "function",
        "id": "GetUserID",
        "ret": "int",
        "class": "CBasePlayer",
        "args": null,
        "desc": "Gets the player's user ID."
    },
    {
        "kind": "function",
        "id": "IsConnected",
        "ret": "bool",
        "class": "CBasePlayer",
        "args": null,
        "desc": "Returns true if this player is connected."
    },
    {
        "kind": "function",
        "id": "IsDisconnecting",
        "ret": "bool",
        "class": "CBasePlayer",
        "args": null,
        "desc": "Returns true if this player is disconnecting."
    },
    {
        "kind": "function",
        "id": "IsNoclipping",
        "ret": "bool",
        "class": "CBasePlayer",
        "args": null,
        "desc": "Returns true if the player is in noclip mode."
    },
    {
        "kind": "function",
        "id": "IsSuitEquipped",
        "ret": "bool",
        "class": "CBasePlayer",
        "args": null,
        "desc": "Returns true if this player had the HEV suit equipped."
    },
    {
        "kind": "function",
        "id": "SetArmor",
        "ret": "void",
        "class": "CBasePlayer",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Sets the player's armor."
    },
    {
        "kind": "function",
        "id": "SetFOV",
        "ret": "void",
        "class": "CBasePlayer",
        "args": [
            {
                "type": "int",
                "id": null
            },
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Sets player FOV regardless of view owner."
    },
    {
        "kind": "function",
        "id": "SetMuzzleFlashTime",
        "ret": "void",
        "class": "CBasePlayer",
        "args": [
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Sets the player's muzzle flash time for AI."
    },
    {
        "kind": "function",
        "id": "SetSuitUpdate",
        "ret": "void",
        "class": "CBasePlayer",
        "args": [
            {
                "type": "string",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Sets an update for the player's HEV suit."
    },
    {
        "kind": "function",
        "id": "ShouldAutoaim",
        "ret": "bool",
        "class": "CBasePlayer",
        "args": null,
        "desc": "Returns true if the player should be autoaiming."
    },
    {
        "kind": "function",
        "id": "UnforceButtons",
        "ret": "void",
        "class": "CBasePlayer",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Unforces the specified button mask if it was forced before."
    },
    {
        "kind": "function",
        "id": "ViewPunch",
        "ret": "void",
        "class": "CBasePlayer",
        "args": [
            {
                "type": "Vector",
                "id": null
            }
        ],
        "desc": "Punches the player's view with the specified vector."
    },
    {
        "kind": "function",
        "id": "GetBool",
        "ret": "bool",
        "class": "CConvars",
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Returns the convar as a bool. May return null if no such convar."
    },
    {
        "kind": "function",
        "id": "GetClientConvarValue",
        "ret": null,
        "class": "CConvars",
        "args": [
            {
                "type": "string",
                "id": null
            },
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Returns the convar value for the entindex as a string. Only works with client convars with the FCVAR_USERINFO flag."
    },
    {
        "kind": "function",
        "id": "GetCommandClient",
        "ret": "handle",
        "class": "CConvars",
        "args": null,
        "desc": "returns the player who issued this console command."
    },
    {
        "kind": "function",
        "id": "GetDefaultValue",
        "ret": "string",
        "class": "CConvars",
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Returns the convar's default value as a string. May return null if no such convar."
    },
    {
        "kind": "function",
        "id": "GetFloat",
        "ret": "float",
        "class": "CConvars",
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Returns the convar as a float. May return null if no such convar."
    },
    {
        "kind": "function",
        "id": "GetInt",
        "ret": "int",
        "class": "CConvars",
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Returns the convar as an int. May return null if no such convar."
    },
    {
        "kind": "function",
        "id": "GetStr",
        "ret": "string",
        "class": "CConvars",
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Returns the convar as a string. May return null if no such convar."
    },
    {
        "kind": "function",
        "id": "IsFlagSet",
        "ret": "bool",
        "class": "CConvars",
        "args": [
            {
                "type": "string",
                "id": null
            },
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Returns the convar's flags. May return null if no such convar."
    },
    {
        "kind": "function",
        "id": "RegisterCommand",
        "ret": "void",
        "class": "CConvars",
        "args": [
            {
                "type": "string",
                "id": null
            },
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "string",
                "id": null
            },
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "register a console command."
    },
    {
        "kind": "function",
        "id": "RegisterConvar",
        "ret": "void",
        "class": "CConvars",
        "args": [
            {
                "type": "string",
                "id": null
            },
            {
                "type": "string",
                "id": null
            },
            {
                "type": "string",
                "id": null
            },
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "register a new console variable."
    },
    {
        "kind": "function",
        "id": "SetBool",
        "ret": "void",
        "class": "CConvars",
        "args": [
            {
                "type": "string",
                "id": null
            },
            {
                "type": "bool",
                "id": null
            }
        ],
        "desc": "Sets the value of the convar as a bool."
    },
    {
        "kind": "function",
        "id": "SetChangeCallback",
        "ret": "void",
        "class": "CConvars",
        "args": [
            {
                "type": "string",
                "id": null
            },
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "callback is called with 5 parameters (var, szOldValue, flOldValue, szNewValue, flNewValue)"
    },
    {
        "kind": "function",
        "id": "SetCompletionCallback",
        "ret": "void",
        "class": "CConvars",
        "args": [
            {
                "type": "string",
                "id": null
            },
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "callback is called with 3 parameters (cmd, partial, commands), user strings must be appended to 'commands' array"
    },
    {
        "kind": "function",
        "id": "SetFloat",
        "ret": "void",
        "class": "CConvars",
        "args": [
            {
                "type": "string",
                "id": null
            },
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Sets the value of the convar as a float."
    },
    {
        "kind": "function",
        "id": "SetInt",
        "ret": "void",
        "class": "CConvars",
        "args": [
            {
                "type": "string",
                "id": null
            },
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Sets the value of the convar as an int."
    },
    {
        "kind": "function",
        "id": "SetStr",
        "ret": "void",
        "class": "CConvars",
        "args": [
            {
                "type": "string",
                "id": null
            },
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Sets the value of the convar as a string."
    },
    {
        "kind": "function",
        "id": "UnregisterCommand",
        "ret": "void",
        "class": "CConvars",
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "unregister a console command."
    },
    {
        "kind": "function",
        "id": "Axis",
        "ret": "void",
        "class": "CDebugOverlayScriptHelper",
        "args": [
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "float",
                "id": null
            },
            {
                "type": "bool",
                "id": null
            },
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Draws an axis. Specify origin + orientation in world space."
    },
    {
        "kind": "function",
        "id": "Box",
        "ret": "void",
        "class": "CDebugOverlayScriptHelper",
        "args": [
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Draws a world-space axis-aligned box. Specify bounds in world space."
    },
    {
        "kind": "function",
        "id": "BoxAngles",
        "ret": "void",
        "class": "CDebugOverlayScriptHelper",
        "args": [
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Draws an oriented box at the origin. Specify bounds in local space."
    },
    {
        "kind": "function",
        "id": "BoxDirection",
        "ret": "void",
        "class": "CDebugOverlayScriptHelper",
        "args": [
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Draw box oriented to a Vector direction"
    },
    {
        "kind": "function",
        "id": "Circle",
        "ret": "void",
        "class": "CDebugOverlayScriptHelper",
        "args": [
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "float",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "bool",
                "id": null
            },
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Draws a circle. Specify center in world space."
    },
    {
        "kind": "function",
        "id": "CircleOriented",
        "ret": "void",
        "class": "CDebugOverlayScriptHelper",
        "args": [
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "float",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "bool",
                "id": null
            },
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Draws a circle oriented. Specify center in world space."
    },
    {
        "kind": "function",
        "id": "ClearAllOverlays",
        "ret": "void",
        "class": "CDebugOverlayScriptHelper",
        "args": null,
        "desc": "Clear all debug overlays at once"
    },
    {
        "kind": "function",
        "id": "Cross3D",
        "ret": "void",
        "class": "CDebugOverlayScriptHelper",
        "args": [
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "float",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "bool",
                "id": null
            },
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Draws a world-aligned cross. Specify origin in world space."
    },
    {
        "kind": "function",
        "id": "Cross3DOriented",
        "ret": "void",
        "class": "CDebugOverlayScriptHelper",
        "args": [
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "float",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "bool",
                "id": null
            },
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Draws an oriented cross. Specify origin in world space."
    },
    {
        "kind": "function",
        "id": "DrawTickMarkedLine",
        "ret": "void",
        "class": "CDebugOverlayScriptHelper",
        "args": [
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "float",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "bool",
                "id": null
            },
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Draws a dashed line. Specify endpoints in world space."
    },
    {
        "kind": "function",
        "id": "EntityBounds",
        "ret": "void",
        "class": "CDebugOverlayScriptHelper",
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Draws bounds of an entity"
    },
    {
        "kind": "function",
        "id": "EntityText",
        "ret": "void",
        "class": "CDebugOverlayScriptHelper",
        "args": [
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "string",
                "id": null
            },
            {
                "type": "float",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Draws text on an entity"
    },
    {
        "kind": "function",
        "id": "EntityTextAtPosition",
        "ret": "void",
        "class": "CDebugOverlayScriptHelper",
        "args": [
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "string",
                "id": null
            },
            {
                "type": "float",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Draw entity text overlay at a specific position"
    },
    {
        "kind": "function",
        "id": "Grid",
        "ret": "void",
        "class": "CDebugOverlayScriptHelper",
        "args": [
            {
                "type": "Vector",
                "id": null
            }
        ],
        "desc": "Add grid overlay"
    },
    {
        "kind": "function",
        "id": "HorzArrow",
        "ret": "void",
        "class": "CDebugOverlayScriptHelper",
        "args": [
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "float",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "bool",
                "id": null
            },
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Draws a horizontal arrow. Specify endpoints in world space."
    },
    {
        "kind": "function",
        "id": "Line",
        "ret": "void",
        "class": "CDebugOverlayScriptHelper",
        "args": [
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "bool",
                "id": null
            },
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Draws a line between two points"
    },
    {
        "kind": "function",
        "id": "ScreenText",
        "ret": "void",
        "class": "CDebugOverlayScriptHelper",
        "args": [
            {
                "type": "float",
                "id": null
            },
            {
                "type": "float",
                "id": null
            },
            {
                "type": "string",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Draws 2D text. Specify coordinates in screen space."
    },
    {
        "kind": "function",
        "id": "SetDebugBits",
        "ret": "void",
        "class": "CDebugOverlayScriptHelper",
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Set debug bits on entity"
    },
    {
        "kind": "function",
        "id": "Sphere",
        "ret": "void",
        "class": "CDebugOverlayScriptHelper",
        "args": [
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "float",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "bool",
                "id": null
            },
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Draws a wireframe sphere. Specify center in world space."
    },
    {
        "kind": "function",
        "id": "SweptBox",
        "ret": "void",
        "class": "CDebugOverlayScriptHelper",
        "args": [
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Draws a swept box. Specify endpoints in world space and the bounds in local space."
    },
    {
        "kind": "function",
        "id": "Text",
        "ret": "void",
        "class": "CDebugOverlayScriptHelper",
        "args": [
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "string",
                "id": null
            },
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Draws 2D text. Specify origin in world space."
    },
    {
        "kind": "function",
        "id": "Triangle",
        "ret": "void",
        "class": "CDebugOverlayScriptHelper",
        "args": [
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "bool",
                "id": null
            },
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Draws a filled triangle. Specify vertices in world space."
    },
    {
        "kind": "function",
        "id": "VertArrow",
        "ret": "void",
        "class": "CDebugOverlayScriptHelper",
        "args": [
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "float",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "bool",
                "id": null
            },
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Draws a vertical arrow. Specify endpoints in world space."
    },
    {
        "kind": "function",
        "id": "YawArrow",
        "ret": "void",
        "class": "CDebugOverlayScriptHelper",
        "args": [
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "float",
                "id": null
            },
            {
                "type": "float",
                "id": null
            },
            {
                "type": "float",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "bool",
                "id": null
            },
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Draws a arrow associated with a specific yaw. Specify endpoints in world space."
    },
    {
        "kind": "function",
        "id": "CreateByClassname",
        "ret": "handle",
        "class": "CEntities",
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Creates an entity by classname"
    },
    {
        "kind": "function",
        "id": "DisableEntityListening",
        "ret": "void",
        "class": "CEntities",
        "args": null,
        "desc": "Disables the 'OnEntity' hooks."
    },
    {
        "kind": "function",
        "id": "EnableEntityListening",
        "ret": "void",
        "class": "CEntities",
        "args": null,
        "desc": "Enables the 'OnEntity' hooks. This function must be called before using them."
    },
    {
        "kind": "function",
        "id": "FindByClassNearestFacing",
        "ret": "handle",
        "class": "CEntities",
        "args": [
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "float",
                "id": null
            },
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Find the nearest entity along the facing direction from the given origin within the angular threshold with the given classname."
    },
    {
        "kind": "function",
        "id": "FindByClassname",
        "ret": "handle",
        "class": "CEntities",
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Find entities by class name. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search"
    },
    {
        "kind": "function",
        "id": "FindByClassnameNearest",
        "ret": "handle",
        "class": "CEntities",
        "args": [
            {
                "type": "string",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Find entities by class name nearest to a point."
    },
    {
        "kind": "function",
        "id": "FindByClassnameWithin",
        "ret": "handle",
        "class": "CEntities",
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "string",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Find entities by class name within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search"
    },
    {
        "kind": "function",
        "id": "FindByClassnameWithinBox",
        "ret": "handle",
        "class": "CEntities",
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "string",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            }
        ],
        "desc": "Find entities by class name within an AABB. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search"
    },
    {
        "kind": "function",
        "id": "FindByModel",
        "ret": "handle",
        "class": "CEntities",
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Find entities by model name. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search"
    },
    {
        "kind": "function",
        "id": "FindByName",
        "ret": "handle",
        "class": "CEntities",
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Find entities by name. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search"
    },
    {
        "kind": "function",
        "id": "FindByNameNearest",
        "ret": "handle",
        "class": "CEntities",
        "args": [
            {
                "type": "string",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Find entities by name nearest to a point."
    },
    {
        "kind": "function",
        "id": "FindByNameWithin",
        "ret": "handle",
        "class": "CEntities",
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "string",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Find entities by name within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search"
    },
    {
        "kind": "function",
        "id": "FindByTarget",
        "ret": "handle",
        "class": "CEntities",
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Find entities by targetname. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search"
    },
    {
        "kind": "function",
        "id": "FindInSphere",
        "ret": "handle",
        "class": "CEntities",
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Find entities within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search"
    },
    {
        "kind": "function",
        "id": "First",
        "ret": "handle",
        "class": "CEntities",
        "args": null,
        "desc": "Begin an iteration over the list of entities"
    },
    {
        "kind": "function",
        "id": "Next",
        "ret": "handle",
        "class": "CEntities",
        "args": [
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Continue an iteration over the list of entities, providing reference to a previously found entity"
    },
    {
        "kind": "function",
        "id": "SpawnEntity",
        "ret": "void",
        "class": "CEnvEntityMaker",
        "args": null,
        "desc": "Create an entity at the location of the maker"
    },
    {
        "kind": "function",
        "id": "SpawnEntityAtEntityOrigin",
        "ret": "void",
        "class": "CEnvEntityMaker",
        "args": [
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Create an entity at the location of a specified entity instance"
    },
    {
        "kind": "function",
        "id": "SpawnEntityAtLocation",
        "ret": "void",
        "class": "CEnvEntityMaker",
        "args": [
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            }
        ],
        "desc": "Create an entity at a specified location and orientaton, orientation is Euler angle in degrees (pitch, yaw, roll)"
    },
    {
        "kind": "function",
        "id": "SpawnEntityAtNamedEntityOrigin",
        "ret": "void",
        "class": "CEnvEntityMaker",
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Create an entity at the location of a named entity"
    },
    {
        "kind": "function",
        "id": "AllowFlashlight",
        "ret": "bool",
        "class": "CGameRules",
        "args": null,
        "desc": "Returns true if players are allowed to switch on their flashlight."
    },
    {
        "kind": "function",
        "id": "AllowNPCs",
        "ret": "bool",
        "class": "CGameRules",
        "args": null,
        "desc": "Returns true if NPCs are allowed."
    },
    {
        "kind": "function",
        "id": "AllowThirdPersonCamera",
        "ret": "bool",
        "class": "CGameRules",
        "args": null,
        "desc": "Returns true if third-person camera is allowed."
    },
    {
        "kind": "function",
        "id": "Damage_IsTimeBased",
        "ret": "bool",
        "class": "CGameRules",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Damage types that are time-based."
    },
    {
        "kind": "function",
        "id": "Damage_NoPhysicsForce",
        "ret": "bool",
        "class": "CGameRules",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Damage types that don't have to supply a physics force & position."
    },
    {
        "kind": "function",
        "id": "Damage_ShouldGibCorpse",
        "ret": "bool",
        "class": "CGameRules",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Damage types that gib the corpse."
    },
    {
        "kind": "function",
        "id": "Damage_ShouldNotBleed",
        "ret": "bool",
        "class": "CGameRules",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Damage types that don't make the player bleed."
    },
    {
        "kind": "function",
        "id": "Damage_ShowOnHUD",
        "ret": "bool",
        "class": "CGameRules",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Damage types that have client HUD art."
    },
    {
        "kind": "function",
        "id": "DefaultFOV",
        "ret": "int",
        "class": "CGameRules",
        "args": null,
        "desc": "Default player FOV in this game."
    },
    {
        "kind": "function",
        "id": "GetDamageMultiplier",
        "ret": "float",
        "class": "CGameRules",
        "args": null,
        "desc": "Ammo type damage multiplier."
    },
    {
        "kind": "function",
        "id": "GetGameDescription",
        "ret": "string",
        "class": "CGameRules",
        "args": null,
        "desc": "This is the game description that gets seen in server browsers."
    },
    {
        "kind": "function",
        "id": "GetGameType",
        "ret": "int",
        "class": "CGameRules",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "GetGameTypeName",
        "ret": "string",
        "class": "CGameRules",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "GetSkillLevel",
        "ret": "int",
        "class": "CGameRules",
        "args": null,
        "desc": "Returns the game's difficulty/skill level."
    },
    {
        "kind": "function",
        "id": "InRoundRestart",
        "ret": "bool",
        "class": "CGameRules",
        "args": null,
        "desc": "Returns true if the round is restarting."
    },
    {
        "kind": "function",
        "id": "IsCoOp",
        "ret": "bool",
        "class": "CGameRules",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "IsDeathmatch",
        "ret": "bool",
        "class": "CGameRules",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "IsMultiplayer",
        "ret": "bool",
        "class": "CGameRules",
        "args": null,
        "desc": "Returns true if this is a multiplayer game (like co-op or deathmatch)."
    },
    {
        "kind": "function",
        "id": "IsSkillLevel",
        "ret": "bool",
        "class": "CGameRules",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Returns true if the game is set to the specified difficulty/skill level."
    },
    {
        "kind": "function",
        "id": "IsTeamplay",
        "ret": "bool",
        "class": "CGameRules",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "Name",
        "ret": "string",
        "class": "CGameRules",
        "args": null,
        "desc": "Gets the name of these rules."
    },
    {
        "kind": "function",
        "id": "RefreshSkillData",
        "ret": "void",
        "class": "CGameRules",
        "args": [
            {
                "type": "bool",
                "id": null
            }
        ],
        "desc": null
    },
    {
        "kind": "function",
        "id": "SetSkillLevel",
        "ret": "void",
        "class": "CGameRules",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Sets the game's difficulty/skill level."
    },
    {
        "kind": "function",
        "id": "ShouldCollide",
        "ret": "bool",
        "class": "CGameRules",
        "args": [
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Returns whether two collision groups collide with each other in this game."
    },
    {
        "kind": "function",
        "id": "EndRound",
        "ret": "void",
        "class": "CGameState",
        "args": null,
        "desc": "Ends the round (loss state)."
    },
    {
        "kind": "function",
        "id": "ExtractAllPlayers",
        "ret": "void",
        "class": "CGameState",
        "args": null,
        "desc": "Extracts all players (win state)."
    },
    {
        "kind": "function",
        "id": "ExtractPlayer",
        "ret": "void",
        "class": "CGameState",
        "args": [
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Extracts a player."
    },
    {
        "kind": "function",
        "id": "FreezeAllNPCs",
        "ret": "void",
        "class": "CGameState",
        "args": null,
        "desc": "Freezes all NPCs."
    },
    {
        "kind": "function",
        "id": "FreezeAllPlayers",
        "ret": "void",
        "class": "CGameState",
        "args": null,
        "desc": "Freezes all players."
    },
    {
        "kind": "function",
        "id": "NukePlayers",
        "ret": "void",
        "class": "CGameState",
        "args": null,
        "desc": "Kills all players, then ends the round (loss state)."
    },
    {
        "kind": "function",
        "id": "RespawnAllPlayers",
        "ret": "void",
        "class": "CGameState",
        "args": null,
        "desc": "Respawns all players."
    },
    {
        "kind": "function",
        "id": "RespawnDeadPlayers",
        "ret": "void",
        "class": "CGameState",
        "args": null,
        "desc": "Respawns dead players."
    },
    {
        "kind": "function",
        "id": "RespawnPlayer",
        "ret": "void",
        "class": "CGameState",
        "args": [
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Respawns a player."
    },
    {
        "kind": "function",
        "id": "RestartRound",
        "ret": "void",
        "class": "CGameState",
        "args": null,
        "desc": "Restarts round immediately."
    },
    {
        "kind": "function",
        "id": "UnfreezeAllNPCs",
        "ret": "void",
        "class": "CGameState",
        "args": null,
        "desc": "Unfreezes all NPCs."
    },
    {
        "kind": "function",
        "id": "UnfreezeAllPlayers",
        "ret": "void",
        "class": "CGameState",
        "args": null,
        "desc": "Unfreezes all players."
    },
    {
        "kind": "function",
        "id": "AllSolid",
        "ret": "bool",
        "class": "CGameTrace",
        "args": null,
        "desc": "Returns whether the trace is completely within a solid."
    },
    {
        "kind": "function",
        "id": "Contents",
        "ret": "int",
        "class": "CGameTrace",
        "args": null,
        "desc": "Gets the contents of the surface the trace has hit."
    },
    {
        "kind": "function",
        "id": "Destroy",
        "ret": "void",
        "class": "CGameTrace",
        "args": null,
        "desc": "Deletes this instance. Important for preventing memory leaks."
    },
    {
        "kind": "function",
        "id": "DidHit",
        "ret": "bool",
        "class": "CGameTrace",
        "args": null,
        "desc": "Returns whether the trace hit anything."
    },
    {
        "kind": "function",
        "id": "DidHitNonWorldEntity",
        "ret": "bool",
        "class": "CGameTrace",
        "args": null,
        "desc": "Returns whether the trace hit something other than the world entity."
    },
    {
        "kind": "function",
        "id": "DidHitWorld",
        "ret": "bool",
        "class": "CGameTrace",
        "args": null,
        "desc": "Returns whether the trace hit the world entity or not."
    },
    {
        "kind": "function",
        "id": "DispFlags",
        "ret": "int",
        "class": "CGameTrace",
        "args": null,
        "desc": "Gets the displacement flags of the surface the trace has hit."
    },
    {
        "kind": "function",
        "id": "EndPos",
        "ret": "Vector",
        "class": "CGameTrace",
        "args": null,
        "desc": "Gets the trace's end position."
    },
    {
        "kind": "function",
        "id": "Entity",
        "ret": "handle",
        "class": "CGameTrace",
        "args": null,
        "desc": "Returns the entity this trace has hit."
    },
    {
        "kind": "function",
        "id": "Fraction",
        "ret": "float",
        "class": "CGameTrace",
        "args": null,
        "desc": "Gets the fraction of the trace completed. For example, if the trace stopped exactly halfway to the end position, this would be 0.5."
    },
    {
        "kind": "function",
        "id": "FractionLeftSolid",
        "ret": "float",
        "class": "CGameTrace",
        "args": null,
        "desc": "If this trace started within a solid, this is the point in the trace's fraction at which it left that solid."
    },
    {
        "kind": "function",
        "id": "GetEntityIndex",
        "ret": "int",
        "class": "CGameTrace",
        "args": null,
        "desc": "Returns the index of whatever entity this trace hit."
    },
    {
        "kind": "function",
        "id": "HitBox",
        "ret": "int",
        "class": "CGameTrace",
        "args": null,
        "desc": "Returns the hitbox of the entity this trace has hit. If it hit the world entity, this returns the static prop index."
    },
    {
        "kind": "function",
        "id": "HitGroup",
        "ret": "int",
        "class": "CGameTrace",
        "args": null,
        "desc": "Returns the specific hit group this trace hit if it hit an entity."
    },
    {
        "kind": "function",
        "id": "IsDispSurface",
        "ret": "bool",
        "class": "CGameTrace",
        "args": null,
        "desc": "Returns whether this trace hit a displacement."
    },
    {
        "kind": "function",
        "id": "IsDispSurfaceBuildable",
        "ret": "bool",
        "class": "CGameTrace",
        "args": null,
        "desc": "Returns whether DISPSURF_FLAG_BUILDABLE is ticked on the displacement this trace hit."
    },
    {
        "kind": "function",
        "id": "IsDispSurfaceProp1",
        "ret": "bool",
        "class": "CGameTrace",
        "args": null,
        "desc": "Returns whether DISPSURF_FLAG_SURFPROP1 is ticked on the displacement this trace hit."
    },
    {
        "kind": "function",
        "id": "IsDispSurfaceProp2",
        "ret": "bool",
        "class": "CGameTrace",
        "args": null,
        "desc": "Returns whether DISPSURF_FLAG_SURFPROP2 is ticked on the displacement this trace hit."
    },
    {
        "kind": "function",
        "id": "IsDispSurfaceWalkable",
        "ret": "bool",
        "class": "CGameTrace",
        "args": null,
        "desc": "Returns whether DISPSURF_FLAG_WALKABLE is ticked on the displacement this trace hit."
    },
    {
        "kind": "function",
        "id": "PhysicsBone",
        "ret": "int",
        "class": "CGameTrace",
        "args": null,
        "desc": "Returns the physics bone this trace hit if it hit an entity."
    },
    {
        "kind": "function",
        "id": "Plane",
        "ret": "handle",
        "class": "CGameTrace",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "StartPos",
        "ret": "Vector",
        "class": "CGameTrace",
        "args": null,
        "desc": "Gets the trace's start position."
    },
    {
        "kind": "function",
        "id": "StartSolid",
        "ret": "bool",
        "class": "CGameTrace",
        "args": null,
        "desc": "Returns whether the trace started within a solid."
    },
    {
        "kind": "function",
        "id": "Surface",
        "ret": "handle",
        "class": "CGameTrace",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "CommandLineCheck",
        "ret": "bool",
        "class": "CGlobalSys",
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "returns true if the command line param was used, otherwise false."
    },
    {
        "kind": "function",
        "id": "CommandLineCheckFloat",
        "ret": "float",
        "class": "CGlobalSys",
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "returns the command line param as a float."
    },
    {
        "kind": "function",
        "id": "CommandLineCheckInt",
        "ret": "int",
        "class": "CGlobalSys",
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "returns the command line param as an int."
    },
    {
        "kind": "function",
        "id": "CommandLineCheckStr",
        "ret": "string",
        "class": "CGlobalSys",
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "returns the command line param as a string."
    },
    {
        "kind": "function",
        "id": "GetCommandLine",
        "ret": "string",
        "class": "CGlobalSys",
        "args": null,
        "desc": "returns the command line"
    },
    {
        "kind": "function",
        "id": "BecomeInfected",
        "ret": "void",
        "class": "CInfectableCharacter",
        "args": null,
        "desc": "Character becomes infected."
    },
    {
        "kind": "function",
        "id": "CureInfection",
        "ret": "void",
        "class": "CInfectableCharacter",
        "args": null,
        "desc": "Cures active infection."
    },
    {
        "kind": "function",
        "id": "DiedWhileInfected",
        "ret": "bool",
        "class": "CInfectableCharacter",
        "args": null,
        "desc": "Returns true if character died while infected."
    },
    {
        "kind": "function",
        "id": "GetInfectionDeathTime",
        "ret": "float",
        "class": "CInfectableCharacter",
        "args": null,
        "desc": "Gets the time of when infection takes over."
    },
    {
        "kind": "function",
        "id": "GetInfectionTime",
        "ret": "float",
        "class": "CInfectableCharacter",
        "args": null,
        "desc": "Gets the time of infection."
    },
    {
        "kind": "function",
        "id": "IsInfected",
        "ret": "bool",
        "class": "CInfectableCharacter",
        "args": null,
        "desc": "Returns true if character is infected."
    },
    {
        "kind": "function",
        "id": "TakePills",
        "ret": "void",
        "class": "CInfectableCharacter",
        "args": null,
        "desc": "Resets infection time."
    },
    {
        "kind": "function",
        "id": "GetMaxAmmo",
        "ret": "int",
        "class": "CItem_AmmoBox",
        "args": null,
        "desc": "Returns max count for current ammo type."
    },
    {
        "kind": "function",
        "id": "SetAmmoCount",
        "ret": "void",
        "class": "CItem_AmmoBox",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Set ammo count."
    },
    {
        "kind": "function",
        "id": "SetAmmoType",
        "ret": "void",
        "class": "CItem_AmmoBox",
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Set ammo type by name."
    },
    {
        "kind": "function",
        "id": "AddItem",
        "ret": "bool",
        "class": "CItem_InventoryBox",
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Adds an item to the inventory box, accepts item aliases and spawner keywords. Returns false if the box is full."
    },
    {
        "kind": "function",
        "id": "AddRandomAmmo",
        "ret": "void",
        "class": "CItem_InventoryBox",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Adds a random ammo item to the inventory box, with a parameter of item count. Use -1 to fill all the empty slots."
    },
    {
        "kind": "function",
        "id": "AddRandomGear",
        "ret": "void",
        "class": "CItem_InventoryBox",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Adds a random gear item to the inventory box, with a parameter of item count. Use -1 to fill all the empty slots."
    },
    {
        "kind": "function",
        "id": "AddRandomWeapon",
        "ret": "void",
        "class": "CItem_InventoryBox",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Adds a random weapon item to the inventory box, with a parameter of item count. Use -1 to fill all the empty slots."
    },
    {
        "kind": "function",
        "id": "AllowEmpty",
        "ret": "void",
        "class": "CItem_InventoryBox",
        "args": [
            {
                "type": "bool",
                "id": null
            }
        ],
        "desc": "Sets whether or not the box will be removed once it's been emptied, with a boolean parameter."
    },
    {
        "kind": "function",
        "id": "RandomizeContents",
        "ret": "void",
        "class": "CItem_InventoryBox",
        "args": null,
        "desc": "Randomizes new contents, and replaces all existing items."
    },
    {
        "kind": "function",
        "id": "RemoveAllItems",
        "ret": "void",
        "class": "CItem_InventoryBox",
        "args": null,
        "desc": "Removes all items in the inventory box."
    },
    {
        "kind": "function",
        "id": "AddStringAsUTF8",
        "ret": "void",
        "class": "CLocalize",
        "args": [
            {
                "type": "string",
                "id": null
            },
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Adds a new localized token as a UTF-8 string (not Unicode)."
    },
    {
        "kind": "function",
        "id": "GetTokenAsUTF8",
        "ret": "string",
        "class": "CLocalize",
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Gets the current language's token as a UTF-8 string (not Unicode)."
    },
    {
        "kind": "function",
        "id": "RunFunction",
        "ret": "void",
        "class": "CNMRiHLogicScriptProxy",
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Runs an entity script function using a proxy."
    },
    {
        "kind": "function",
        "id": "RunFunctionBool",
        "ret": "void",
        "class": "CNMRiHLogicScriptProxy",
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Runs an entity script function using a proxy, and saves returned value into entprop buffer as boolean (0/1)."
    },
    {
        "kind": "function",
        "id": "RunFunctionEHandle",
        "ret": "void",
        "class": "CNMRiHLogicScriptProxy",
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Runs an entity script function using a proxy, and saves returned entity handle into entprop."
    },
    {
        "kind": "function",
        "id": "RunFunctionFloat",
        "ret": "void",
        "class": "CNMRiHLogicScriptProxy",
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Runs an entity script function using a proxy, and saves returned float into entprop buffer."
    },
    {
        "kind": "function",
        "id": "RunFunctionInt",
        "ret": "void",
        "class": "CNMRiHLogicScriptProxy",
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Runs an entity script function using a proxy, and saves returned int into entprop buffer."
    },
    {
        "kind": "function",
        "id": "RunFunctionString",
        "ret": "void",
        "class": "CNMRiHLogicScriptProxy",
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Runs an entity script function using a proxy, and saves returned string into entprop buffer."
    },
    {
        "kind": "function",
        "id": "RunFunctionVector",
        "ret": "void",
        "class": "CNMRiHLogicScriptProxy",
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Runs an entity script function using a proxy, and saves returned vector into entprop buffer."
    },
    {
        "kind": "function",
        "id": "SetTargetEntity",
        "ret": "void",
        "class": "CNMRiHLogicScriptProxy",
        "args": [
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Target chosen entity."
    },
    {
        "kind": "function",
        "id": "BecomeCrawler",
        "ret": "void",
        "class": "CNMRiH_BaseZombie",
        "args": null,
        "desc": "Turns this zombie into a crawler."
    },
    {
        "kind": "function",
        "id": "BecomeRunner",
        "ret": "void",
        "class": "CNMRiH_BaseZombie",
        "args": null,
        "desc": "Turns this zombie into a runner."
    },
    {
        "kind": "function",
        "id": "HasArmor",
        "ret": "bool",
        "class": "CNMRiH_BaseZombie",
        "args": null,
        "desc": "Returns true if this zombie has armor (i.e. national guard)."
    },
    {
        "kind": "function",
        "id": "IsCrawler",
        "ret": "bool",
        "class": "CNMRiH_BaseZombie",
        "args": null,
        "desc": "Returns true if this zombie is a crawler."
    },
    {
        "kind": "function",
        "id": "IsKid",
        "ret": "bool",
        "class": "CNMRiH_BaseZombie",
        "args": null,
        "desc": "Returns true if this zombie is a kid."
    },
    {
        "kind": "function",
        "id": "IsRunner",
        "ret": "bool",
        "class": "CNMRiH_BaseZombie",
        "args": null,
        "desc": "Returns true if this zombie is a runner."
    },
    {
        "kind": "function",
        "id": "IsTurned",
        "ret": "bool",
        "class": "CNMRiH_BaseZombie",
        "args": null,
        "desc": "Returns true if this zombie is a turned player."
    },
    {
        "kind": "function",
        "id": "SetModelOverride",
        "ret": "void",
        "class": "CNMRiH_BaseZombie",
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Overrides model on this zombie."
    },
    {
        "kind": "function",
        "id": "SpawnLootAmmo",
        "ret": "handle",
        "class": "CNMRiH_BaseZombie",
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Spawns loot drop by ammo name, returns handle to new entity."
    },
    {
        "kind": "function",
        "id": "SpawnLootWeapon",
        "ret": "handle",
        "class": "CNMRiH_BaseZombie",
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Spawns loot drop by weapon classname, returns handle to new entity."
    },
    {
        "kind": "function",
        "id": "AreTokensGivenFromKills",
        "ret": "bool",
        "class": "CNMRiH_GameRules",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "GetActivePlayerCount",
        "ret": "int",
        "class": "CNMRiH_GameRules",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "GetActivePlayerSpawnCount",
        "ret": "int",
        "class": "CNMRiH_GameRules",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "GetCurrentState",
        "ret": "int",
        "class": "CNMRiH_GameRules",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "GetDeadPlayerCount",
        "ret": "int",
        "class": "CNMRiH_GameRules",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "GetExtractedPlayerCount",
        "ret": "int",
        "class": "CNMRiH_GameRules",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "GetGameOverState",
        "ret": "int",
        "class": "CNMRiH_GameRules",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "GetInfectionModifier",
        "ret": "float",
        "class": "CNMRiH_GameRules",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "GetKillsRequiredPerToken",
        "ret": "int",
        "class": "CNMRiH_GameRules",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "GetLossState",
        "ret": "int",
        "class": "CNMRiH_GameRules",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "GetPracticeState",
        "ret": "int",
        "class": "CNMRiH_GameRules",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "GetRestartState",
        "ret": "int",
        "class": "CNMRiH_GameRules",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "GetRunningState",
        "ret": "int",
        "class": "CNMRiH_GameRules",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "GetStateTransitionTime",
        "ret": "float",
        "class": "CNMRiH_GameRules",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "GetSuppliesDroppedCount",
        "ret": "int",
        "class": "CNMRiH_GameRules",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "GetWinState",
        "ret": "int",
        "class": "CNMRiH_GameRules",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "HasLevelTransitioned",
        "ret": "bool",
        "class": "CNMRiH_GameRules",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "IsIntermission",
        "ret": "bool",
        "class": "CNMRiH_GameRules",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "AddCarriedWeight",
        "ret": "void",
        "class": "CNMRiH_Player",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Adds carried inventory weight."
    },
    {
        "kind": "function",
        "id": "Ammo_Drop",
        "ret": "void",
        "class": "CNMRiH_Player",
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Drops one box of owned ammo, with parameter of ammo name."
    },
    {
        "kind": "function",
        "id": "ApplyBandage",
        "ret": "void",
        "class": "CNMRiH_Player",
        "args": null,
        "desc": "Applies the effect of using a bandage."
    },
    {
        "kind": "function",
        "id": "ApplyFirstAidKit",
        "ret": "void",
        "class": "CNMRiH_Player",
        "args": null,
        "desc": "Applies the effect of using a first aid kit."
    },
    {
        "kind": "function",
        "id": "ApplyVaccine",
        "ret": "void",
        "class": "CNMRiH_Player",
        "args": null,
        "desc": "Applies the effect of gene therapy vaccine, cures and immunizes infection."
    },
    {
        "kind": "function",
        "id": "BleedOut",
        "ret": "void",
        "class": "CNMRiH_Player",
        "args": null,
        "desc": "Inflicts bleeding."
    },
    {
        "kind": "function",
        "id": "CancelSuicide",
        "ret": "void",
        "class": "CNMRiH_Player",
        "args": [
            {
                "type": "bool",
                "id": null
            }
        ],
        "desc": "Cancels suicide when contemplating, with boolean parameter for playing cancel animation."
    },
    {
        "kind": "function",
        "id": "CancelThrowDrop",
        "ret": "void",
        "class": "CNMRiH_Player",
        "args": null,
        "desc": "Cancels active weapon throw."
    },
    {
        "kind": "function",
        "id": "ClearHandModelOverride",
        "ret": "void",
        "class": "CNMRiH_Player",
        "args": null,
        "desc": "Resets viewmodel hands back to default."
    },
    {
        "kind": "function",
        "id": "ContemplateSuicide",
        "ret": "void",
        "class": "CNMRiH_Player",
        "args": null,
        "desc": "Begins contemplating suicide."
    },
    {
        "kind": "function",
        "id": "DeathCount",
        "ret": "int",
        "class": "CNMRiH_Player",
        "args": null,
        "desc": "Returns the amount of times player has died."
    },
    {
        "kind": "function",
        "id": "DecrementRespawnTokens",
        "ret": "void",
        "class": "CNMRiH_Player",
        "args": null,
        "desc": "Decrements active respawn tokens."
    },
    {
        "kind": "function",
        "id": "DestroyAllAmmo",
        "ret": "void",
        "class": "CNMRiH_Player",
        "args": null,
        "desc": "Destroys all ammo that player owns."
    },
    {
        "kind": "function",
        "id": "DestroyAllWeapons",
        "ret": "void",
        "class": "CNMRiH_Player",
        "args": null,
        "desc": "Destroys all weapons that player owns."
    },
    {
        "kind": "function",
        "id": "DestroyEverything",
        "ret": "void",
        "class": "CNMRiH_Player",
        "args": null,
        "desc": "Destroys all items that player owns."
    },
    {
        "kind": "function",
        "id": "DoCommitSuicide",
        "ret": "void",
        "class": "CNMRiH_Player",
        "args": null,
        "desc": "Does commit suicide."
    },
    {
        "kind": "function",
        "id": "DropEverything",
        "ret": "void",
        "class": "CNMRiH_Player",
        "args": null,
        "desc": "Drops all items that player owns."
    },
    {
        "kind": "function",
        "id": "EnableSprint",
        "ret": "void",
        "class": "CNMRiH_Player",
        "args": [
            {
                "type": "bool",
                "id": null
            }
        ],
        "desc": "Enables / disables sprinting ability."
    },
    {
        "kind": "function",
        "id": "GetAmmoCarryWeight",
        "ret": "int",
        "class": "CNMRiH_Player",
        "args": null,
        "desc": "Returns ammo inventory weight."
    },
    {
        "kind": "function",
        "id": "GetCarriedWeight",
        "ret": "int",
        "class": "CNMRiH_Player",
        "args": null,
        "desc": "Returns total carried inventory weight."
    },
    {
        "kind": "function",
        "id": "GetJumpStaminaCost",
        "ret": "float",
        "class": "CNMRiH_Player",
        "args": null,
        "desc": "Returns the amount of stamina jumping costs."
    },
    {
        "kind": "function",
        "id": "GetLastObserverMode",
        "ret": "int",
        "class": "CNMRiH_Player",
        "args": null,
        "desc": "Returns previous observer mode."
    },
    {
        "kind": "function",
        "id": "GetMaxCarriedWeight",
        "ret": "float",
        "class": "CNMRiH_Player",
        "args": null,
        "desc": "Returns max carried inventory weight."
    },
    {
        "kind": "function",
        "id": "GetNextRespawnTime",
        "ret": "float",
        "class": "CNMRiH_Player",
        "args": null,
        "desc": "Returns next respawn time for this player."
    },
    {
        "kind": "function",
        "id": "GetNextSpawnTryTime",
        "ret": "float",
        "class": "CNMRiH_Player",
        "args": null,
        "desc": "Returns next spawn attempt time for this player."
    },
    {
        "kind": "function",
        "id": "GetThrowScale",
        "ret": "float",
        "class": "CNMRiH_Player",
        "args": null,
        "desc": "Returns current weapon throw scale."
    },
    {
        "kind": "function",
        "id": "GetThrowVector",
        "ret": "Vector",
        "class": "CNMRiH_Player",
        "args": [
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Returns weapon throw vector, with parameter of throw force."
    },
    {
        "kind": "function",
        "id": "HasFlashlight",
        "ret": "bool",
        "class": "CNMRiH_Player",
        "args": null,
        "desc": "Returns true if player owns flashlight."
    },
    {
        "kind": "function",
        "id": "HasLeftoverWeight",
        "ret": "bool",
        "class": "CNMRiH_Player",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Returns true if player has given weight available."
    },
    {
        "kind": "function",
        "id": "HasWalkieTalkie",
        "ret": "bool",
        "class": "CNMRiH_Player",
        "args": null,
        "desc": "Returns true if player owns walkie talkie."
    },
    {
        "kind": "function",
        "id": "IncreaseBloodiness",
        "ret": "void",
        "class": "CNMRiH_Player",
        "args": null,
        "desc": "Increases visual bloodiness."
    },
    {
        "kind": "function",
        "id": "IncrementRespawnTokens",
        "ret": "void",
        "class": "CNMRiH_Player",
        "args": null,
        "desc": "Increments active respawn tokens."
    },
    {
        "kind": "function",
        "id": "IsBleedingOut",
        "ret": "bool",
        "class": "CNMRiH_Player",
        "args": null,
        "desc": "Returns true is player is bleeding."
    },
    {
        "kind": "function",
        "id": "IsContemplatingSuicide",
        "ret": "bool",
        "class": "CNMRiH_Player",
        "args": null,
        "desc": "Returns true when player is contemplating suicide."
    },
    {
        "kind": "function",
        "id": "IsExtracted",
        "ret": "bool",
        "class": "CNMRiH_Player",
        "args": null,
        "desc": "Returns true if player is extracted."
    },
    {
        "kind": "function",
        "id": "IsGrabbed",
        "ret": "bool",
        "class": "CNMRiH_Player",
        "args": null,
        "desc": "Returns true if player is being grabbed by a zombie."
    },
    {
        "kind": "function",
        "id": "IsHost",
        "ret": "bool",
        "class": "CNMRiH_Player",
        "args": null,
        "desc": "Returns true if this player is a listen server host."
    },
    {
        "kind": "function",
        "id": "IsInLevelTransition",
        "ret": "bool",
        "class": "CNMRiH_Player",
        "args": null,
        "desc": "Returns true if player is in level transition."
    },
    {
        "kind": "function",
        "id": "IsPartialBlindnessActive",
        "ret": "bool",
        "class": "CNMRiH_Player",
        "args": null,
        "desc": "Returns true if player is experiencing blindness from vaccine side effects."
    },
    {
        "kind": "function",
        "id": "IsTalkingLocal",
        "ret": "bool",
        "class": "CNMRiH_Player",
        "args": null,
        "desc": "Returns true if player is talking without a walkie talkie."
    },
    {
        "kind": "function",
        "id": "IsTalkingWalkie",
        "ret": "bool",
        "class": "CNMRiH_Player",
        "args": null,
        "desc": "Returns true if player is talking with a walkie talkie."
    },
    {
        "kind": "function",
        "id": "IsUsingProgressTrigger",
        "ret": "bool",
        "class": "CNMRiH_Player",
        "args": null,
        "desc": "Returns true if player is using a tool."
    },
    {
        "kind": "function",
        "id": "IsVaccinated",
        "ret": "bool",
        "class": "CNMRiH_Player",
        "args": null,
        "desc": "Returns true if player is vaccinated."
    },
    {
        "kind": "function",
        "id": "IsVoiceCommandTimerExpired",
        "ret": "bool",
        "class": "CNMRiH_Player",
        "args": null,
        "desc": "Returns true when voice command timer has expired."
    },
    {
        "kind": "function",
        "id": "ReadyToRespawn",
        "ret": "bool",
        "class": "CNMRiH_Player",
        "args": null,
        "desc": "Returns true if player is ready to respawn."
    },
    {
        "kind": "function",
        "id": "RemoveCarriedWeight",
        "ret": "void",
        "class": "CNMRiH_Player",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Removes carried inventory weight."
    },
    {
        "kind": "function",
        "id": "RemoveInflictions",
        "ret": "void",
        "class": "CNMRiH_Player",
        "args": null,
        "desc": "Removes infection and bleeding."
    },
    {
        "kind": "function",
        "id": "ResetRespawnTokens",
        "ret": "void",
        "class": "CNMRiH_Player",
        "args": null,
        "desc": "Resets active respawn tokens."
    },
    {
        "kind": "function",
        "id": "ResetVoiceCommandTimer",
        "ret": "void",
        "class": "CNMRiH_Player",
        "args": null,
        "desc": "Resets voice command cooldown timer."
    },
    {
        "kind": "function",
        "id": "RespawnTokenCount",
        "ret": "int",
        "class": "CNMRiH_Player",
        "args": null,
        "desc": "Returns active respawn token count."
    },
    {
        "kind": "function",
        "id": "SetExtracted",
        "ret": "void",
        "class": "CNMRiH_Player",
        "args": [
            {
                "type": "bool",
                "id": null
            }
        ],
        "desc": "Sets this player as extracted."
    },
    {
        "kind": "function",
        "id": "SetHandModelOverride",
        "ret": "void",
        "class": "CNMRiH_Player",
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Overrides viewmodel hands, with string parameter for model name."
    },
    {
        "kind": "function",
        "id": "SetIdleTimeout",
        "ret": "void",
        "class": "CNMRiH_Player",
        "args": [
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Sets timeout for idle auto-kick."
    },
    {
        "kind": "function",
        "id": "SetIgnoreFallDamage",
        "ret": "void",
        "class": "CNMRiH_Player",
        "args": [
            {
                "type": "bool",
                "id": null
            }
        ],
        "desc": "Makes the player ignore all fall damage."
    },
    {
        "kind": "function",
        "id": "SetNextRespawnTime",
        "ret": "void",
        "class": "CNMRiH_Player",
        "args": [
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Sets next respawn time for this player."
    },
    {
        "kind": "function",
        "id": "SetNextSpawnTryTime",
        "ret": "void",
        "class": "CNMRiH_Player",
        "args": [
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Sets next spawn attempt time for this player."
    },
    {
        "kind": "function",
        "id": "SetRespawnTokens",
        "ret": "void",
        "class": "CNMRiH_Player",
        "args": [
            {
                "type": "int",
                "id": null
            },
            {
                "type": "bool",
                "id": null
            }
        ],
        "desc": "Sets active respawn tokens, with boolean parameter if player should be notified."
    },
    {
        "kind": "function",
        "id": "SetSpawnWeapon",
        "ret": "void",
        "class": "CNMRiH_Player",
        "args": [
            {
                "type": "string",
                "id": null
            },
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Sets starting weapon when player spawns, with weapon classname, and ammo percent as integer."
    },
    {
        "kind": "function",
        "id": "SetUsingProgressTrigger",
        "ret": "void",
        "class": "CNMRiH_Player",
        "args": [
            {
                "type": "bool",
                "id": null
            }
        ],
        "desc": "Sets the state of player using a tool."
    },
    {
        "kind": "function",
        "id": "ShouldIgnoreFallDamage",
        "ret": "bool",
        "class": "CNMRiH_Player",
        "args": null,
        "desc": "Returns true if player should ignore fall damage."
    },
    {
        "kind": "function",
        "id": "StopBleedingOut",
        "ret": "void",
        "class": "CNMRiH_Player",
        "args": null,
        "desc": "Stops bleeding."
    },
    {
        "kind": "function",
        "id": "ThrowAllAmmo",
        "ret": "void",
        "class": "CNMRiH_Player",
        "args": null,
        "desc": "Throws all ammo that player owns."
    },
    {
        "kind": "function",
        "id": "ThrowAllWeapons",
        "ret": "void",
        "class": "CNMRiH_Player",
        "args": null,
        "desc": "Throws all weapons that player owns."
    },
    {
        "kind": "function",
        "id": "VoiceCommand",
        "ret": "void",
        "class": "CNMRiH_Player",
        "args": [
            {
                "type": "int",
                "id": null
            },
            {
                "type": "bool",
                "id": null
            }
        ],
        "desc": "Tries a voice command, with boolean parameter for playing it regardless of cooldown."
    },
    {
        "kind": "function",
        "id": "AllowsSelectiveFire",
        "ret": "bool",
        "class": "CNMRiH_WeaponBase",
        "args": null,
        "desc": "Returns true if the weapon allows different fire modes."
    },
    {
        "kind": "function",
        "id": "AllowsSuicide",
        "ret": "bool",
        "class": "CNMRiH_WeaponBase",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "CanIronsight",
        "ret": "bool",
        "class": "CNMRiH_WeaponBase",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "GetBloodCount",
        "ret": "int",
        "class": "CNMRiH_WeaponBase",
        "args": null,
        "desc": "Returns visual bloodiness level."
    },
    {
        "kind": "function",
        "id": "GetIronsightPlayerSpeed",
        "ret": "float",
        "class": "CNMRiH_WeaponBase",
        "args": null,
        "desc": "Returns player movement speed while in ironsights."
    },
    {
        "kind": "function",
        "id": "GetMaxThrowDistance",
        "ret": "int",
        "class": "CNMRiH_WeaponBase",
        "args": null,
        "desc": "Returns calculated distance for the weapon throw."
    },
    {
        "kind": "function",
        "id": "GetThrower",
        "ret": "handle",
        "class": "CNMRiH_WeaponBase",
        "args": null,
        "desc": "Returns handle to weapon thrower."
    },
    {
        "kind": "function",
        "id": "GetWeaponID",
        "ret": "int",
        "class": "CNMRiH_WeaponBase",
        "args": null,
        "desc": "Returns weapon ID."
    },
    {
        "kind": "function",
        "id": "HasFirstDrawActivity",
        "ret": "bool",
        "class": "CNMRiH_WeaponBase",
        "args": null,
        "desc": "Returns true if this weapon has an initial draw animation, e.g. pulling back the hammer on pistols."
    },
    {
        "kind": "function",
        "id": "IsAttacking",
        "ret": "bool",
        "class": "CNMRiH_WeaponBase",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "IsBashActiveTimeExpired",
        "ret": "bool",
        "class": "CNMRiH_WeaponBase",
        "args": null,
        "desc": "Returns true if the shove cooldown has expired."
    },
    {
        "kind": "function",
        "id": "IsDry",
        "ret": "bool",
        "class": "CNMRiH_WeaponBase",
        "args": null,
        "desc": "Returns true if the current magazine is empty."
    },
    {
        "kind": "function",
        "id": "IsFlashlightAllowed",
        "ret": "bool",
        "class": "CNMRiH_WeaponBase",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "IsFlashlightOn",
        "ret": "bool",
        "class": "CNMRiH_WeaponBase",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "IsIdle",
        "ret": "bool",
        "class": "CNMRiH_WeaponBase",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "IsIronsighted",
        "ret": "bool",
        "class": "CNMRiH_WeaponBase",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "IsShoveStab",
        "ret": "bool",
        "class": "CNMRiH_WeaponBase",
        "args": null,
        "desc": "Returns true if the shove does stab, i.e. bayonet."
    },
    {
        "kind": "function",
        "id": "UsesTacticalReload",
        "ret": "bool",
        "class": "CNMRiH_WeaponBase",
        "args": null,
        "desc": "Returns true if this weapon can be reloaded while having a full magazine."
    },
    {
        "kind": "function",
        "id": "GetPropArraySize",
        "ret": "int",
        "class": "CNetPropManager",
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Returns the size of an netprop array, or -1."
    },
    {
        "kind": "function",
        "id": "GetPropEntity",
        "ret": "handle",
        "class": "CNetPropManager",
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Reads an EHANDLE valued netprop (21 bit integer). Returns the script handle of the entity."
    },
    {
        "kind": "function",
        "id": "GetPropEntityArray",
        "ret": "handle",
        "class": "CNetPropManager",
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "string",
                "id": null
            },
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Reads an EHANDLE valued netprop (21 bit integer) from an array. Returns the script handle of the entity."
    },
    {
        "kind": "function",
        "id": "GetPropFloat",
        "ret": "float",
        "class": "CNetPropManager",
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Reads a float valued netprop."
    },
    {
        "kind": "function",
        "id": "GetPropFloatArray",
        "ret": "float",
        "class": "CNetPropManager",
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "string",
                "id": null
            },
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Reads a float valued netprop from an array."
    },
    {
        "kind": "function",
        "id": "GetPropInt",
        "ret": "int",
        "class": "CNetPropManager",
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Reads an integer valued netprop."
    },
    {
        "kind": "function",
        "id": "GetPropIntArray",
        "ret": "int",
        "class": "CNetPropManager",
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "string",
                "id": null
            },
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Reads an integer valued netprop from an array."
    },
    {
        "kind": "function",
        "id": "GetPropString",
        "ret": "string",
        "class": "CNetPropManager",
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Reads a string valued netprop."
    },
    {
        "kind": "function",
        "id": "GetPropStringArray",
        "ret": "string",
        "class": "CNetPropManager",
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "string",
                "id": null
            },
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Reads a string valued netprop from an array."
    },
    {
        "kind": "function",
        "id": "GetPropType",
        "ret": "string",
        "class": "CNetPropManager",
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Returns the name of the netprop type as a string."
    },
    {
        "kind": "function",
        "id": "GetPropVector",
        "ret": "Vector",
        "class": "CNetPropManager",
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Reads a 3D vector valued netprop."
    },
    {
        "kind": "function",
        "id": "GetPropVectorArray",
        "ret": "Vector",
        "class": "CNetPropManager",
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "string",
                "id": null
            },
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Reads a 3D vector valued netprop from an array."
    },
    {
        "kind": "function",
        "id": "HasProp",
        "ret": "bool",
        "class": "CNetPropManager",
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Checks if a netprop exists."
    },
    {
        "kind": "function",
        "id": "SetPropEntity",
        "ret": "void",
        "class": "CNetPropManager",
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "string",
                "id": null
            },
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Sets an EHANDLE valued netprop (21 bit integer) to reference the specified entity."
    },
    {
        "kind": "function",
        "id": "SetPropEntityArray",
        "ret": "handle",
        "class": "CNetPropManager",
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "string",
                "id": null
            },
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Sets an EHANDLE valued netprop (21 bit integer) from an array to reference the specified entity."
    },
    {
        "kind": "function",
        "id": "SetPropFloat",
        "ret": "void",
        "class": "CNetPropManager",
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "string",
                "id": null
            },
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Sets a netprop to the specified float."
    },
    {
        "kind": "function",
        "id": "SetPropFloatArray",
        "ret": "void",
        "class": "CNetPropManager",
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "string",
                "id": null
            },
            {
                "type": "float",
                "id": null
            },
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Sets a netprop from an array to the specified float."
    },
    {
        "kind": "function",
        "id": "SetPropInt",
        "ret": "void",
        "class": "CNetPropManager",
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "string",
                "id": null
            },
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Sets a netprop to the specified integer."
    },
    {
        "kind": "function",
        "id": "SetPropIntArray",
        "ret": "void",
        "class": "CNetPropManager",
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "string",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Sets a netprop from an array to the specified integer."
    },
    {
        "kind": "function",
        "id": "SetPropString",
        "ret": "void",
        "class": "CNetPropManager",
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "string",
                "id": null
            },
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Sets a netprop to the specified string."
    },
    {
        "kind": "function",
        "id": "SetPropStringArray",
        "ret": "void",
        "class": "CNetPropManager",
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "string",
                "id": null
            },
            {
                "type": "string",
                "id": null
            },
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Sets a netprop from an array to the specified string."
    },
    {
        "kind": "function",
        "id": "SetPropVector",
        "ret": "void",
        "class": "CNetPropManager",
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "string",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            }
        ],
        "desc": "Sets a netprop to the specified vector."
    },
    {
        "kind": "function",
        "id": "SetPropVectorArray",
        "ret": "void",
        "class": "CNetPropManager",
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "string",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Sets a netprop from an array to the specified vector."
    },
    {
        "kind": "function",
        "id": "CompleteCurrentObjective",
        "ret": "void",
        "class": "CObjectiveManager",
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Completes current objective, with targetname parameter of forced extraction zone."
    },
    {
        "kind": "function",
        "id": "GetCurrentObjectiveBoundary",
        "ret": "string",
        "class": "CObjectiveManager",
        "args": null,
        "desc": "Returns name of current objective boundary."
    },
    {
        "kind": "function",
        "id": "GetCurrentObjectiveIndex",
        "ret": "int",
        "class": "CObjectiveManager",
        "args": null,
        "desc": "Returns current objective index."
    },
    {
        "kind": "function",
        "id": "GetObjectiveCount",
        "ret": "int",
        "class": "CObjectiveManager",
        "args": null,
        "desc": "Returns total objective count."
    },
    {
        "kind": "function",
        "id": "IsCompleted",
        "ret": "bool",
        "class": "CObjectiveManager",
        "args": null,
        "desc": "Returns true if objectives are complete."
    },
    {
        "kind": "function",
        "id": "IsFailed",
        "ret": "bool",
        "class": "CObjectiveManager",
        "args": null,
        "desc": "Returns true if objectives failed."
    },
    {
        "kind": "function",
        "id": "StartNextObjective",
        "ret": "void",
        "class": "CObjectiveManager",
        "args": null,
        "desc": "Starts next objective on the chain."
    },
    {
        "kind": "function",
        "id": "CouldJoinServerAndSpawn",
        "ret": "bool",
        "class": "COverlord_Wave_Controller",
        "args": null,
        "desc": "Returns true if players are able to spawn after joining the server."
    },
    {
        "kind": "function",
        "id": "DidComplete",
        "ret": "bool",
        "class": "COverlord_Wave_Controller",
        "args": null,
        "desc": "Returns true if completed."
    },
    {
        "kind": "function",
        "id": "DidFail",
        "ret": "bool",
        "class": "COverlord_Wave_Controller",
        "args": null,
        "desc": "Returns true if failed."
    },
    {
        "kind": "function",
        "id": "GetNPCsKilled",
        "ret": "int",
        "class": "COverlord_Wave_Controller",
        "args": null,
        "desc": "Returns count of NPCs killed."
    },
    {
        "kind": "function",
        "id": "GetNPCsSpawned",
        "ret": "int",
        "class": "COverlord_Wave_Controller",
        "args": null,
        "desc": "Returns count of NPCs spawned."
    },
    {
        "kind": "function",
        "id": "GetStopWaveNumber",
        "ret": "int",
        "class": "COverlord_Wave_Controller",
        "args": null,
        "desc": "Get stop wave number."
    },
    {
        "kind": "function",
        "id": "GetWaveNumber",
        "ret": "int",
        "class": "COverlord_Wave_Controller",
        "args": null,
        "desc": "Get current wave number."
    },
    {
        "kind": "function",
        "id": "GetWaveProgressPercent",
        "ret": "float",
        "class": "COverlord_Wave_Controller",
        "args": null,
        "desc": "Returns percentage of current wave progress."
    },
    {
        "kind": "function",
        "id": "IsCurrentWaveResupply",
        "ret": "bool",
        "class": "COverlord_Wave_Controller",
        "args": null,
        "desc": "Returns true if current wave is resupply wave."
    },
    {
        "kind": "function",
        "id": "IsWaveResupply",
        "ret": "bool",
        "class": "COverlord_Wave_Controller",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Returns true if waveNum is resupply wave."
    },
    {
        "kind": "function",
        "id": "ResetPlayerTokens",
        "ret": "void",
        "class": "COverlord_Wave_Controller",
        "args": null,
        "desc": "Resets respawn tokens on all players."
    },
    {
        "kind": "function",
        "id": "GetRagdollObject",
        "ret": "handle",
        "class": "CRagdollProp",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Gets the ragdoll object of the specified index."
    },
    {
        "kind": "function",
        "id": "GetRagdollObjectCount",
        "ret": "int",
        "class": "CRagdollProp",
        "args": null,
        "desc": "Gets the number of ragdoll objects on this ragdoll."
    },
    {
        "kind": "function",
        "id": "SetSourceClassName",
        "ret": "void",
        "class": "CRagdollProp",
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Sets the ragdoll's source classname."
    },
    {
        "kind": "function",
        "id": "ApplyCvars",
        "ret": "void",
        "class": "CRulesetManager",
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Applies cvars by string in \"<cvar> <value>\" format, and optionally with ';' delimiter for multiple cvars."
    },
    {
        "kind": "function",
        "id": "RevertCvar",
        "ret": "void",
        "class": "CRulesetManager",
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Reverts cvar by name to ruleset value (when available), or default."
    },
    {
        "kind": "function",
        "id": "EstimateLength",
        "ret": "float",
        "class": "CSceneEntity",
        "args": null,
        "desc": "Returns length of this scene in seconds."
    },
    {
        "kind": "function",
        "id": "FindNamedEntity",
        "ret": "handle",
        "class": "CSceneEntity",
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "given an entity reference, such as !target, get actual entity from scene object"
    },
    {
        "kind": "function",
        "id": "IsPaused",
        "ret": "bool",
        "class": "CSceneEntity",
        "args": null,
        "desc": "If this scene is currently paused."
    },
    {
        "kind": "function",
        "id": "IsPlayingBack",
        "ret": "bool",
        "class": "CSceneEntity",
        "args": null,
        "desc": "If this scene is currently playing."
    },
    {
        "kind": "function",
        "id": "LoadSceneFromString",
        "ret": "bool",
        "class": "CSceneEntity",
        "args": [
            {
                "type": "string",
                "id": null
            },
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "given a dummy scene name and a vcd string, load the scene"
    },
    {
        "kind": "function",
        "id": "GetScene",
        "ret": "handle",
        "class": "CSceneListManager",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Gets the specified scene index from this manager."
    },
    {
        "kind": "function",
        "id": "FindKey",
        "ret": "handle",
        "class": "CScriptKeyValues",
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Given a KeyValues object and a key name, find a KeyValues object associated with the key name"
    },
    {
        "kind": "function",
        "id": "FindOrCreateKey",
        "ret": "handle",
        "class": "CScriptKeyValues",
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Given a KeyValues object and a key name, find or create a KeyValues object associated with the key name"
    },
    {
        "kind": "function",
        "id": "GetBool",
        "ret": "bool",
        "class": "CScriptKeyValues",
        "args": null,
        "desc": "Given a KeyValues object, return its own associated bool value"
    },
    {
        "kind": "function",
        "id": "GetFirstSubKey",
        "ret": "handle",
        "class": "CScriptKeyValues",
        "args": null,
        "desc": "Given a KeyValues object, return the first sub key object"
    },
    {
        "kind": "function",
        "id": "GetFloat",
        "ret": "float",
        "class": "CScriptKeyValues",
        "args": null,
        "desc": "Given a KeyValues object, return its own associated float value"
    },
    {
        "kind": "function",
        "id": "GetInt",
        "ret": "int",
        "class": "CScriptKeyValues",
        "args": null,
        "desc": "Given a KeyValues object, return its own associated integer value"
    },
    {
        "kind": "function",
        "id": "GetKeyBool",
        "ret": "bool",
        "class": "CScriptKeyValues",
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Given a KeyValues object and a key name, return associated bool value"
    },
    {
        "kind": "function",
        "id": "GetKeyFloat",
        "ret": "float",
        "class": "CScriptKeyValues",
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Given a KeyValues object and a key name, return associated float value"
    },
    {
        "kind": "function",
        "id": "GetKeyInt",
        "ret": "int",
        "class": "CScriptKeyValues",
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Given a KeyValues object and a key name, return associated integer value"
    },
    {
        "kind": "function",
        "id": "GetKeyString",
        "ret": "string",
        "class": "CScriptKeyValues",
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Given a KeyValues object and a key name, return associated string value"
    },
    {
        "kind": "function",
        "id": "GetName",
        "ret": "string",
        "class": "CScriptKeyValues",
        "args": null,
        "desc": "Given a KeyValues object, return its name"
    },
    {
        "kind": "function",
        "id": "GetNextKey",
        "ret": "handle",
        "class": "CScriptKeyValues",
        "args": null,
        "desc": "Given a KeyValues object, return the next key object in a sub key group"
    },
    {
        "kind": "function",
        "id": "GetString",
        "ret": "string",
        "class": "CScriptKeyValues",
        "args": null,
        "desc": "Given a KeyValues object, return its own associated string value"
    },
    {
        "kind": "function",
        "id": "IsKeyEmpty",
        "ret": "bool",
        "class": "CScriptKeyValues",
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Given a KeyValues object and a key name, return true if key name has no value"
    },
    {
        "kind": "function",
        "id": "ReleaseKeyValues",
        "ret": "void",
        "class": "CScriptKeyValues",
        "args": null,
        "desc": "Given a root KeyValues object, release its contents"
    },
    {
        "kind": "function",
        "id": "SetBool",
        "ret": "void",
        "class": "CScriptKeyValues",
        "args": [
            {
                "type": "bool",
                "id": null
            }
        ],
        "desc": "Given a KeyValues object, set its own associated bool value"
    },
    {
        "kind": "function",
        "id": "SetFloat",
        "ret": "void",
        "class": "CScriptKeyValues",
        "args": [
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Given a KeyValues object, set its own associated float value"
    },
    {
        "kind": "function",
        "id": "SetInt",
        "ret": "void",
        "class": "CScriptKeyValues",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Given a KeyValues object, set its own associated integer value"
    },
    {
        "kind": "function",
        "id": "SetKeyBool",
        "ret": "void",
        "class": "CScriptKeyValues",
        "args": [
            {
                "type": "string",
                "id": null
            },
            {
                "type": "bool",
                "id": null
            }
        ],
        "desc": "Given a KeyValues object and a key name, set associated bool value"
    },
    {
        "kind": "function",
        "id": "SetKeyFloat",
        "ret": "void",
        "class": "CScriptKeyValues",
        "args": [
            {
                "type": "string",
                "id": null
            },
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Given a KeyValues object and a key name, set associated float value"
    },
    {
        "kind": "function",
        "id": "SetKeyInt",
        "ret": "void",
        "class": "CScriptKeyValues",
        "args": [
            {
                "type": "string",
                "id": null
            },
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Given a KeyValues object and a key name, set associated integer value"
    },
    {
        "kind": "function",
        "id": "SetKeyString",
        "ret": "void",
        "class": "CScriptKeyValues",
        "args": [
            {
                "type": "string",
                "id": null
            },
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Given a KeyValues object and a key name, set associated string value"
    },
    {
        "kind": "function",
        "id": "SetName",
        "ret": "void",
        "class": "CScriptKeyValues",
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Given a KeyValues object, set its name"
    },
    {
        "kind": "function",
        "id": "SetString",
        "ret": "void",
        "class": "CScriptKeyValues",
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Given a KeyValues object, set its own associated string value"
    },
    {
        "kind": "function",
        "id": "SubKeysToTable",
        "ret": "void",
        "class": "CScriptKeyValues",
        "args": [
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Converts to script table."
    },
    {
        "kind": "function",
        "id": "TableToSubKeys",
        "ret": "void",
        "class": "CScriptKeyValues",
        "args": [
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Converts a script table to KeyValues."
    },
    {
        "kind": "function",
        "id": "DoesSoundExpire",
        "ret": "bool",
        "class": "CSound",
        "args": null,
        "desc": "Returns true if the sound expires."
    },
    {
        "kind": "function",
        "id": "GetOwner",
        "ret": "handle",
        "class": "CSound",
        "args": null,
        "desc": "Gets the sound's owner."
    },
    {
        "kind": "function",
        "id": "GetSoundOrigin",
        "ret": "Vector",
        "class": "CSound",
        "args": null,
        "desc": "Gets the sound's origin."
    },
    {
        "kind": "function",
        "id": "GetSoundReactOrigin",
        "ret": "Vector",
        "class": "CSound",
        "args": null,
        "desc": "Gets the sound's react origin."
    },
    {
        "kind": "function",
        "id": "GetTarget",
        "ret": "handle",
        "class": "CSound",
        "args": null,
        "desc": "Gets the sound's target."
    },
    {
        "kind": "function",
        "id": "IsScent",
        "ret": "bool",
        "class": "CSound",
        "args": null,
        "desc": "Returns true if this is a type of scent (as opposed to a sound)."
    },
    {
        "kind": "function",
        "id": "IsSound",
        "ret": "bool",
        "class": "CSound",
        "args": null,
        "desc": "Returns true if this is a type of sound (as opposed to a scent)."
    },
    {
        "kind": "function",
        "id": "IsSoundType",
        "ret": "bool",
        "class": "CSound",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Returns true if the sound type is the specified type."
    },
    {
        "kind": "function",
        "id": "OccludedVolume",
        "ret": "float",
        "class": "CSound",
        "args": null,
        "desc": "Gets the sound's occluded volume."
    },
    {
        "kind": "function",
        "id": "Reset",
        "ret": "void",
        "class": "CSound",
        "args": null,
        "desc": "Clears the volume, type, and origin for the sound without actually removing it."
    },
    {
        "kind": "function",
        "id": "SetSoundOrigin",
        "ret": "void",
        "class": "CSound",
        "args": [
            {
                "type": "Vector",
                "id": null
            }
        ],
        "desc": "Sets the sound's origin."
    },
    {
        "kind": "function",
        "id": "SoundChannel",
        "ret": "int",
        "class": "CSound",
        "args": null,
        "desc": "Gets the sound's channel."
    },
    {
        "kind": "function",
        "id": "SoundContext",
        "ret": "int",
        "class": "CSound",
        "args": null,
        "desc": "Gets the sound type with contexts only."
    },
    {
        "kind": "function",
        "id": "SoundExpirationTime",
        "ret": "float",
        "class": "CSound",
        "args": null,
        "desc": "Gets the sound's expiration time."
    },
    {
        "kind": "function",
        "id": "SoundType",
        "ret": "int",
        "class": "CSound",
        "args": null,
        "desc": "Gets the raw sound type."
    },
    {
        "kind": "function",
        "id": "SoundTypeNoContext",
        "ret": "int",
        "class": "CSound",
        "args": null,
        "desc": "Gets the sound type with contexts excluded."
    },
    {
        "kind": "function",
        "id": "ValidateOwner",
        "ret": "bool",
        "class": "CSound",
        "args": null,
        "desc": "Returns true if the sound's owner is still valid or if the sound never had an owner in the first place."
    },
    {
        "kind": "function",
        "id": "Volume",
        "ret": "int",
        "class": "CSound",
        "args": null,
        "desc": "Gets the sound's volume."
    },
    {
        "kind": "function",
        "id": "AddDamage",
        "ret": "void",
        "class": "CTakeDamageInfo",
        "args": [
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Adds to the damage."
    },
    {
        "kind": "function",
        "id": "AddDamageType",
        "ret": "void",
        "class": "CTakeDamageInfo",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Adds to the damage type."
    },
    {
        "kind": "function",
        "id": "BaseDamageIsValid",
        "ret": "bool",
        "class": "CTakeDamageInfo",
        "args": null,
        "desc": "Checks if the base damage is valid."
    },
    {
        "kind": "function",
        "id": "GetAmmoName",
        "ret": "string",
        "class": "CTakeDamageInfo",
        "args": null,
        "desc": "Gets the ammo type name."
    },
    {
        "kind": "function",
        "id": "GetAmmoType",
        "ret": "int",
        "class": "CTakeDamageInfo",
        "args": null,
        "desc": "Gets the ammo type."
    },
    {
        "kind": "function",
        "id": "GetAttacker",
        "ret": "handle",
        "class": "CTakeDamageInfo",
        "args": null,
        "desc": "Gets the attacker."
    },
    {
        "kind": "function",
        "id": "GetBaseDamage",
        "ret": "float",
        "class": "CTakeDamageInfo",
        "args": null,
        "desc": "Gets the base damage."
    },
    {
        "kind": "function",
        "id": "GetDamage",
        "ret": "float",
        "class": "CTakeDamageInfo",
        "args": null,
        "desc": "Gets the damage."
    },
    {
        "kind": "function",
        "id": "GetDamageBonus",
        "ret": "float",
        "class": "CTakeDamageInfo",
        "args": null,
        "desc": "Gets the damage bonus."
    },
    {
        "kind": "function",
        "id": "GetDamageCustom",
        "ret": "int",
        "class": "CTakeDamageInfo",
        "args": null,
        "desc": "Gets the damage custom."
    },
    {
        "kind": "function",
        "id": "GetDamageForce",
        "ret": "Vector",
        "class": "CTakeDamageInfo",
        "args": null,
        "desc": "Gets the damage force."
    },
    {
        "kind": "function",
        "id": "GetDamagePosition",
        "ret": "Vector",
        "class": "CTakeDamageInfo",
        "args": null,
        "desc": "Gets the damage position."
    },
    {
        "kind": "function",
        "id": "GetDamageStats",
        "ret": "int",
        "class": "CTakeDamageInfo",
        "args": null,
        "desc": "Gets the damage stats."
    },
    {
        "kind": "function",
        "id": "GetDamageType",
        "ret": "int",
        "class": "CTakeDamageInfo",
        "args": null,
        "desc": "Gets the damage type."
    },
    {
        "kind": "function",
        "id": "GetDamagedOtherPlayers",
        "ret": "int",
        "class": "CTakeDamageInfo",
        "args": null,
        "desc": "Gets whether other players have been damaged."
    },
    {
        "kind": "function",
        "id": "GetInflictor",
        "ret": "handle",
        "class": "CTakeDamageInfo",
        "args": null,
        "desc": "Gets the inflictor."
    },
    {
        "kind": "function",
        "id": "GetMaxDamage",
        "ret": "float",
        "class": "CTakeDamageInfo",
        "args": null,
        "desc": "Gets the max damage."
    },
    {
        "kind": "function",
        "id": "GetPlayerPenetrationCount",
        "ret": "int",
        "class": "CTakeDamageInfo",
        "args": null,
        "desc": "Gets the player penetration count."
    },
    {
        "kind": "function",
        "id": "GetReportedPosition",
        "ret": "Vector",
        "class": "CTakeDamageInfo",
        "args": null,
        "desc": "Gets the reported damage position."
    },
    {
        "kind": "function",
        "id": "GetWeapon",
        "ret": "handle",
        "class": "CTakeDamageInfo",
        "args": null,
        "desc": "Gets the weapon."
    },
    {
        "kind": "function",
        "id": "IsForceFriendlyFire",
        "ret": "bool",
        "class": "CTakeDamageInfo",
        "args": null,
        "desc": "Gets force friendly fire."
    },
    {
        "kind": "function",
        "id": "ScaleDamage",
        "ret": "void",
        "class": "CTakeDamageInfo",
        "args": [
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Scales the damage."
    },
    {
        "kind": "function",
        "id": "ScaleDamageForce",
        "ret": "void",
        "class": "CTakeDamageInfo",
        "args": [
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Scales the damage force."
    },
    {
        "kind": "function",
        "id": "SetAmmoType",
        "ret": "void",
        "class": "CTakeDamageInfo",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Sets the ammo type."
    },
    {
        "kind": "function",
        "id": "SetAttacker",
        "ret": "void",
        "class": "CTakeDamageInfo",
        "args": [
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Sets the attacker."
    },
    {
        "kind": "function",
        "id": "SetDamage",
        "ret": "void",
        "class": "CTakeDamageInfo",
        "args": [
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Sets the damage."
    },
    {
        "kind": "function",
        "id": "SetDamageBonus",
        "ret": "void",
        "class": "CTakeDamageInfo",
        "args": [
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Sets the damage bonus."
    },
    {
        "kind": "function",
        "id": "SetDamageBonusWithProvider",
        "ret": "void",
        "class": "CTakeDamageInfo",
        "args": [
            {
                "type": "float",
                "id": null
            },
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Sets the damage bonus."
    },
    {
        "kind": "function",
        "id": "SetDamageCustom",
        "ret": "void",
        "class": "CTakeDamageInfo",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Sets the damage custom."
    },
    {
        "kind": "function",
        "id": "SetDamageForce",
        "ret": "void",
        "class": "CTakeDamageInfo",
        "args": [
            {
                "type": "Vector",
                "id": null
            }
        ],
        "desc": "Sets the damage force."
    },
    {
        "kind": "function",
        "id": "SetDamagePosition",
        "ret": "void",
        "class": "CTakeDamageInfo",
        "args": [
            {
                "type": "Vector",
                "id": null
            }
        ],
        "desc": "Sets the damage position."
    },
    {
        "kind": "function",
        "id": "SetDamageStats",
        "ret": "void",
        "class": "CTakeDamageInfo",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Sets the damage stats."
    },
    {
        "kind": "function",
        "id": "SetDamageType",
        "ret": "void",
        "class": "CTakeDamageInfo",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Sets the damage type."
    },
    {
        "kind": "function",
        "id": "SetDamagedOtherPlayers",
        "ret": "void",
        "class": "CTakeDamageInfo",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Sets whether other players have been damaged."
    },
    {
        "kind": "function",
        "id": "SetForceFriendlyFire",
        "ret": "void",
        "class": "CTakeDamageInfo",
        "args": [
            {
                "type": "bool",
                "id": null
            }
        ],
        "desc": "Sets force friendly fire."
    },
    {
        "kind": "function",
        "id": "SetInflictor",
        "ret": "void",
        "class": "CTakeDamageInfo",
        "args": [
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Sets the inflictor."
    },
    {
        "kind": "function",
        "id": "SetMaxDamage",
        "ret": "void",
        "class": "CTakeDamageInfo",
        "args": [
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Sets the max damage."
    },
    {
        "kind": "function",
        "id": "SetPlayerPenetrationCount",
        "ret": "void",
        "class": "CTakeDamageInfo",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Sets the player penetration count."
    },
    {
        "kind": "function",
        "id": "SetReportedPosition",
        "ret": "void",
        "class": "CTakeDamageInfo",
        "args": [
            {
                "type": "Vector",
                "id": null
            }
        ],
        "desc": "Sets the reported damage position."
    },
    {
        "kind": "function",
        "id": "SetWeapon",
        "ret": "void",
        "class": "CTakeDamageInfo",
        "args": [
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Sets the weapon."
    },
    {
        "kind": "function",
        "id": "SubtractDamage",
        "ret": "void",
        "class": "CTakeDamageInfo",
        "args": [
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Removes from the damage."
    },
    {
        "kind": "function",
        "id": "GetButtons",
        "ret": "int",
        "class": "CUserCmd",
        "args": null,
        "desc": "Input button state."
    },
    {
        "kind": "function",
        "id": "GetCommandNumber",
        "ret": "int",
        "class": "CUserCmd",
        "args": null,
        "desc": "For matching server and client commands for debugging."
    },
    {
        "kind": "function",
        "id": "GetForwardMove",
        "ret": "float",
        "class": "CUserCmd",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "GetImpulse",
        "ret": "int",
        "class": "CUserCmd",
        "args": null,
        "desc": "Impulse command issued."
    },
    {
        "kind": "function",
        "id": "GetMouseX",
        "ret": "int",
        "class": "CUserCmd",
        "args": null,
        "desc": "Mouse accum in x from create move."
    },
    {
        "kind": "function",
        "id": "GetMouseY",
        "ret": "int",
        "class": "CUserCmd",
        "args": null,
        "desc": "Mouse accum in y from create move."
    },
    {
        "kind": "function",
        "id": "GetRandomSeed",
        "ret": "int",
        "class": "CUserCmd",
        "args": null,
        "desc": "For shared random functions."
    },
    {
        "kind": "function",
        "id": "GetSideMove",
        "ret": "float",
        "class": "CUserCmd",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "GetTickCount",
        "ret": "int",
        "class": "CUserCmd",
        "args": null,
        "desc": "The tick the client created this command."
    },
    {
        "kind": "function",
        "id": "GetUpMove",
        "ret": "float",
        "class": "CUserCmd",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "GetViewAngles",
        "ret": "Vector",
        "class": "CUserCmd",
        "args": null,
        "desc": "Player instantaneous view angles."
    },
    {
        "kind": "function",
        "id": "GetWeaponSelect",
        "ret": "int",
        "class": "CUserCmd",
        "args": null,
        "desc": "Current weapon id."
    },
    {
        "kind": "function",
        "id": "GetWeaponSubtype",
        "ret": "int",
        "class": "CUserCmd",
        "args": null,
        "desc": "Current weapon subtype id."
    },
    {
        "kind": "function",
        "id": "SetButtons",
        "ret": "void",
        "class": "CUserCmd",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Sets input button state."
    },
    {
        "kind": "function",
        "id": "SetForwardMove",
        "ret": "void",
        "class": "CUserCmd",
        "args": [
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": null
    },
    {
        "kind": "function",
        "id": "SetImpulse",
        "ret": "void",
        "class": "CUserCmd",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Sets impulse command issued."
    },
    {
        "kind": "function",
        "id": "SetMouseX",
        "ret": "void",
        "class": "CUserCmd",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Sets mouse accum in x from create move."
    },
    {
        "kind": "function",
        "id": "SetMouseY",
        "ret": "void",
        "class": "CUserCmd",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Sets mouse accum in y from create move."
    },
    {
        "kind": "function",
        "id": "SetSideMove",
        "ret": "void",
        "class": "CUserCmd",
        "args": [
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": null
    },
    {
        "kind": "function",
        "id": "SetUpMove",
        "ret": "void",
        "class": "CUserCmd",
        "args": [
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": null
    },
    {
        "kind": "function",
        "id": "SetViewAngles",
        "ret": "void",
        "class": "CUserCmd",
        "args": [
            {
                "type": "Vector",
                "id": null
            }
        ],
        "desc": "Sets player instantaneous view angles."
    },
    {
        "kind": "function",
        "id": "SetWeaponSelect",
        "ret": "void",
        "class": "CUserCmd",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Sets current weapon id."
    },
    {
        "kind": "function",
        "id": "SetWeaponSubtype",
        "ret": "void",
        "class": "CUserCmd",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Sets current weapon subtype id."
    },
    {
        "kind": "function",
        "id": "GetBuildDate",
        "ret": "string",
        "class": "CVersion",
        "args": null,
        "desc": "Returns build date."
    },
    {
        "kind": "function",
        "id": "GetBuildNumber",
        "ret": "int",
        "class": "CVersion",
        "args": null,
        "desc": "Returns build number."
    },
    {
        "kind": "function",
        "id": "GetGameTitle",
        "ret": "string",
        "class": "CVersion",
        "args": null,
        "desc": "Returns game title."
    },
    {
        "kind": "function",
        "id": "GetVersionLabel",
        "ret": "string",
        "class": "CVersion",
        "args": null,
        "desc": "Returns version label."
    },
    {
        "kind": "function",
        "id": "CalcClosestPointOnAABB",
        "ret": "Vector",
        "class": null,
        "args": [
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            }
        ],
        "desc": "Returns the closest point on a bounding box."
    },
    {
        "kind": "function",
        "id": "CalcClosestPointOnLine",
        "ret": "Vector",
        "class": null,
        "args": [
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            }
        ],
        "desc": "Returns the closest point on a line."
    },
    {
        "kind": "function",
        "id": "CalcClosestPointOnLineSegment",
        "ret": "Vector",
        "class": null,
        "args": [
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            }
        ],
        "desc": "Returns the closest point on a line segment."
    },
    {
        "kind": "function",
        "id": "CalcDistanceToLine",
        "ret": "float",
        "class": null,
        "args": [
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            }
        ],
        "desc": "Returns the distance to a line."
    },
    {
        "kind": "function",
        "id": "CalcDistanceToLineSegment",
        "ret": "float",
        "class": null,
        "args": [
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            }
        ],
        "desc": "Returns the distance to a line segment."
    },
    {
        "kind": "function",
        "id": "CalcSqrDistanceToAABB",
        "ret": "float",
        "class": null,
        "args": [
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            }
        ],
        "desc": "Returns the squared distance to a bounding box."
    },
    {
        "kind": "function",
        "id": "CalculateBulletDamageForce",
        "ret": "void",
        "class": null,
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Fill out a damage info handle with a damage force for a bullet impact."
    },
    {
        "kind": "function",
        "id": "CalculateExplosiveDamageForce",
        "ret": "void",
        "class": null,
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Fill out a damage info handle with a damage force for an explosive."
    },
    {
        "kind": "function",
        "id": "CalculateMeleeDamageForce",
        "ret": "void",
        "class": null,
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Fill out a damage info handle with a damage force for a melee impact."
    },
    {
        "kind": "function",
        "id": "CenterPrint",
        "ret": "void",
        "class": null,
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Sends HUD text message to the client. Usage: CenterPrint(<player ent handle>, <string>)"
    },
    {
        "kind": "function",
        "id": "CenterPrintAll",
        "ret": "void",
        "class": null,
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Sends HUD text message to all clients. Usage: CenterPrintAll(<string>)"
    },
    {
        "kind": "function",
        "id": "CenterPrintAllWithParams",
        "ret": "void",
        "class": null,
        "args": [
            {
                "type": "string",
                "id": null
            },
            {
                "type": "string",
                "id": null
            },
            {
                "type": "string",
                "id": null
            },
            {
                "type": "string",
                "id": null
            },
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Sends HUD text message to all clients, with optional string params. Format is limited to strings and is mapped to param order, i.e. %s1, %s2, %s3, %s4. You can pass an empty string as a param to skip. Usage: CenterPrintAllWithParams(<string>, <p1>, <p2>, <p3>, <p4>)"
    },
    {
        "kind": "function",
        "id": "CenterPrintWithParams",
        "ret": "void",
        "class": null,
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "string",
                "id": null
            },
            {
                "type": "string",
                "id": null
            },
            {
                "type": "string",
                "id": null
            },
            {
                "type": "string",
                "id": null
            },
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Sends HUD text message to the client, with optional string params. Format is limited to strings and is mapped to param order, i.e. %s1, %s2, %s3, %s4. You can pass an empty string as a param to skip. Usage: CenterPrintWithParams(<player ent handle>, <string>, <p1>, <p2>, <p3>, <p4>)"
    },
    {
        "kind": "function",
        "id": "GetRawColor",
        "ret": "int",
        "class": "Color",
        "args": null,
        "desc": "Gets the raw color integer."
    },
    {
        "kind": "function",
        "id": "SetColor",
        "ret": "void",
        "class": "Color",
        "args": [
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Sets the color."
    },
    {
        "kind": "function",
        "id": "SetRawColor",
        "ret": "void",
        "class": "Color",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Sets the raw color integer."
    },
    {
        "kind": "function",
        "id": "ConcatTransforms",
        "ret": "void",
        "class": null,
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Concatenates two transformation matrices into another matrix."
    },
    {
        "kind": "function",
        "id": "CreateDamageInfo",
        "ret": "handle",
        "class": null,
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "float",
                "id": null
            },
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": null
    },
    {
        "kind": "function",
        "id": "CreateFireBulletsInfo",
        "ret": "handle",
        "class": null,
        "args": [
            {
                "type": "int",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "float",
                "id": null
            },
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": null
    },
    {
        "kind": "function",
        "id": "CreateProp",
        "ret": "handle",
        "class": null,
        "args": [
            {
                "type": "string",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "string",
                "id": null
            },
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Create a physics prop"
    },
    {
        "kind": "function",
        "id": "CreateRope",
        "ret": "handle",
        "class": null,
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "float",
                "id": null
            },
            {
                "type": "string",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Creates a single rope between two entities. Can optionally follow specific attachments."
    },
    {
        "kind": "function",
        "id": "DebugDrawBox",
        "ret": "void",
        "class": null,
        "args": [
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Draw a debug overlay box"
    },
    {
        "kind": "function",
        "id": "DebugDrawLine",
        "ret": "void",
        "class": null,
        "args": [
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "bool",
                "id": null
            },
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Draw a debug overlay box"
    },
    {
        "kind": "function",
        "id": "DecalTrace",
        "ret": "void",
        "class": null,
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Creates a dynamic decal based on the given trace info. The trace information can be generated by TraceLineComplex() and the decal name must be from decals_subrect.txt."
    },
    {
        "kind": "function",
        "id": "DestroyDamageInfo",
        "ret": "void",
        "class": null,
        "args": [
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": null
    },
    {
        "kind": "function",
        "id": "DestroyFireBulletsInfo",
        "ret": "void",
        "class": null,
        "args": [
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": null
    },
    {
        "kind": "function",
        "id": "DispatchParticleEffect",
        "ret": "function",
        "class": null,
        "args": [
            {
                "type": "particleName",
                "id": null
            },
            {
                "type": "origin",
                "id": null
            },
            {
                "type": "angles",
                "id": null
            },
            {
                "type": "entity",
                "id": null
            }
        ],
        "desc": "Dispatches a one-off particle system"
    },
    {
        "kind": "function",
        "id": "DispatchSpawn",
        "ret": "void",
        "class": null,
        "args": [
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Spawns an unspawned entity."
    },
    {
        "kind": "function",
        "id": "DoIncludeScript",
        "ret": "bool",
        "class": null,
        "args": [
            {
                "type": "string",
                "id": null
            },
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Execute a script (internal)"
    },
    {
        "kind": "function",
        "id": "EmitSoundOn",
        "ret": "void",
        "class": null,
        "args": [
            {
                "type": "string",
                "id": null
            },
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Play named sound on an entity."
    },
    {
        "kind": "function",
        "id": "EmitSoundOnClient",
        "ret": "void",
        "class": null,
        "args": [
            {
                "type": "string",
                "id": null
            },
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Play named sound only on the client for the specified player."
    },
    {
        "kind": "function",
        "id": "EmitSoundParamsOn",
        "ret": "void",
        "class": null,
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Play EmitSound_t params on an entity."
    },
    {
        "kind": "function",
        "id": "ClearOrigin",
        "ret": "void",
        "class": "EmitSound_t",
        "args": null,
        "desc": "Clears the sound's origin override if it has one."
    },
    {
        "kind": "function",
        "id": "GetChannel",
        "ret": "int",
        "class": "EmitSound_t",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "GetEmitCloseCaption",
        "ret": "float",
        "class": "EmitSound_t",
        "args": null,
        "desc": "Gets whether or not the sound will emit closed captioning/subtitles."
    },
    {
        "kind": "function",
        "id": "GetFlags",
        "ret": "int",
        "class": "EmitSound_t",
        "args": null,
        "desc": "Gets the sound's flags. See the 'SND_' set of constants."
    },
    {
        "kind": "function",
        "id": "GetOrigin",
        "ret": "Vector",
        "class": "EmitSound_t",
        "args": null,
        "desc": "Gets the sound's origin override."
    },
    {
        "kind": "function",
        "id": "GetSoundLevel",
        "ret": "int",
        "class": "EmitSound_t",
        "args": null,
        "desc": "Gets the sound's level in decibels. (Note that this may not apply to soundscripts)"
    },
    {
        "kind": "function",
        "id": "GetSoundName",
        "ret": "string",
        "class": "EmitSound_t",
        "args": null,
        "desc": "Gets the sound's file path or soundscript name."
    },
    {
        "kind": "function",
        "id": "GetSoundScriptHandle",
        "ret": "int",
        "class": "EmitSound_t",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "GetSoundTime",
        "ret": "float",
        "class": "EmitSound_t",
        "args": null,
        "desc": "Gets the time the sound will begin, relative to Time()."
    },
    {
        "kind": "function",
        "id": "GetSpeakerEntity",
        "ret": "int",
        "class": "EmitSound_t",
        "args": null,
        "desc": "Gets the sound's original source if it is being transmitted by a microphone."
    },
    {
        "kind": "function",
        "id": "GetSpecialDSP",
        "ret": "int",
        "class": "EmitSound_t",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "GetVolume",
        "ret": "float",
        "class": "EmitSound_t",
        "args": null,
        "desc": "(Note that this may not apply to soundscripts)"
    },
    {
        "kind": "function",
        "id": "GetWarnOnDirectWaveReference",
        "ret": "float",
        "class": "EmitSound_t",
        "args": null,
        "desc": "Gets whether or not the sound will send a message to the console if it references a direct sound file instead of a soundscript."
    },
    {
        "kind": "function",
        "id": "GetWarnOnMissingCloseCaption",
        "ret": "float",
        "class": "EmitSound_t",
        "args": null,
        "desc": "Gets whether or not the sound will send a message to the console if there is no corresponding closed captioning token."
    },
    {
        "kind": "function",
        "id": "HasOrigin",
        "ret": "bool",
        "class": "EmitSound_t",
        "args": null,
        "desc": "Returns true if the sound has an origin override."
    },
    {
        "kind": "function",
        "id": "SetChannel",
        "ret": "void",
        "class": "EmitSound_t",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": null
    },
    {
        "kind": "function",
        "id": "SetEmitCloseCaption",
        "ret": "void",
        "class": "EmitSound_t",
        "args": [
            {
                "type": "bool",
                "id": null
            }
        ],
        "desc": "Sets whether or not the sound will emit closed captioning/subtitles."
    },
    {
        "kind": "function",
        "id": "SetFlags",
        "ret": "void",
        "class": "EmitSound_t",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Sets the sound's flags. See the 'SND_' set of constants."
    },
    {
        "kind": "function",
        "id": "SetOrigin",
        "ret": "void",
        "class": "EmitSound_t",
        "args": [
            {
                "type": "Vector",
                "id": null
            }
        ],
        "desc": "Sets the sound's origin override."
    },
    {
        "kind": "function",
        "id": "SetSoundLevel",
        "ret": "void",
        "class": "EmitSound_t",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Sets the sound's level in decibels. (Note that this may not apply to soundscripts)"
    },
    {
        "kind": "function",
        "id": "SetSoundName",
        "ret": "void",
        "class": "EmitSound_t",
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Sets the sound's file path or soundscript name."
    },
    {
        "kind": "function",
        "id": "SetSoundScriptHandle",
        "ret": "void",
        "class": "EmitSound_t",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": null
    },
    {
        "kind": "function",
        "id": "SetSoundTime",
        "ret": "void",
        "class": "EmitSound_t",
        "args": [
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Sets the time the sound will begin, relative to Time()."
    },
    {
        "kind": "function",
        "id": "SetSpeakerEntity",
        "ret": "void",
        "class": "EmitSound_t",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Sets the sound's original source if it is being transmitted by a microphone."
    },
    {
        "kind": "function",
        "id": "SetSpecialDSP",
        "ret": "void",
        "class": "EmitSound_t",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": null
    },
    {
        "kind": "function",
        "id": "SetVolume",
        "ret": "void",
        "class": "EmitSound_t",
        "args": [
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "(Note that this may not apply to soundscripts)"
    },
    {
        "kind": "function",
        "id": "SetWarnOnDirectWaveReference",
        "ret": "void",
        "class": "EmitSound_t",
        "args": [
            {
                "type": "bool",
                "id": null
            }
        ],
        "desc": "Sets whether or not the sound will send a message to the console if it references a direct sound file instead of a soundscript."
    },
    {
        "kind": "function",
        "id": "SetWarnOnMissingCloseCaption",
        "ret": "void",
        "class": "EmitSound_t",
        "args": [
            {
                "type": "bool",
                "id": null
            }
        ],
        "desc": "Sets whether or not the sound will send a message to the console if there is no corresponding closed captioning token."
    },
    {
        "kind": "function",
        "id": "EntFire",
        "ret": "function",
        "class": null,
        "args": [
            {
                "type": "target",
                "id": null
            },
            {
                "type": "action",
                "id": null
            },
            {
                "type": "value",
                "id": null
            },
            {
                "type": "delay",
                "id": null
            },
            {
                "type": "activator",
                "id": null
            },
            {
                "type": "caller",
                "id": null
            }
        ],
        "desc": "Generate an entity i/o event"
    },
    {
        "kind": "function",
        "id": "EntFireByHandle",
        "ret": "function",
        "class": null,
        "args": [
            {
                "type": "target",
                "id": null
            },
            {
                "type": "action",
                "id": null
            },
            {
                "type": "value",
                "id": null
            },
            {
                "type": "delay",
                "id": null
            },
            {
                "type": "activator",
                "id": null
            },
            {
                "type": "caller",
                "id": null
            }
        ],
        "desc": "Generate an entity i/o event. First parameter is an entity instance."
    },
    {
        "kind": "function",
        "id": "EntIndexToHScript",
        "ret": "handle",
        "class": null,
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Returns the script handle for the given entity index."
    },
    {
        "kind": "function",
        "id": "EntitiesAtPoint",
        "ret": "void",
        "class": null,
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Gets all entities which are intersecting a point in space. This function copies them to an array with a maximum number of elements."
    },
    {
        "kind": "function",
        "id": "EntitiesInBox",
        "ret": "void",
        "class": null,
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Gets all entities which are within a worldspace box. This function copies them to an array with a maximum number of elements."
    },
    {
        "kind": "function",
        "id": "EntitiesInSphere",
        "ret": "void",
        "class": null,
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "float",
                "id": null
            },
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Gets all entities which are within a sphere. This function copies them to an array with a maximum number of elements."
    },
    {
        "kind": "function",
        "id": "ExponentialDecay",
        "ret": "float",
        "class": null,
        "args": [
            {
                "type": "float",
                "id": null
            },
            {
                "type": "float",
                "id": null
            },
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "decayTo is factor the value should decay to in decayTime"
    },
    {
        "kind": "function",
        "id": "FLerp",
        "ret": "float",
        "class": null,
        "args": [
            {
                "type": "float",
                "id": null
            },
            {
                "type": "float",
                "id": null
            },
            {
                "type": "float",
                "id": null
            },
            {
                "type": "float",
                "id": null
            },
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": null
    },
    {
        "kind": "function",
        "id": "FileToKeyValues",
        "ret": "handle",
        "class": null,
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Returns the CScriptKeyValues from the file, null if no file or file is too big."
    },
    {
        "kind": "function",
        "id": "GetAdditionalIgnoreEnt",
        "ret": "handle",
        "class": "FireBulletsInfo_t",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "GetAmmoType",
        "ret": "int",
        "class": "FireBulletsInfo_t",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "GetAttacker",
        "ret": "handle",
        "class": "FireBulletsInfo_t",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "GetDamage",
        "ret": "float",
        "class": "FireBulletsInfo_t",
        "args": null,
        "desc": "Gets the damage the bullets should deal. 0 = use ammo type"
    },
    {
        "kind": "function",
        "id": "GetDamageForceScale",
        "ret": "float",
        "class": "FireBulletsInfo_t",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "GetDirShooting",
        "ret": "Vector",
        "class": "FireBulletsInfo_t",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "GetDistance",
        "ret": "float",
        "class": "FireBulletsInfo_t",
        "args": null,
        "desc": "Gets the distance the bullets should travel."
    },
    {
        "kind": "function",
        "id": "GetFlags",
        "ret": "int",
        "class": "FireBulletsInfo_t",
        "args": null,
        "desc": "Gets the flags the bullets should use."
    },
    {
        "kind": "function",
        "id": "GetPlayerDamage",
        "ret": "int",
        "class": "FireBulletsInfo_t",
        "args": null,
        "desc": "Gets the damage the bullets should deal when hitting the player. 0 = use regular damage"
    },
    {
        "kind": "function",
        "id": "GetPrimaryAttack",
        "ret": "bool",
        "class": "FireBulletsInfo_t",
        "args": null,
        "desc": "Gets whether the bullets came from a primary attack."
    },
    {
        "kind": "function",
        "id": "GetShots",
        "ret": "int",
        "class": "FireBulletsInfo_t",
        "args": null,
        "desc": "Gets the number of shots which should be fired."
    },
    {
        "kind": "function",
        "id": "GetSource",
        "ret": "Vector",
        "class": "FireBulletsInfo_t",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "GetSpread",
        "ret": "Vector",
        "class": "FireBulletsInfo_t",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "GetTracerFreq",
        "ret": "int",
        "class": "FireBulletsInfo_t",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "SetAdditionalIgnoreEnt",
        "ret": "void",
        "class": "FireBulletsInfo_t",
        "args": [
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": null
    },
    {
        "kind": "function",
        "id": "SetAmmoType",
        "ret": "void",
        "class": "FireBulletsInfo_t",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": null
    },
    {
        "kind": "function",
        "id": "SetAttacker",
        "ret": "void",
        "class": "FireBulletsInfo_t",
        "args": [
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": null
    },
    {
        "kind": "function",
        "id": "SetDamage",
        "ret": "void",
        "class": "FireBulletsInfo_t",
        "args": [
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Sets the damage the bullets should deal. 0 = use ammo type"
    },
    {
        "kind": "function",
        "id": "SetDamageForceScale",
        "ret": "void",
        "class": "FireBulletsInfo_t",
        "args": [
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": null
    },
    {
        "kind": "function",
        "id": "SetDirShooting",
        "ret": "void",
        "class": "FireBulletsInfo_t",
        "args": [
            {
                "type": "Vector",
                "id": null
            }
        ],
        "desc": null
    },
    {
        "kind": "function",
        "id": "SetDistance",
        "ret": "void",
        "class": "FireBulletsInfo_t",
        "args": [
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Sets the distance the bullets should travel."
    },
    {
        "kind": "function",
        "id": "SetFlags",
        "ret": "void",
        "class": "FireBulletsInfo_t",
        "args": [
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Sets the flags the bullets should use."
    },
    {
        "kind": "function",
        "id": "SetPlayerDamage",
        "ret": "void",
        "class": "FireBulletsInfo_t",
        "args": [
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Sets the damage the bullets should deal when hitting the player. 0 = use regular damage"
    },
    {
        "kind": "function",
        "id": "SetPrimaryAttack",
        "ret": "void",
        "class": "FireBulletsInfo_t",
        "args": [
            {
                "type": "bool",
                "id": null
            }
        ],
        "desc": "Sets whether the bullets came from a primary attack."
    },
    {
        "kind": "function",
        "id": "SetShots",
        "ret": "void",
        "class": "FireBulletsInfo_t",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Sets the number of shots which should be fired."
    },
    {
        "kind": "function",
        "id": "SetSource",
        "ret": "void",
        "class": "FireBulletsInfo_t",
        "args": [
            {
                "type": "Vector",
                "id": null
            }
        ],
        "desc": null
    },
    {
        "kind": "function",
        "id": "SetSpread",
        "ret": "void",
        "class": "FireBulletsInfo_t",
        "args": [
            {
                "type": "Vector",
                "id": null
            }
        ],
        "desc": null
    },
    {
        "kind": "function",
        "id": "SetTracerFreq",
        "ret": "void",
        "class": "FireBulletsInfo_t",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": null
    },
    {
        "kind": "function",
        "id": "FireGameEvent",
        "ret": "void",
        "class": null,
        "args": [
            {
                "type": "string",
                "id": null
            },
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Fire a game event."
    },
    {
        "kind": "function",
        "id": "FireGameEventLocal",
        "ret": "void",
        "class": null,
        "args": [
            {
                "type": "string",
                "id": null
            },
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Fire a game event without broadcasting to the client."
    },
    {
        "kind": "function",
        "id": "FrameTime",
        "ret": "float",
        "class": null,
        "args": null,
        "desc": "Get the time spent on the server in the last frame"
    },
    {
        "kind": "function",
        "id": "FreeMatrixInstance",
        "ret": "void",
        "class": null,
        "args": [
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Frees an allocated matrix instance."
    },
    {
        "kind": "function",
        "id": "FreeQuaternionInstance",
        "ret": "void",
        "class": null,
        "args": [
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Frees an allocated quaternion instance."
    },
    {
        "kind": "function",
        "id": "Gain",
        "ret": "float",
        "class": null,
        "args": [
            {
                "type": "float",
                "id": null
            },
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Gain is similar to Bias, but biasAmt biases towards or away from 0.5."
    },
    {
        "kind": "function",
        "id": "GetActivityName",
        "ret": "string",
        "class": null,
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Gets the name of the specified activity index."
    },
    {
        "kind": "function",
        "id": "GetCPUUsage",
        "ret": "float",
        "class": null,
        "args": null,
        "desc": "Get CPU usage percentage."
    },
    {
        "kind": "function",
        "id": "GetFrameCount",
        "ret": "int",
        "class": null,
        "args": null,
        "desc": "Absolute frame counter"
    },
    {
        "kind": "function",
        "id": "GetLoadType",
        "ret": "int",
        "class": null,
        "args": null,
        "desc": "Get the way the current game was loaded (corresponds to the MapLoad enum)"
    },
    {
        "kind": "function",
        "id": "GetMapName",
        "ret": "string",
        "class": null,
        "args": null,
        "desc": "Get the name of the map."
    },
    {
        "kind": "function",
        "id": "GetPhysAngVelocity",
        "ret": "Vector",
        "class": null,
        "args": [
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Gets physics angular velocity for the given VPhysics object"
    },
    {
        "kind": "function",
        "id": "GetPhysVelocity",
        "ret": "Vector",
        "class": null,
        "args": [
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Gets physics velocity for the given VPhysics object"
    },
    {
        "kind": "function",
        "id": "GetPlayerByIndex",
        "ret": "handle",
        "class": null,
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Returns a handle to a player by index. Only returns if the player is spawned and connected, otherwise returns null."
    },
    {
        "kind": "function",
        "id": "GetPlayerByName",
        "ret": "handle",
        "class": null,
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Returns a handle to a player by name."
    },
    {
        "kind": "function",
        "id": "GetPlayerByUserId",
        "ret": "handle",
        "class": null,
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Returns a handle to a player by user id."
    },
    {
        "kind": "function",
        "id": "GuessDamageForce",
        "ret": "void",
        "class": null,
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Try and guess the physics force to use."
    },
    {
        "kind": "function",
        "id": "ApplyForceCenter",
        "ret": "void",
        "class": "IPhysicsObject",
        "args": [
            {
                "type": "Vector",
                "id": null
            }
        ],
        "desc": null
    },
    {
        "kind": "function",
        "id": "ApplyForceOffset",
        "ret": "void",
        "class": "IPhysicsObject",
        "args": [
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            }
        ],
        "desc": null
    },
    {
        "kind": "function",
        "id": "ApplyTorqueCenter",
        "ret": "void",
        "class": "IPhysicsObject",
        "args": [
            {
                "type": "Vector",
                "id": null
            }
        ],
        "desc": null
    },
    {
        "kind": "function",
        "id": "EnableCollisions",
        "ret": "void",
        "class": "IPhysicsObject",
        "args": [
            {
                "type": "bool",
                "id": null
            }
        ],
        "desc": null
    },
    {
        "kind": "function",
        "id": "EnableDrag",
        "ret": "void",
        "class": "IPhysicsObject",
        "args": [
            {
                "type": "bool",
                "id": null
            }
        ],
        "desc": null
    },
    {
        "kind": "function",
        "id": "EnableGravity",
        "ret": "void",
        "class": "IPhysicsObject",
        "args": [
            {
                "type": "bool",
                "id": null
            }
        ],
        "desc": null
    },
    {
        "kind": "function",
        "id": "EnableMotion",
        "ret": "void",
        "class": "IPhysicsObject",
        "args": [
            {
                "type": "bool",
                "id": null
            }
        ],
        "desc": null
    },
    {
        "kind": "function",
        "id": "GetInertia",
        "ret": "Vector",
        "class": "IPhysicsObject",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "GetInvInertia",
        "ret": "Vector",
        "class": "IPhysicsObject",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "GetInvMass",
        "ret": "float",
        "class": "IPhysicsObject",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "GetMass",
        "ret": "float",
        "class": "IPhysicsObject",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "GetName",
        "ret": "string",
        "class": "IPhysicsObject",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "IsAsleep",
        "ret": "bool",
        "class": "IPhysicsObject",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "IsAttachedToConstraint",
        "ret": "bool",
        "class": "IPhysicsObject",
        "args": [
            {
                "type": "bool",
                "id": null
            }
        ],
        "desc": null
    },
    {
        "kind": "function",
        "id": "IsCollisionEnabled",
        "ret": "bool",
        "class": "IPhysicsObject",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "IsDragEnabled",
        "ret": "bool",
        "class": "IPhysicsObject",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "IsFluid",
        "ret": "bool",
        "class": "IPhysicsObject",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "IsGravityEnabled",
        "ret": "bool",
        "class": "IPhysicsObject",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "IsHinged",
        "ret": "bool",
        "class": "IPhysicsObject",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "IsMotionEnabled",
        "ret": "bool",
        "class": "IPhysicsObject",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "IsMoveable",
        "ret": "bool",
        "class": "IPhysicsObject",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "IsStatic",
        "ret": "bool",
        "class": "IPhysicsObject",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "IsTrigger",
        "ret": "bool",
        "class": "IPhysicsObject",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "SetInertia",
        "ret": "void",
        "class": "IPhysicsObject",
        "args": [
            {
                "type": "Vector",
                "id": null
            }
        ],
        "desc": null
    },
    {
        "kind": "function",
        "id": "SetMass",
        "ret": "void",
        "class": "IPhysicsObject",
        "args": [
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": null
    },
    {
        "kind": "function",
        "id": "Sleep",
        "ret": "void",
        "class": "IPhysicsObject",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "Wake",
        "ret": "void",
        "class": "IPhysicsObject",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "InsertAISound",
        "ret": "void",
        "class": null,
        "args": [
            {
                "type": "int",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "float",
                "id": null
            },
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Inserts an AI sound."
    },
    {
        "kind": "function",
        "id": "IntervalPerTick",
        "ret": "float",
        "class": null,
        "args": null,
        "desc": "Simulation tick interval"
    },
    {
        "kind": "function",
        "id": "IsClient",
        "ret": "bool",
        "class": null,
        "args": null,
        "desc": "Returns true if the script is being run on the client."
    },
    {
        "kind": "function",
        "id": "IsDedicatedServer",
        "ret": "bool",
        "class": null,
        "args": null,
        "desc": "Is this a dedicated server?"
    },
    {
        "kind": "function",
        "id": "IsServer",
        "ret": "bool",
        "class": null,
        "args": null,
        "desc": "Returns true if the script is being run on the server."
    },
    {
        "kind": "function",
        "id": "Lerp",
        "ret": "float",
        "class": null,
        "args": [
            {
                "type": "float",
                "id": null
            },
            {
                "type": "float",
                "id": null
            },
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": null
    },
    {
        "kind": "function",
        "id": "ListenToGameEvent",
        "ret": "int",
        "class": null,
        "args": [
            {
                "type": "string",
                "id": null
            },
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Register as a listener for a game event from script."
    },
    {
        "kind": "function",
        "id": "MatricesAreEqual",
        "ret": "void",
        "class": null,
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Checks if two matrices are equal."
    },
    {
        "kind": "function",
        "id": "MatrixAngles",
        "ret": "void",
        "class": null,
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            }
        ],
        "desc": "Gets the angles and position of a matrix."
    },
    {
        "kind": "function",
        "id": "MatrixCopy",
        "ret": "void",
        "class": null,
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Copies a matrix to another matrix."
    },
    {
        "kind": "function",
        "id": "MatrixGetColumn",
        "ret": "Vector",
        "class": null,
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Gets the column of a matrix."
    },
    {
        "kind": "function",
        "id": "MatrixGetTranslation",
        "ret": "Vector",
        "class": null,
        "args": [
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Gets a matrix's translation."
    },
    {
        "kind": "function",
        "id": "MatrixInvert",
        "ret": "void",
        "class": null,
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Inverts a matrix and copies the result to another matrix."
    },
    {
        "kind": "function",
        "id": "MatrixQuaternion",
        "ret": "void",
        "class": null,
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Converts a matrix to a quaternion."
    },
    {
        "kind": "function",
        "id": "MatrixScaleBy",
        "ret": "void",
        "class": null,
        "args": [
            {
                "type": "float",
                "id": null
            },
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Scales a matrix."
    },
    {
        "kind": "function",
        "id": "MatrixScaleByZero",
        "ret": "void",
        "class": null,
        "args": [
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Scales a matrix by zero."
    },
    {
        "kind": "function",
        "id": "MatrixSetColumn",
        "ret": "void",
        "class": null,
        "args": [
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Sets the column of a matrix."
    },
    {
        "kind": "function",
        "id": "MatrixSetTranslation",
        "ret": "void",
        "class": null,
        "args": [
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Sets a matrix's translation."
    },
    {
        "kind": "function",
        "id": "MaxPlayers",
        "ret": "int",
        "class": null,
        "args": null,
        "desc": "Get the maximum number of players allowed on this server"
    },
    {
        "kind": "function",
        "id": "Msg",
        "ret": "void",
        "class": null,
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": null
    },
    {
        "kind": "function",
        "id": "NPrint",
        "ret": "void",
        "class": null,
        "args": [
            {
                "type": "int",
                "id": null
            },
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Notification print"
    },
    {
        "kind": "function",
        "id": "NXPrint",
        "ret": "void",
        "class": null,
        "args": [
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "bool",
                "id": null
            },
            {
                "type": "float",
                "id": null
            },
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Notification print, customised"
    },
    {
        "kind": "function",
        "id": "PrecacheEntityFromTable",
        "ret": "void",
        "class": null,
        "args": [
            {
                "type": "string",
                "id": null
            },
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Precache an entity from KeyValues in a table."
    },
    {
        "kind": "function",
        "id": "PrecacheMaterial",
        "ret": "void",
        "class": null,
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Precaches a material for later usage."
    },
    {
        "kind": "function",
        "id": "PrecacheModel",
        "ret": "int",
        "class": null,
        "args": [
            {
                "type": "string",
                "id": null
            },
            {
                "type": "bool",
                "id": null
            }
        ],
        "desc": "Precaches a model for later usage."
    },
    {
        "kind": "function",
        "id": "PrecacheOther",
        "ret": "void",
        "class": null,
        "args": [
            {
                "type": "string",
                "id": null
            },
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Precaches an entity class for later usage."
    },
    {
        "kind": "function",
        "id": "PrecacheParticleSystem",
        "ret": "void",
        "class": null,
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Precaches a particle system for later usage."
    },
    {
        "kind": "function",
        "id": "PredictedPosition",
        "ret": "Vector",
        "class": null,
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Predicts what an entity's position will be in a given amount of time."
    },
    {
        "kind": "function",
        "id": "Init",
        "ret": "void",
        "class": "Quaternion",
        "args": [
            {
                "type": "float",
                "id": null
            },
            {
                "type": "float",
                "id": null
            },
            {
                "type": "float",
                "id": null
            },
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Creates a quaternion with the given values."
    },
    {
        "kind": "function",
        "id": "QuaternionAdd",
        "ret": "void",
        "class": null,
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Adds two quaternions together into another quaternion."
    },
    {
        "kind": "function",
        "id": "QuaternionAngles",
        "ret": "Vector",
        "class": null,
        "args": [
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Converts a quaternion to angles."
    },
    {
        "kind": "function",
        "id": "QuaternionMatrix",
        "ret": "void",
        "class": null,
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Converts a quaternion to a matrix."
    },
    {
        "kind": "function",
        "id": "RandomFloat",
        "ret": "float",
        "class": null,
        "args": [
            {
                "type": "float",
                "id": null
            },
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Generate a random floating point number within a range, inclusive."
    },
    {
        "kind": "function",
        "id": "RandomInt",
        "ret": "int",
        "class": null,
        "args": [
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Generate a random integer within a range, inclusive."
    },
    {
        "kind": "function",
        "id": "ReadMapKeyValues",
        "ret": "handle",
        "class": null,
        "args": null,
        "desc": "Read the KeyValues from <mapname>_kv.txt file."
    },
    {
        "kind": "function",
        "id": "RegisterActivityConstants",
        "ret": "void",
        "class": null,
        "args": null,
        "desc": "Registers all activity IDs as usable constants."
    },
    {
        "kind": "function",
        "id": "RemapVal",
        "ret": "float",
        "class": null,
        "args": [
            {
                "type": "float",
                "id": null
            },
            {
                "type": "float",
                "id": null
            },
            {
                "type": "float",
                "id": null
            },
            {
                "type": "float",
                "id": null
            },
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": null
    },
    {
        "kind": "function",
        "id": "RemapValClamped",
        "ret": "float",
        "class": null,
        "args": [
            {
                "type": "float",
                "id": null
            },
            {
                "type": "float",
                "id": null
            },
            {
                "type": "float",
                "id": null
            },
            {
                "type": "float",
                "id": null
            },
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": null
    },
    {
        "kind": "function",
        "id": "SaveEntityKVToTable",
        "ret": "void",
        "class": null,
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Saves an entity's keyvalues to a table."
    },
    {
        "kind": "function",
        "id": "SetIdentityMatrix",
        "ret": "void",
        "class": null,
        "args": [
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Turns a matrix into an identity matrix."
    },
    {
        "kind": "function",
        "id": "SetPhysVelocity",
        "ret": "void",
        "class": null,
        "args": [
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            }
        ],
        "desc": "Sets physics velocity for the given VPhysics object"
    },
    {
        "kind": "function",
        "id": "SetScaleMatrix",
        "ret": "void",
        "class": null,
        "args": [
            {
                "type": "float",
                "id": null
            },
            {
                "type": "float",
                "id": null
            },
            {
                "type": "float",
                "id": null
            },
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Builds a scale matrix."
    },
    {
        "kind": "function",
        "id": "ShowMessage",
        "ret": "void",
        "class": null,
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Print a hud message on all clients"
    },
    {
        "kind": "function",
        "id": "SimpleSpline",
        "ret": "float",
        "class": null,
        "args": [
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": null
    },
    {
        "kind": "function",
        "id": "SimpleSplineRemapVal",
        "ret": "float",
        "class": null,
        "args": [
            {
                "type": "float",
                "id": null
            },
            {
                "type": "float",
                "id": null
            },
            {
                "type": "float",
                "id": null
            },
            {
                "type": "float",
                "id": null
            },
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "remaps a value in [startInterval, startInterval+rangeInterval] from linear to spline using SimpleSpline"
    },
    {
        "kind": "function",
        "id": "SimpleSplineRemapValClamped",
        "ret": "float",
        "class": null,
        "args": [
            {
                "type": "float",
                "id": null
            },
            {
                "type": "float",
                "id": null
            },
            {
                "type": "float",
                "id": null
            },
            {
                "type": "float",
                "id": null
            },
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "remaps a value in [startInterval, startInterval+rangeInterval] from linear to spline using SimpleSpline"
    },
    {
        "kind": "function",
        "id": "SmoothCurve",
        "ret": "float",
        "class": null,
        "args": [
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "SmoothCurve maps a 0-1 value into another 0-1 value based on a cosine wave"
    },
    {
        "kind": "function",
        "id": "SmoothCurve_Tweak",
        "ret": "float",
        "class": null,
        "args": [
            {
                "type": "float",
                "id": null
            },
            {
                "type": "float",
                "id": null
            },
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "SmoothCurve peaks at flPeakPos, flPeakSharpness controls the sharpness of the peak"
    },
    {
        "kind": "function",
        "id": "SpawnEntityFromKeyValues",
        "ret": "handle",
        "class": null,
        "args": [
            {
                "type": "string",
                "id": null
            },
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Spawns an entity with the keyvalues in a CScriptKeyValues handle."
    },
    {
        "kind": "function",
        "id": "SpawnEntityFromTable",
        "ret": "handle",
        "class": null,
        "args": [
            {
                "type": "string",
                "id": null
            },
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Native function for entity spawning."
    },
    {
        "kind": "function",
        "id": "StopListeningToAllGameEvents",
        "ret": "void",
        "class": null,
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Stop listening to all game events within a specific context."
    },
    {
        "kind": "function",
        "id": "StopListeningToGameEvent",
        "ret": "bool",
        "class": null,
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Stop the specified event listener."
    },
    {
        "kind": "function",
        "id": "Time",
        "ret": "float",
        "class": null,
        "args": null,
        "desc": "Get the current server time"
    },
    {
        "kind": "function",
        "id": "TraceHullComplex",
        "ret": "handle",
        "class": null,
        "args": [
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Takes 2 points, min/max hull bounds, an ent to ignore, a trace mask, and a collision group to trace to a point using a hull. Returns a handle which can access all trace info."
    },
    {
        "kind": "function",
        "id": "TraceLine",
        "ret": "float",
        "class": null,
        "args": [
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "given 2 points & ent to ignore, return fraction along line that hits world or models"
    },
    {
        "kind": "function",
        "id": "TraceLineComplex",
        "ret": "handle",
        "class": null,
        "args": [
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "handle",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Complex version of TraceLine which takes 2 points, an ent to ignore, a trace mask, and a collision group. Returns a handle which can access all trace info."
    },
    {
        "kind": "function",
        "id": "UniqueString",
        "ret": "function",
        "class": null,
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Generate a string guaranteed to be unique across the life of the script VM, with an optional root string. Useful for adding data to tables when not sure what keys are already in use in that table."
    },
    {
        "kind": "function",
        "id": "Cross",
        "ret": "float",
        "class": "Vector",
        "args": [
            {
                "type": "vector",
                "id": null
            }
        ],
        "desc": "Return the vector product of two vectors."
    },
    {
        "kind": "function",
        "id": "Dot",
        "ret": "float",
        "class": "Vector",
        "args": [
            {
                "type": "vector",
                "id": null
            }
        ],
        "desc": "Return the dot/scalar product of two vectors."
    },
    {
        "kind": "function",
        "id": "Length",
        "ret": "float",
        "class": "Vector",
        "args": null,
        "desc": "Return the vector's length."
    },
    {
        "kind": "function",
        "id": "Length2D",
        "ret": "float",
        "class": "Vector",
        "args": null,
        "desc": "Return the vector's 2D length."
    },
    {
        "kind": "function",
        "id": "Length2DSqr",
        "ret": "float",
        "class": "Vector",
        "args": null,
        "desc": "Return the vector's squared 2D length."
    },
    {
        "kind": "function",
        "id": "LengthSqr",
        "ret": "float",
        "class": "Vector",
        "args": null,
        "desc": "Return the vector's squared length."
    },
    {
        "kind": "function",
        "id": "Norm",
        "ret": "void",
        "class": "Vector",
        "args": null,
        "desc": "Normalize the vector in place."
    },
    {
        "kind": "function",
        "id": "Normalized",
        "ret": "float",
        "class": "Vector",
        "args": null,
        "desc": "Return a normalized version of the vector."
    },
    {
        "kind": "function",
        "id": "Scale",
        "ret": "vector",
        "class": "Vector",
        "args": [
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": "Scale the vector's magnitude and return the result."
    },
    {
        "kind": "function",
        "id": "ToKVString",
        "ret": "string",
        "class": "Vector",
        "args": null,
        "desc": "Return a vector as a string in KeyValue form, without separation commas."
    },
    {
        "kind": "function",
        "id": "VectorAngles",
        "ret": "Vector",
        "class": null,
        "args": [
            {
                "type": "Vector",
                "id": null
            }
        ],
        "desc": "Turns a direction vector into an angle."
    },
    {
        "kind": "function",
        "id": "VectorIRotate",
        "ret": "Vector",
        "class": null,
        "args": [
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Rotates a vector with the inverse of a matrix."
    },
    {
        "kind": "function",
        "id": "VectorITransform",
        "ret": "Vector",
        "class": null,
        "args": [
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Transforms a vector with the inverse of a matrix."
    },
    {
        "kind": "function",
        "id": "VectorRotate",
        "ret": "Vector",
        "class": null,
        "args": [
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Rotates a vector with a matrix."
    },
    {
        "kind": "function",
        "id": "VectorTransform",
        "ret": "Vector",
        "class": null,
        "args": [
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Transforms a vector with a matrix."
    },
    {
        "kind": "function",
        "id": "WriteMapKeyValues",
        "ret": "bool",
        "class": null,
        "args": [
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Stores the CScriptKeyValues into <mapname>_kv.txt file."
    },
    {
        "kind": "function",
        "id": "clamp",
        "ret": "float",
        "class": null,
        "args": [
            {
                "type": "float",
                "id": null
            },
            {
                "type": "float",
                "id": null
            },
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": null
    },
    {
        "kind": "function",
        "id": "Name",
        "ret": "string",
        "class": "csurface_t",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "SurfaceProps",
        "ret": "handle",
        "class": "csurface_t",
        "args": null,
        "desc": "The surface's properties."
    },
    {
        "kind": "function",
        "id": "Init",
        "ret": "void",
        "class": "matrix3x4_t",
        "args": [
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            },
            {
                "type": "Vector",
                "id": null
            }
        ],
        "desc": "Creates a matrix where the X axis = forward, the Y axis = left, and the Z axis = up."
    },
    {
        "kind": "function",
        "id": "max",
        "ret": "float",
        "class": null,
        "args": [
            {
                "type": "float",
                "id": null
            },
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": null
    },
    {
        "kind": "function",
        "id": "min",
        "ret": "float",
        "class": null,
        "args": [
            {
                "type": "float",
                "id": null
            },
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": null
    },
    {
        "kind": "function",
        "id": "printc",
        "ret": "void",
        "class": null,
        "args": [
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Version of print() which takes a color before the message."
    },
    {
        "kind": "function",
        "id": "printcl",
        "ret": "void",
        "class": null,
        "args": [
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "int",
                "id": null
            },
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": "Version of printl() which takes a color before the message."
    },
    {
        "kind": "function",
        "id": "GetCycle",
        "ret": "float",
        "class": "scriptanimevent_t",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "GetEvent",
        "ret": "int",
        "class": "scriptanimevent_t",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "GetEventTime",
        "ret": "float",
        "class": "scriptanimevent_t",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "GetOptions",
        "ret": "string",
        "class": "scriptanimevent_t",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "GetSource",
        "ret": "handle",
        "class": "scriptanimevent_t",
        "args": null,
        "desc": "Gets the event's source entity."
    },
    {
        "kind": "function",
        "id": "GetType",
        "ret": "int",
        "class": "scriptanimevent_t",
        "args": null,
        "desc": "Gets the event's type flags. See the 'AE_TYPE_' set of constants for valid flags."
    },
    {
        "kind": "function",
        "id": "SetCycle",
        "ret": "void",
        "class": "scriptanimevent_t",
        "args": [
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": null
    },
    {
        "kind": "function",
        "id": "SetEvent",
        "ret": "void",
        "class": "scriptanimevent_t",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": null
    },
    {
        "kind": "function",
        "id": "SetEventTime",
        "ret": "void",
        "class": "scriptanimevent_t",
        "args": [
            {
                "type": "float",
                "id": null
            }
        ],
        "desc": null
    },
    {
        "kind": "function",
        "id": "SetOptions",
        "ret": "void",
        "class": "scriptanimevent_t",
        "args": [
            {
                "type": "string",
                "id": null
            }
        ],
        "desc": null
    },
    {
        "kind": "function",
        "id": "SetSource",
        "ret": "void",
        "class": "scriptanimevent_t",
        "args": [
            {
                "type": "handle",
                "id": null
            }
        ],
        "desc": "Sets the event's source entity."
    },
    {
        "kind": "function",
        "id": "SetType",
        "ret": "void",
        "class": "scriptanimevent_t",
        "args": [
            {
                "type": "int",
                "id": null
            }
        ],
        "desc": "Sets the event's type flags. See the 'AE_TYPE_' set of constants for valid flags."
    },
    {
        "kind": "function",
        "id": "GetFriction",
        "ret": "float",
        "class": "surfacedata_t",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "GetJumpFactor",
        "ret": "float",
        "class": "surfacedata_t",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "GetMaterialChar",
        "ret": "char",
        "class": "surfacedata_t",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "GetSoundBreak",
        "ret": "string",
        "class": "surfacedata_t",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "GetSoundBulletImpact",
        "ret": "string",
        "class": "surfacedata_t",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "GetSoundImpactHard",
        "ret": "string",
        "class": "surfacedata_t",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "GetSoundImpactSoft",
        "ret": "string",
        "class": "surfacedata_t",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "GetSoundRolling",
        "ret": "string",
        "class": "surfacedata_t",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "GetSoundScrapeRough",
        "ret": "string",
        "class": "surfacedata_t",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "GetSoundScrapeSmooth",
        "ret": "string",
        "class": "surfacedata_t",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "GetSoundStepLeft",
        "ret": "string",
        "class": "surfacedata_t",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "GetSoundStepRight",
        "ret": "string",
        "class": "surfacedata_t",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "GetSoundStrain",
        "ret": "string",
        "class": "surfacedata_t",
        "args": null,
        "desc": null
    },
    {
        "kind": "function",
        "id": "GetThickness",
        "ret": "float",
        "class": "surfacedata_t",
        "args": null,
        "desc": null
    },
    {
        "kind": "class_member",
        "id": "a",
        "class": "Color",
        "desc": "Member variable for alpha. (transparency)"
    },
    {
        "kind": "class_member",
        "id": "b",
        "class": "Color",
        "desc": "Member variable for blue."
    },
    {
        "kind": "class_member",
        "id": "g",
        "class": "Color",
        "desc": "Member variable for green."
    },
    {
        "kind": "class_member",
        "id": "r",
        "class": "Color",
        "desc": "Member variable for red."
    },
    {
        "kind": "class_member",
        "id": "w",
        "class": "Quaternion",
        "desc": "The quaternion's scalar component."
    },
    {
        "kind": "class_member",
        "id": "x",
        "class": "Quaternion",
        "desc": "The quaternion's i axis component."
    },
    {
        "kind": "class_member",
        "id": "y",
        "class": "Quaternion",
        "desc": "The quaternion's j axis component."
    },
    {
        "kind": "class_member",
        "id": "z",
        "class": "Quaternion",
        "desc": "The quaternion's k axis component."
    },
    {
        "kind": "class_member",
        "id": "x",
        "class": "Vector",
        "desc": "The vector's X coordinate on the cartesian X axis."
    },
    {
        "kind": "class_member",
        "id": "y",
        "class": "Vector",
        "desc": "The vector's Y coordinate on the cartesian Y axis."
    },
    {
        "kind": "class_member",
        "id": "z",
        "class": "Vector",
        "desc": "The vector's Z coordinate on the cartesian Z axis."
    },
    {
        "kind": "hook",
        "id": "GetActualShootPosition",
        "class": "CAI_BaseNPC",
        "description": "Called when the NPC is getting their actual shoot position, using the default shoot position as the parameter. (NOTE: NPCs which override this themselves might not always use this hook!)",
        "args": [
            {
                "type": "Vector",
                "id": "shootOrigin"
            },
            {
                "type": "handle",
                "id": "target"
            }
        ]
    },
    {
        "kind": "hook",
        "id": "NPC_TranslateActivity",
        "class": "CAI_BaseNPC",
        "description": "Called when the NPC is translating their current activity. The activity is provided in both string and ID form. Should return either an activity string or an activity ID. Return -1 to not translate.",
        "args": [
            {
                "type": "string",
                "id": "activity"
            },
            {
                "type": "int",
                "id": "activity_id"
            }
        ]
    },
    {
        "kind": "hook",
        "id": "NPC_TranslateSchedule",
        "class": "CAI_BaseNPC",
        "description": "Called when the NPC is translating their current schedule. The schedule is provided in both string and ID form. Should return either a schedule string or a schedule ID. Return -1 to not translate.",
        "args": [
            {
                "type": "string",
                "id": "schedule"
            },
            {
                "type": "int",
                "id": "schedule_id"
            }
        ]
    },
    {
        "kind": "hook",
        "id": "QueryHearSound",
        "class": "CAI_BaseNPC",
        "description": "Called when the NPC is deciding whether to hear a CSound or not.",
        "args": [
            {
                "type": "handle",
                "id": "sound"
            }
        ]
    },
    {
        "kind": "hook",
        "id": "QuerySeeEntity",
        "class": "CAI_BaseNPC",
        "description": "Called when the NPC is deciding whether to see an entity or not.",
        "args": [
            {
                "type": "handle",
                "id": "entity"
            }
        ]
    },
    {
        "kind": "hook",
        "id": "HandleAnimEvent",
        "class": "CBaseAnimating",
        "description": "Called when handling animation events. Return false to cancel base handling.",
        "args": [
            {
                "type": "handle",
                "id": "event"
            }
        ]
    },
    {
        "kind": "hook",
        "id": "OnServerRagdoll",
        "class": "CBaseAnimating",
        "description": "Called when this entity creates/turns into a server-side ragdoll.",
        "args": [
            {
                "type": "handle",
                "id": "ragdoll"
            },
            {
                "type": "bool",
                "id": "submodel"
            }
        ]
    },
    {
        "kind": "hook",
        "id": "RelationshipPriority",
        "class": "CBaseCombatCharacter",
        "description": "Called when a character's relationship priority for another entity is requested. Returning a number will make the game use that priority instead of the default priority. (note: 'default' in this case includes overrides from ai_relationship/SetRelationship)",
        "args": [
            {
                "type": "handle",
                "id": "entity"
            },
            {
                "type": "int",
                "id": "def"
            }
        ]
    },
    {
        "kind": "hook",
        "id": "RelationshipType",
        "class": "CBaseCombatCharacter",
        "description": "Called when a character's relationship to another entity is requested. Returning a disposition will make the game use that disposition instead of the default relationship. (note: 'default' in this case includes overrides from ai_relationship/SetRelationship)",
        "args": [
            {
                "type": "handle",
                "id": "entity"
            },
            {
                "type": "int",
                "id": "def"
            }
        ]
    },
    {
        "kind": "hook",
        "id": "FireBullets",
        "class": "CBaseEntity",
        "description": "Called for every single VPhysics-related collision experienced by this entity.",
        "args": [
            {
                "type": "handle",
                "id": "entity"
            },
            {
                "type": "float",
                "id": "speed"
            },
            {
                "type": "Vector",
                "id": "point"
            },
            {
                "type": "Vector",
                "id": "normal"
            }
        ]
    },
    {
        "kind": "hook",
        "id": "HandleInteraction",
        "class": "CBaseEntity",
        "description": "Called for internal game interactions. See the g_interaction set of constants for more information. Returning true or false will return that value without falling to any internal handling. Returning nothing will allow the interaction to fall to any internal handling.",
        "args": [
            {
                "type": "int",
                "id": "interaction"
            },
            {
                "type": "handle",
                "id": "sourceEnt"
            }
        ]
    },
    {
        "kind": "hook",
        "id": "ModifyEmitSoundParams",
        "class": "CBaseEntity",
        "description": "Called every time a sound is emitted on this entity, allowing for its parameters to be modified.",
        "args": [
            {
                "type": "handle",
                "id": "params"
            }
        ]
    },
    {
        "kind": "hook",
        "id": "ModifySentenceParams",
        "class": "CBaseEntity",
        "description": "Called every time a sentence is emitted on this entity, allowing for its parameters to be modified.",
        "args": [
            {
                "type": "handle",
                "id": "params"
            }
        ]
    },
    {
        "kind": "hook",
        "id": "OnDeath",
        "class": "CBaseEntity",
        "description": "Called when the entity dies (Event_Killed). Returning false makes the entity cancel death, although this could have unforeseen consequences. For hooking any damage instead of just death, see filter_script and PassesFinalDamageFilter.",
        "args": [
            {
                "type": "handle",
                "id": "info"
            }
        ]
    },
    {
        "kind": "hook",
        "id": "OnEntText",
        "class": "CBaseEntity",
        "description": "Called every frame when ent_text is enabled on the entity. Return a string to be added to the ent_text printout.",
        "args": null
    },
    {
        "kind": "hook",
        "id": "OnKilledOther",
        "class": "CBaseEntity",
        "description": "Called when the entity kills another entity.",
        "args": [
            {
                "type": "handle",
                "id": "victim"
            },
            {
                "type": "handle",
                "id": "info"
            }
        ]
    },
    {
        "kind": "hook",
        "id": "UpdateOnRemove",
        "class": "CBaseEntity",
        "description": "Called when the entity is being removed.",
        "args": null
    },
    {
        "kind": "hook",
        "id": "VPhysicsCollision",
        "class": "CBaseEntity",
        "description": "Called for every single VPhysics-related collision experienced by this entity.",
        "args": [
            {
                "type": "handle",
                "id": "entity"
            },
            {
                "type": "float",
                "id": "speed"
            },
            {
                "type": "Vector",
                "id": "point"
            },
            {
                "type": "Vector",
                "id": "normal"
            }
        ]
    },
    {
        "kind": "hook",
        "id": "PlayerRunCommand",
        "class": "CBasePlayer",
        "description": "Called when running a player command on the server.",
        "args": [
            {
                "type": "handle",
                "id": "command"
            }
        ]
    },
    {
        "kind": "hook",
        "id": "OnEntityCreated",
        "class": "CEntities",
        "description": "Called when an entity is created. Requires EnableEntityListening() to be fired beforehand.",
        "args": [
            {
                "type": "handle",
                "id": "entity"
            }
        ]
    },
    {
        "kind": "hook",
        "id": "OnEntityDeleted",
        "class": "CEntities",
        "description": "Called when an entity is deleted. Requires EnableEntityListening() to be fired beforehand.",
        "args": [
            {
                "type": "handle",
                "id": "entity"
            }
        ]
    },
    {
        "kind": "hook",
        "id": "OnEntitySpawned",
        "class": "CEntities",
        "description": "Called when an entity spawns. Requires EnableEntityListening() to be fired beforehand.",
        "args": [
            {
                "type": "handle",
                "id": "entity"
            }
        ]
    },
    {
        "kind": "hook",
        "id": "BloodAllowed",
        "class": "CFilterScript",
        "description": "A completely optional hook used by filter_script to determine if a caller is allowed to emit blood after taking damage. Return true if blood should be allowed or false if it should not. If this hook is not defined, it will always return true.",
        "args": [
            {
                "type": "handle",
                "id": "caller"
            },
            {
                "type": "handle",
                "id": "info"
            }
        ]
    },
    {
        "kind": "hook",
        "id": "DamageMod",
        "class": "CFilterScript",
        "description": "A completely optional hook used by filter_script to modify damage being taken by an entity. You are free to use CTakeDamageInfo functions on the damage info handle and it will change how the caller is damaged. Returning true or false currently has no effect on vanilla code, but you should generally return true if the damage info has been modified by your code and false if it was not. If this hook is not defined, it will always return false.",
        "args": [
            {
                "type": "handle",
                "id": "caller"
            },
            {
                "type": "handle",
                "id": "info"
            }
        ]
    },
    {
        "kind": "hook",
        "id": "PassesDamageFilter",
        "class": "CFilterScript",
        "description": "A hook used by filter_script to determine what damage should pass it when it's being used as a damage filter. Return true if the info should pass or false if it should not. If this hook is not defined in a filter_script, damage filter requests will instead check PassesFilter with the attacker as the activator.",
        "args": [
            {
                "type": "handle",
                "id": "caller"
            },
            {
                "type": "handle",
                "id": "info"
            }
        ]
    },
    {
        "kind": "hook",
        "id": "PassesFilter",
        "class": "CFilterScript",
        "description": "A hook used by filter_script to determine what entities should pass it. Return true if the entity should pass or false if it should not. This hook is required for regular filtering.",
        "args": [
            {
                "type": "handle",
                "id": "caller"
            },
            {
                "type": "handle",
                "id": "activator"
            }
        ]
    },
    {
        "kind": "hook",
        "id": "PassesFinalDamageFilter",
        "class": "CFilterScript",
        "description": "A completely optional hook used by filter_script which only runs when the entity will take damage. This is different from PassesDamageFilter, which is sometimes used in cases where damage is not actually about to be taken. This also runs after a regular PassesDamageFilter check. Return true if the info should pass or false if it should not. If this hook is not defined, it will always return true.",
        "args": [
            {
                "type": "handle",
                "id": "caller"
            },
            {
                "type": "handle",
                "id": "info"
            }
        ]
    }
]